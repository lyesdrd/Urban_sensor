
PROOOJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ad0  08003ad0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003ae4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003ae4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c303  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce1  00000000  00000000  0002c337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a5b  00000000  00000000  0002f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d774  00000000  00000000  0003109b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069319  00000000  00000000  0003e80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000298c  00000000  00000000  000a7b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a94 	.word	0x08003a94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a94 	.word	0x08003a94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8d8 	bl	8000484 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8d3 	bl	8000484 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	; (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <__clzdi2>:
 8000484:	b510      	push	{r4, lr}
 8000486:	2900      	cmp	r1, #0
 8000488:	d103      	bne.n	8000492 <__clzdi2+0xe>
 800048a:	f7ff ffdd 	bl	8000448 <__clzsi2>
 800048e:	3020      	adds	r0, #32
 8000490:	e002      	b.n	8000498 <__clzdi2+0x14>
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	f7ff ffd8 	bl	8000448 <__clzsi2>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fb9d 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f835 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f9a3 	bl	80007f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ae:	f000 f8dd 	bl	800066c <MX_TIM2_Init>
  MX_I2C1_Init();
 80004b2:	f000 f89b 	bl	80005ec <MX_I2C1_Init>
  MX_TIM21_Init();
 80004b6:	f000 f947 	bl	8000748 <MX_TIM21_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2201      	movs	r2, #1
 80004c0:	2120      	movs	r1, #32
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fed5 	bl	8001272 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fbf7 	bl	8000cc0 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fec9 	bl	8001272 <HAL_GPIO_WritePin>
	 HAL_Delay(200);
 80004e0:	20c8      	movs	r0, #200	; 0xc8
 80004e2:	f000 fbed 	bl	8000cc0 <HAL_Delay>

	 PinState=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80004e6:	1dfc      	adds	r4, r7, #7
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <main+0x70>)
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fea3 	bl	8001238 <HAL_GPIO_ReadPin>
 80004f2:	0003      	movs	r3, r0
 80004f4:	7023      	strb	r3, [r4, #0]

	 if(PinState==1){
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d1dd      	bne.n	80004ba <main+0x1e>
		 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <main+0x74>)
 8000500:	2100      	movs	r1, #0
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fd10 	bl	8002f28 <HAL_TIM_PWM_Start>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000508:	e7d7      	b.n	80004ba <main+0x1e>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	50000400 	.word	0x50000400
 8000510:	20000074 	.word	0x20000074

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b099      	sub	sp, #100	; 0x64
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	242c      	movs	r4, #44	; 0x2c
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2334      	movs	r3, #52	; 0x34
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f003 faad 	bl	8003a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	2318      	movs	r3, #24
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2314      	movs	r3, #20
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 faa5 	bl	8003a84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2318      	movs	r3, #24
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f003 fa9e 	bl	8003a84 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SystemClock_Config+0xd4>)
 800054e:	401a      	ands	r2, r3
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemClock_Config+0xd0>)
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	0109      	lsls	r1, r1, #4
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2210      	movs	r2, #16
 8000560:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	22a0      	movs	r2, #160	; 0xa0
 8000572:	0212      	lsls	r2, r2, #8
 8000574:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	187b      	adds	r3, r7, r1
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fdc2 	bl	8002108 <HAL_RCC_OscConfig>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000588:	f000 f9a4 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	2118      	movs	r1, #24
 800058e:	187b      	adds	r3, r7, r1
 8000590:	220f      	movs	r2, #15
 8000592:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2100      	movs	r1, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 f925 	bl	8002800 <HAL_RCC_ClockConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ba:	f000 f98b 	bl	80008d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005be:	003b      	movs	r3, r7
 80005c0:	2208      	movs	r2, #8
 80005c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ca:	003b      	movs	r3, r7
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 fb05 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d6:	f000 f97d 	bl	80008d4 <Error_Handler>
  }
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b019      	add	sp, #100	; 0x64
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40007000 	.word	0x40007000
 80005e8:	ffffe7ff 	.word	0xffffe7ff

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_I2C1_Init+0x78>)
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <MX_I2C1_Init+0x7c>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x78>)
 80005f8:	22e1      	movs	r2, #225	; 0xe1
 80005fa:	00d2      	lsls	r2, r2, #3
 80005fc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_I2C1_Init+0x78>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x78>)
 8000606:	2201      	movs	r2, #1
 8000608:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_I2C1_Init+0x78>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x78>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_I2C1_Init+0x78>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x78>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_I2C1_Init+0x78>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_I2C1_Init+0x78>)
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fe3e 	bl	80012ac <HAL_I2C_Init>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f94e 	bl	80008d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_I2C1_Init+0x78>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fccb 	bl	8001fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000646:	f000 f945 	bl	80008d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_I2C1_Init+0x78>)
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fd0e 	bl	8002070 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 f93c 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000028 	.word	0x20000028
 8000668:	40005400 	.word	0x40005400

0800066c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000672:	2310      	movs	r3, #16
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	2308      	movs	r3, #8
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 fa01 	bl	8003a84 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000682:	003b      	movs	r3, r7
 8000684:	0018      	movs	r0, r3
 8000686:	2310      	movs	r3, #16
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f003 f9fa 	bl	8003a84 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_TIM2_Init+0xd4>)
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	05d2      	lsls	r2, r2, #23
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <MX_TIM2_Init+0xd4>)
 800069a:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <MX_TIM2_Init+0xd8>)
 800069c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <MX_TIM2_Init+0xd4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_TIM2_Init+0xd4>)
 80006a6:	2263      	movs	r2, #99	; 0x63
 80006a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <MX_TIM2_Init+0xd4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_TIM2_Init+0xd4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_TIM2_Init+0xd4>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 fbf5 	bl	8002ea8 <HAL_TIM_PWM_Init>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006c2:	f000 f907 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2110      	movs	r1, #16
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d4:	187a      	adds	r2, r7, r1
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_TIM2_Init+0xd4>)
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f003 f95e 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80006e4:	f000 f8f6 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2260      	movs	r2, #96	; 0x60
 80006ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 20;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2214      	movs	r2, #20
 80006f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000700:	0039      	movs	r1, r7
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_TIM2_Init+0xd4>)
 8000704:	2204      	movs	r2, #4
 8000706:	0018      	movs	r0, r3
 8000708:	f002 fd7a 	bl	8003200 <HAL_TIM_PWM_ConfigChannel>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000710:	f000 f8e0 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800071a:	0039      	movs	r1, r7
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_TIM2_Init+0xd4>)
 800071e:	2208      	movs	r2, #8
 8000720:	0018      	movs	r0, r3
 8000722:	f002 fd6d 	bl	8003200 <HAL_TIM_PWM_ConfigChannel>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800072a:	f000 f8d3 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <MX_TIM2_Init+0xd4>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f973 	bl	8000a1c <HAL_TIM_MspPostInit>

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b006      	add	sp, #24
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	20000074 	.word	0x20000074
 8000744:	000003e7 	.word	0x000003e7

08000748 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	2308      	movs	r3, #8
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2310      	movs	r3, #16
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f003 f993 	bl	8003a84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	2308      	movs	r3, #8
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f003 f98c 	bl	8003a84 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM21_Init+0xa0>)
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <MX_TIM21_Init+0xa4>)
 8000770:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 9999;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM21_Init+0xa0>)
 8000774:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_TIM21_Init+0xa8>)
 8000776:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_TIM21_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 99;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM21_Init+0xa0>)
 8000780:	2263      	movs	r2, #99	; 0x63
 8000782:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_TIM21_Init+0xa0>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_TIM21_Init+0xa0>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM21_Init+0xa0>)
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fb48 	bl	8002e28 <HAL_TIM_Base_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f89a 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	2108      	movs	r1, #8
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0152      	lsls	r2, r2, #5
 80007a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM21_Init+0xa0>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fdeb 	bl	800338c <HAL_TIM_ConfigClockSource>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 80007ba:	f000 f88b 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80007ca:	003a      	movs	r2, r7
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_TIM21_Init+0xa0>)
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 f8e3 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80007da:	f000 f87b 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b006      	add	sp, #24
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200000b4 	.word	0x200000b4
 80007ec:	40010800 	.word	0x40010800
 80007f0:	0000270f 	.word	0x0000270f

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	240c      	movs	r4, #12
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	0018      	movs	r0, r3
 8000800:	2314      	movs	r3, #20
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f003 f93d 	bl	8003a84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_GPIO_Init+0xd8>)
 800080c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_GPIO_Init+0xd8>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0xd8>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xd8>)
 8000824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_GPIO_Init+0xd8>)
 8000828:	2102      	movs	r1, #2
 800082a:	430a      	orrs	r2, r1
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xd8>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	2202      	movs	r2, #2
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fd15 	bl	8001272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_GPIO_Init+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fd0f 	bl	8001272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2220      	movs	r2, #32
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	193a      	adds	r2, r7, r4
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fb79 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2220      	movs	r2, #32
 8000880:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2288      	movs	r2, #136	; 0x88
 8000886:	0352      	lsls	r2, r2, #13
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	000c      	movs	r4, r1
 8000892:	187b      	adds	r3, r7, r1
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <MX_GPIO_Init+0xdc>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 fb67 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089e:	0021      	movs	r1, r4
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2240      	movs	r2, #64	; 0x40
 80008a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2201      	movs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <MX_GPIO_Init+0xdc>)
 80008bc:	0019      	movs	r1, r3
 80008be:	0010      	movs	r0, r2
 80008c0:	f000 fb54 	bl	8000f6c <HAL_GPIO_Init>

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b009      	add	sp, #36	; 0x24
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	50000400 	.word	0x50000400

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_MspInit+0x24>)
 80008e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x24>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	430a      	orrs	r2, r1
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_MspInit+0x24>)
 80008f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_MspInit+0x24>)
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	0549      	lsls	r1, r1, #21
 80008fa:	430a      	orrs	r2, r1
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	240c      	movs	r4, #12
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2314      	movs	r3, #20
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f003 f8b2 	bl	8003a84 <memset>
  if(hi2c->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <HAL_I2C_MspInit+0x90>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d132      	bne.n	8000990 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_I2C_MspInit+0x94>)
 800092c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_I2C_MspInit+0x94>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_I2C_MspInit+0x94>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	22c0      	movs	r2, #192	; 0xc0
 8000946:	00d2      	lsls	r2, r2, #3
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2212      	movs	r2, #18
 8000950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2203      	movs	r2, #3
 800095c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2201      	movs	r2, #1
 8000962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	187a      	adds	r2, r7, r1
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fafd 	bl	8000f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_I2C_MspInit+0x94>)
 8000974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_I2C_MspInit+0x94>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0389      	lsls	r1, r1, #14
 800097c:	430a      	orrs	r2, r1
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2017      	movs	r0, #23
 8000986:	f000 fa6b 	bl	8000e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800098a:	2017      	movs	r0, #23
 800098c:	f000 fa7d 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b009      	add	sp, #36	; 0x24
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40005400 	.word	0x40005400
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d10d      	bne.n	80009d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_TIM_PWM_MspInit+0x38>)
 80009b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_TIM_PWM_MspInit+0x38>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	200f      	movs	r0, #15
 80009c6:	f000 fa4b 	bl	8000e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f000 fa5d 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_TIM_Base_MspInit+0x38>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009f4:	2104      	movs	r1, #4
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2014      	movs	r0, #20
 8000a00:	f000 fa2e 	bl	8000e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000a04:	2014      	movs	r0, #20
 8000a06:	f000 fa40 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	240c      	movs	r4, #12
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f003 f828 	bl	8003a84 <memset>
  if(htim->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d136      	bne.n	8000aae <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <HAL_TIM_MspPostInit+0x9c>)
 8000a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_TIM_MspPostInit+0x9c>)
 8000a46:	2102      	movs	r1, #2
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_TIM_MspPostInit+0x9c>)
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	2202      	movs	r2, #2
 8000a52:	4013      	ands	r3, r2
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB0     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2205      	movs	r2, #5
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_TIM_MspPostInit+0xa0>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f000 fa75 	bl	8000f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2208      	movs	r2, #8
 8000a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <HAL_TIM_MspPostInit+0xa0>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 fa5f 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b009      	add	sp, #36	; 0x24
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	50000400 	.word	0x50000400

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f8d0 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <TIM2_IRQHandler+0x14>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fa9a 	bl	8003030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000074 	.word	0x20000074

08000b08 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <TIM21_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 fa8e 	bl	8003030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	200000b4 	.word	0x200000b4

08000b20 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <I2C1_IRQHandler+0x2c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	699a      	ldr	r2, [r3, #24]
 8000b2a:	23e0      	movs	r3, #224	; 0xe0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d004      	beq.n	8000b3c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <I2C1_IRQHandler+0x2c>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 fc69 	bl	800140c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000b3a:	e003      	b.n	8000b44 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <I2C1_IRQHandler+0x2c>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fc4a 	bl	80013d8 <HAL_I2C_EV_IRQHandler>
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000028 	.word	0x20000028

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b5e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b62:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b64:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <LoopForever+0xa>)
    CMP R1, R2
 8000b68:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b6a:	d105      	bne.n	8000b78 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b6e:	4913      	ldr	r1, [pc, #76]	; (8000bbc <LoopForever+0x12>)
    STR R1, [R0]
 8000b70:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b74:	4913      	ldr	r1, [pc, #76]	; (8000bc4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b76:	6001      	str	r1, [r0, #0]

08000b78 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b7a:	4914      	ldr	r1, [pc, #80]	; (8000bcc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <LoopForever+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b90:	4c11      	ldr	r4, [pc, #68]	; (8000bd8 <LoopForever+0x2e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b9e:	f7ff ffd7 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f002 ff4b 	bl	8003a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fc79 	bl	800049c <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
   ldr   r0, =_estack
 8000bac:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000bb0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000bb4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000bb8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000bbc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000bc0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000bc4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	08003ad8 	.word	0x08003ad8
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	200000f8 	.word	0x200000f8

08000bdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_COMP_IRQHandler>
	...

08000be0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x3c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Init+0x3c>)
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f811 	bl	8000c20 <HAL_InitTick>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e001      	b.n	8000c0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0a:	f7ff fe69 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c2a:	681c      	ldr	r4, [r3, #0]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0x60>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	0019      	movs	r1, r3
 8000c32:	23fa      	movs	r3, #250	; 0xfa
 8000c34:	0098      	lsls	r0, r3, #2
 8000c36:	f7ff fa67 	bl	8000108 <__udivsi3>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0020      	movs	r0, r4
 8000c40:	f7ff fa62 	bl	8000108 <__udivsi3>
 8000c44:	0003      	movs	r3, r0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f92f 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e00f      	b.n	8000c74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d80b      	bhi.n	8000c72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	425b      	negs	r3, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 f8fc 	bl	8000e60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_InitTick+0x64>)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b003      	add	sp, #12
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	001a      	movs	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	18d2      	adds	r2, r2, r3
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	200000f4 	.word	0x200000f4

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	200000f4 	.word	0x200000f4

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff fff0 	bl	8000cac <HAL_GetTick>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	001a      	movs	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	189b      	adds	r3, r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	f7ff ffe0 	bl	8000cac <HAL_GetTick>
 8000cec:	0002      	movs	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b7f      	cmp	r3, #127	; 0x7f
 8000d1a:	d809      	bhi.n	8000d30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	001a      	movs	r2, r3
 8000d22:	231f      	movs	r3, #31
 8000d24:	401a      	ands	r2, r3
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_EnableIRQ+0x30>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4091      	lsls	r1, r2
 8000d2c:	000a      	movs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
  }
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0002      	movs	r2, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d50:	d828      	bhi.n	8000da4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d52:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <__NVIC_SetPriority+0xd4>)
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	33c0      	adds	r3, #192	; 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	589b      	ldr	r3, [r3, r2]
 8000d62:	1dfa      	adds	r2, r7, #7
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	0011      	movs	r1, r2
 8000d68:	2203      	movs	r2, #3
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	00d2      	lsls	r2, r2, #3
 8000d6e:	21ff      	movs	r1, #255	; 0xff
 8000d70:	4091      	lsls	r1, r2
 8000d72:	000a      	movs	r2, r1
 8000d74:	43d2      	mvns	r2, r2
 8000d76:	401a      	ands	r2, r3
 8000d78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	019b      	lsls	r3, r3, #6
 8000d7e:	22ff      	movs	r2, #255	; 0xff
 8000d80:	401a      	ands	r2, r3
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0018      	movs	r0, r3
 8000d88:	2303      	movs	r3, #3
 8000d8a:	4003      	ands	r3, r0
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <__NVIC_SetPriority+0xd4>)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	33c0      	adds	r3, #192	; 0xc0
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000da2:	e031      	b.n	8000e08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <__NVIC_SetPriority+0xd8>)
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	0019      	movs	r1, r3
 8000dac:	230f      	movs	r3, #15
 8000dae:	400b      	ands	r3, r1
 8000db0:	3b08      	subs	r3, #8
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3306      	adds	r3, #6
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1dfa      	adds	r2, r7, #7
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	21ff      	movs	r1, #255	; 0xff
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	43d2      	mvns	r2, r2
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	019b      	lsls	r3, r3, #6
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	401a      	ands	r2, r3
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	0018      	movs	r0, r3
 8000de4:	2303      	movs	r3, #3
 8000de6:	4003      	ands	r3, r0
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <__NVIC_SetPriority+0xd8>)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	001c      	movs	r4, r3
 8000df4:	230f      	movs	r3, #15
 8000df6:	4023      	ands	r3, r4
 8000df8:	3b08      	subs	r3, #8
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	3306      	adds	r3, #6
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	18c3      	adds	r3, r0, r3
 8000e04:	3304      	adds	r3, #4
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b003      	add	sp, #12
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	045b      	lsls	r3, r3, #17
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d301      	bcc.n	8000e30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e010      	b.n	8000e52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <SysTick_Config+0x44>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	3a01      	subs	r2, #1
 8000e36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	2103      	movs	r1, #3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff ff7c 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x44>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x44>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	1c02      	adds	r2, r0, #0
 8000e70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	0002      	movs	r2, r0
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff ff33 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ffaf 	bl	8000e18 <SysTick_Config>
 8000eba:	0003      	movs	r3, r0
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ecc:	210f      	movs	r1, #15
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2225      	movs	r2, #37	; 0x25
 8000ed8:	5c9b      	ldrb	r3, [r3, r2]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d006      	beq.n	8000eee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e02a      	b.n	8000f44 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	210e      	movs	r1, #14
 8000efa:	438a      	bics	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	438a      	bics	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	221c      	movs	r2, #28
 8000f14:	401a      	ands	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2225      	movs	r2, #37	; 0x25
 8000f26:	2101      	movs	r1, #1
 8000f28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2224      	movs	r2, #36	; 0x24
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	0010      	movs	r0, r2
 8000f42:	4798      	blx	r3
    }
  }
  return status;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2225      	movs	r2, #37	; 0x25
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	b2db      	uxtb	r3, r3
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f82:	e143      	b.n	800120c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	000a      	movs	r2, r1
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d100      	bne.n	8000f9c <HAL_GPIO_Init+0x30>
 8000f9a:	e134      	b.n	8001206 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2203      	movs	r2, #3
 8000fae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	2201      	movs	r2, #1
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2203      	movs	r2, #3
 800101c:	4013      	ands	r3, r2
 800101e:	2b03      	cmp	r3, #3
 8001020:	d017      	beq.n	8001052 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	4013      	ands	r3, r2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d123      	bne.n	80010a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	58d3      	ldr	r3, [r2, r3]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2207      	movs	r2, #7
 8001070:	4013      	ands	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2107      	movs	r1, #7
 800108a:	400b      	ands	r3, r1
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	6939      	ldr	r1, [r7, #16]
 80010a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	401a      	ands	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	23c0      	movs	r3, #192	; 0xc0
 80010e0:	029b      	lsls	r3, r3, #10
 80010e2:	4013      	ands	r3, r2
 80010e4:	d100      	bne.n	80010e8 <HAL_GPIO_Init+0x17c>
 80010e6:	e08e      	b.n	8001206 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x2b8>)
 80010ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x2b8>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	430a      	orrs	r2, r1
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x2bc>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	589b      	ldr	r3, [r3, r2]
 8001100:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	429a      	cmp	r2, r3
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x1d2>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a41      	ldr	r2, [pc, #260]	; (800122c <HAL_GPIO_Init+0x2c0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x1ce>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a40      	ldr	r2, [pc, #256]	; (8001230 <HAL_GPIO_Init+0x2c4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x1ca>
 8001132:	2302      	movs	r3, #2
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x1d4>
 8001136:	2306      	movs	r3, #6
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x1d4>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x1d4>
 800113e:	2300      	movs	r3, #0
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	2103      	movs	r1, #3
 8001144:	400a      	ands	r2, r1
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_GPIO_Init+0x2bc>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	025b      	lsls	r3, r3, #9
 8001176:	4013      	ands	r3, r2
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	035b      	lsls	r3, r3, #13
 80011ca:	4013      	ands	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	039b      	lsls	r3, r3, #14
 80011f4:	4013      	ands	r3, r2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	40da      	lsrs	r2, r3
 8001214:	1e13      	subs	r3, r2, #0
 8001216:	d000      	beq.n	800121a <HAL_GPIO_Init+0x2ae>
 8001218:	e6b4      	b.n	8000f84 <HAL_GPIO_Init+0x18>
  }
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b006      	add	sp, #24
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	50000400 	.word	0x50000400
 8001230:	50000800 	.word	0x50000800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	000a      	movs	r2, r1
 8001242:	1cbb      	adds	r3, r7, #2
 8001244:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	1cba      	adds	r2, r7, #2
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	4013      	ands	r3, r2
 8001250:	d004      	beq.n	800125c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001252:	230f      	movs	r3, #15
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e003      	b.n	8001264 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	0008      	movs	r0, r1
 800127c:	0011      	movs	r1, r2
 800127e:	1cbb      	adds	r3, r7, #2
 8001280:	1c02      	adds	r2, r0, #0
 8001282:	801a      	strh	r2, [r3, #0]
 8001284:	1c7b      	adds	r3, r7, #1
 8001286:	1c0a      	adds	r2, r1, #0
 8001288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128a:	1c7b      	adds	r3, r7, #1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	1cbb      	adds	r3, r7, #2
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800129a:	e003      	b.n	80012a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800129c:	1cbb      	adds	r3, r7, #2
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e082      	b.n	80013c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2241      	movs	r2, #65	; 0x41
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d107      	bne.n	80012da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	2100      	movs	r1, #0
 80012d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fb17 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2241      	movs	r2, #65	; 0x41
 80012de:	2124      	movs	r1, #36	; 0x24
 80012e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	438a      	bics	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4934      	ldr	r1, [pc, #208]	; (80013cc <HAL_I2C_Init+0x120>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4931      	ldr	r1, [pc, #196]	; (80013d0 <HAL_I2C_Init+0x124>)
 800130c:	400a      	ands	r2, r1
 800130e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0209      	lsls	r1, r1, #8
 8001324:	430a      	orrs	r2, r1
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e007      	b.n	800133a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2184      	movs	r1, #132	; 0x84
 8001334:	0209      	lsls	r1, r1, #8
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d104      	bne.n	800134c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	491f      	ldr	r1, [pc, #124]	; (80013d4 <HAL_I2C_Init+0x128>)
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	491a      	ldr	r1, [pc, #104]	; (80013d0 <HAL_I2C_Init+0x124>)
 8001368:	400a      	ands	r2, r1
 800136a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	431a      	orrs	r2, r3
 8001376:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69d9      	ldr	r1, [r3, #28]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2241      	movs	r2, #65	; 0x41
 80013b0:	2120      	movs	r1, #32
 80013b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2242      	movs	r2, #66	; 0x42
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f0ffffff 	.word	0xf0ffffff
 80013d0:	ffff7fff 	.word	0xffff7fff
 80013d4:	02008000 	.word	0x02008000

080013d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b004      	add	sp, #16
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	001a      	movs	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	4013      	ands	r3, r2
 800142e:	d010      	beq.n	8001452 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	09db      	lsrs	r3, r3, #7
 8001434:	001a      	movs	r2, r3
 8001436:	2301      	movs	r3, #1
 8001438:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800143a:	d00a      	beq.n	8001452 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	2201      	movs	r2, #1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0052      	lsls	r2, r2, #1
 8001450:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	0a9b      	lsrs	r3, r3, #10
 8001456:	001a      	movs	r2, r3
 8001458:	2301      	movs	r3, #1
 800145a:	4013      	ands	r3, r2
 800145c:	d010      	beq.n	8001480 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	09db      	lsrs	r3, r3, #7
 8001462:	001a      	movs	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001468:	d00a      	beq.n	8001480 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	2208      	movs	r2, #8
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	00d2      	lsls	r2, r2, #3
 800147e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	0a5b      	lsrs	r3, r3, #9
 8001484:	001a      	movs	r2, r3
 8001486:	2301      	movs	r3, #1
 8001488:	4013      	ands	r3, r2
 800148a:	d010      	beq.n	80014ae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	09db      	lsrs	r3, r3, #7
 8001490:	001a      	movs	r2, r3
 8001492:	2301      	movs	r3, #1
 8001494:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001496:	d00a      	beq.n	80014ae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	2202      	movs	r2, #2
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	220b      	movs	r2, #11
 80014b8:	4013      	ands	r3, r2
 80014ba:	d005      	beq.n	80014c8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0011      	movs	r1, r2
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 fbd8 	bl	8001c78 <I2C_ITError>
  }
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b006      	add	sp, #24
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	0008      	movs	r0, r1
 80014fa:	0011      	movs	r1, r2
 80014fc:	1cfb      	adds	r3, r7, #3
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	003b      	movs	r3, r7
 8001504:	1c0a      	adds	r2, r1, #0
 8001506:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2240      	movs	r2, #64	; 0x40
 800155a:	5c9b      	ldrb	r3, [r3, r2]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <I2C_Slave_ISR_IT+0x24>
 8001560:	2302      	movs	r3, #2
 8001562:	e0fa      	b.n	800175a <I2C_Slave_ISR_IT+0x21a>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	2101      	movs	r1, #1
 800156a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	001a      	movs	r2, r3
 8001572:	2301      	movs	r3, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d00b      	beq.n	8001590 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	001a      	movs	r2, r3
 800157e:	2301      	movs	r3, #1
 8001580:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001582:	d005      	beq.n	8001590 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0011      	movs	r1, r2
 800158a:	0018      	movs	r0, r3
 800158c:	f000 f9f6 	bl	800197c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	001a      	movs	r2, r3
 8001596:	2301      	movs	r3, #1
 8001598:	4013      	ands	r3, r2
 800159a:	d054      	beq.n	8001646 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	001a      	movs	r2, r3
 80015a2:	2301      	movs	r3, #1
 80015a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015a6:	d04e      	beq.n	8001646 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d12d      	bne.n	800160e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2241      	movs	r2, #65	; 0x41
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b28      	cmp	r3, #40	; 0x28
 80015bc:	d10b      	bne.n	80015d6 <I2C_Slave_ISR_IT+0x96>
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	049b      	lsls	r3, r3, #18
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d106      	bne.n	80015d6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 faf8 	bl	8001bc4 <I2C_ITListenCplt>
 80015d4:	e036      	b.n	8001644 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2241      	movs	r2, #65	; 0x41
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b29      	cmp	r3, #41	; 0x29
 80015e0:	d110      	bne.n	8001604 <I2C_Slave_ISR_IT+0xc4>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	4a5f      	ldr	r2, [pc, #380]	; (8001764 <I2C_Slave_ISR_IT+0x224>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00c      	beq.n	8001604 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2210      	movs	r2, #16
 80015f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fc4a 	bl	8001e8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 f957 	bl	80018b0 <I2C_ITSlaveSeqCplt>
 8001602:	e01f      	b.n	8001644 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2210      	movs	r2, #16
 800160a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800160c:	e09d      	b.n	800174a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2210      	movs	r2, #16
 8001614:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	2204      	movs	r2, #4
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <I2C_Slave_ISR_IT+0xf4>
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	045b      	lsls	r3, r3, #17
 800162e:	429a      	cmp	r2, r3
 8001630:	d000      	beq.n	8001634 <I2C_Slave_ISR_IT+0xf4>
 8001632:	e08a      	b.n	800174a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f000 fb1b 	bl	8001c78 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001642:	e082      	b.n	800174a <I2C_Slave_ISR_IT+0x20a>
 8001644:	e081      	b.n	800174a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	001a      	movs	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	4013      	ands	r3, r2
 8001650:	d031      	beq.n	80016b6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	001a      	movs	r2, r3
 8001658:	2301      	movs	r3, #1
 800165a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800165c:	d02b      	beq.n	80016b6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	b29b      	uxth	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d018      	beq.n	800169a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29b      	uxth	r3, r3
 8001692:	3b01      	subs	r3, #1
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d154      	bne.n	800174e <I2C_Slave_ISR_IT+0x20e>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <I2C_Slave_ISR_IT+0x224>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d050      	beq.n	800174e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 f8fe 	bl	80018b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80016b4:	e04b      	b.n	800174e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	001a      	movs	r2, r3
 80016bc:	2301      	movs	r3, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	d00c      	beq.n	80016dc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	001a      	movs	r2, r3
 80016c8:	2301      	movs	r3, #1
 80016ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016cc:	d006      	beq.n	80016dc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 f847 	bl	8001768 <I2C_ITAddrCplt>
 80016da:	e039      	b.n	8001750 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	001a      	movs	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	d033      	beq.n	8001750 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	001a      	movs	r2, r3
 80016ee:	2301      	movs	r3, #1
 80016f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016f2:	d02d      	beq.n	8001750 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d018      	beq.n	8001730 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	; 0x28
 800172e:	e00f      	b.n	8001750 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	045b      	lsls	r3, r3, #17
 8001736:	429a      	cmp	r2, r3
 8001738:	d002      	beq.n	8001740 <I2C_Slave_ISR_IT+0x200>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	0018      	movs	r0, r3
 8001744:	f000 f8b4 	bl	80018b0 <I2C_ITSlaveSeqCplt>
 8001748:	e002      	b.n	8001750 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	e000      	b.n	8001750 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800174e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b006      	add	sp, #24
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	ffff0000 	.word	0xffff0000

08001768 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2241      	movs	r2, #65	; 0x41
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	001a      	movs	r2, r3
 800177c:	2328      	movs	r3, #40	; 0x28
 800177e:	4013      	ands	r3, r2
 8001780:	2b28      	cmp	r3, #40	; 0x28
 8001782:	d000      	beq.n	8001786 <I2C_ITAddrCplt+0x1e>
 8001784:	e088      	b.n	8001898 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	b2da      	uxtb	r2, r3
 8001790:	250f      	movs	r5, #15
 8001792:	197b      	adds	r3, r7, r5
 8001794:	2101      	movs	r1, #1
 8001796:	400a      	ands	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	200c      	movs	r0, #12
 80017a6:	183b      	adds	r3, r7, r0
 80017a8:	21fe      	movs	r1, #254	; 0xfe
 80017aa:	400a      	ands	r2, r1
 80017ac:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	240a      	movs	r4, #10
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	0592      	lsls	r2, r2, #22
 80017bc:	0d92      	lsrs	r2, r2, #22
 80017be:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2308      	movs	r3, #8
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	21fe      	movs	r1, #254	; 0xfe
 80017ce:	400a      	ands	r2, r1
 80017d0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d148      	bne.n	800186c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80017da:	0021      	movs	r1, r4
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	09db      	lsrs	r3, r3, #7
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	4053      	eors	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	001a      	movs	r2, r3
 80017ee:	2306      	movs	r3, #6
 80017f0:	4013      	ands	r3, r2
 80017f2:	d120      	bne.n	8001836 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80017f4:	183b      	adds	r3, r7, r0
 80017f6:	187a      	adds	r2, r7, r1
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180a:	2b02      	cmp	r3, #2
 800180c:	d14c      	bne.n	80018a8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2208      	movs	r2, #8
 800181a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001824:	183b      	adds	r3, r7, r0
 8001826:	881a      	ldrh	r2, [r3, #0]
 8001828:	197b      	adds	r3, r7, r5
 800182a:	7819      	ldrb	r1, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff fe5e 	bl	80014f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001834:	e038      	b.n	80018a8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001836:	240c      	movs	r4, #12
 8001838:	193b      	adds	r3, r7, r4
 800183a:	2208      	movs	r2, #8
 800183c:	18ba      	adds	r2, r7, r2
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	021a      	lsls	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fb60 	bl	8001f10 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001858:	193b      	adds	r3, r7, r4
 800185a:	881a      	ldrh	r2, [r3, #0]
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	7819      	ldrb	r1, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fe43 	bl	80014f0 <HAL_I2C_AddrCallback>
}
 800186a:	e01d      	b.n	80018a8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	021a      	lsls	r2, r3, #8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f000 fb4b 	bl	8001f10 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001882:	230c      	movs	r3, #12
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff fe2d 	bl	80014f0 <HAL_I2C_AddrCallback>
}
 8001896:	e007      	b.n	80018a8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2208      	movs	r2, #8
 800189e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b004      	add	sp, #16
 80018ae:	bdb0      	pop	{r4, r5, r7, pc}

080018b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2242      	movs	r2, #66	; 0x42
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	0b9b      	lsrs	r3, r3, #14
 80018cc:	001a      	movs	r2, r3
 80018ce:	2301      	movs	r3, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	d008      	beq.n	80018e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <I2C_ITSlaveSeqCplt+0xc4>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e00d      	b.n	8001902 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	0bdb      	lsrs	r3, r3, #15
 80018ea:	001a      	movs	r2, r3
 80018ec:	2301      	movs	r3, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d007      	beq.n	8001902 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	491e      	ldr	r1, [pc, #120]	; (8001978 <I2C_ITSlaveSeqCplt+0xc8>)
 80018fe:	400a      	ands	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2241      	movs	r2, #65	; 0x41
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b29      	cmp	r3, #41	; 0x29
 800190c:	d114      	bne.n	8001938 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2241      	movs	r2, #65	; 0x41
 8001912:	2128      	movs	r1, #40	; 0x28
 8001914:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2221      	movs	r2, #33	; 0x21
 800191a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2101      	movs	r1, #1
 8001920:	0018      	movs	r0, r3
 8001922:	f000 faf5 	bl	8001f10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	2100      	movs	r1, #0
 800192c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fdcd 	bl	80014d0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001936:	e019      	b.n	800196c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2241      	movs	r2, #65	; 0x41
 800193c:	5c9b      	ldrb	r3, [r3, r2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b2a      	cmp	r3, #42	; 0x2a
 8001942:	d113      	bne.n	800196c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2241      	movs	r2, #65	; 0x41
 8001948:	2128      	movs	r1, #40	; 0x28
 800194a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2222      	movs	r2, #34	; 0x22
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2102      	movs	r1, #2
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fada 	bl	8001f10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff fdba 	bl	80014e0 <HAL_I2C_SlaveRxCpltCallback>
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}
 8001974:	ffffbfff 	.word	0xffffbfff
 8001978:	ffff7fff 	.word	0xffff7fff

0800197c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001992:	200f      	movs	r0, #15
 8001994:	183b      	adds	r3, r7, r0
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	2141      	movs	r1, #65	; 0x41
 800199a:	5c52      	ldrb	r2, [r2, r1]
 800199c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2220      	movs	r2, #32
 80019a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b21      	cmp	r3, #33	; 0x21
 80019ac:	d003      	beq.n	80019b6 <I2C_ITSlaveCplt+0x3a>
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b29      	cmp	r3, #41	; 0x29
 80019b4:	d109      	bne.n	80019ca <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80019b6:	4a7d      	ldr	r2, [pc, #500]	; (8001bac <I2C_ITSlaveCplt+0x230>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 faa7 	bl	8001f10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
 80019c8:	e011      	b.n	80019ee <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80019ca:	220f      	movs	r2, #15
 80019cc:	18bb      	adds	r3, r7, r2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b22      	cmp	r3, #34	; 0x22
 80019d2:	d003      	beq.n	80019dc <I2C_ITSlaveCplt+0x60>
 80019d4:	18bb      	adds	r3, r7, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b2a      	cmp	r3, #42	; 0x2a
 80019da:	d108      	bne.n	80019ee <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80019dc:	4a74      	ldr	r2, [pc, #464]	; (8001bb0 <I2C_ITSlaveCplt+0x234>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fa94 	bl	8001f10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2222      	movs	r2, #34	; 0x22
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0209      	lsls	r1, r1, #8
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	496a      	ldr	r1, [pc, #424]	; (8001bb4 <I2C_ITSlaveCplt+0x238>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fa3b 	bl	8001e8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	0b9b      	lsrs	r3, r3, #14
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d013      	beq.n	8001a4c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4962      	ldr	r1, [pc, #392]	; (8001bb8 <I2C_ITSlaveCplt+0x23c>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a4a:	e018      	b.n	8001a7e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	0bdb      	lsrs	r3, r3, #15
 8001a50:	001a      	movs	r2, r3
 8001a52:	2301      	movs	r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d012      	beq.n	8001a7e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4956      	ldr	r1, [pc, #344]	; (8001bbc <I2C_ITSlaveCplt+0x240>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	001a      	movs	r2, r3
 8001a84:	2301      	movs	r3, #1
 8001a86:	4013      	ands	r3, r2
 8001a88:	d020      	beq.n	8001acc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	4393      	bics	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00c      	beq.n	8001acc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	2204      	movs	r2, #4
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2242      	movs	r2, #66	; 0x42
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f8b9 	bl	8001c78 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2241      	movs	r2, #65	; 0x41
 8001b0a:	5c9b      	ldrb	r3, [r3, r2]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b28      	cmp	r3, #40	; 0x28
 8001b10:	d147      	bne.n	8001ba2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 f853 	bl	8001bc4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b1e:	e040      	b.n	8001ba2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	4a26      	ldr	r2, [pc, #152]	; (8001bc0 <I2C_ITSlaveCplt+0x244>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d016      	beq.n	8001b58 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff febf 	bl	80018b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <I2C_ITSlaveCplt+0x244>)
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2241      	movs	r2, #65	; 0x41
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff fcdd 	bl	8001510 <HAL_I2C_ListenCpltCallback>
}
 8001b56:	e024      	b.n	8001ba2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2241      	movs	r2, #65	; 0x41
 8001b5c:	5c9b      	ldrb	r3, [r3, r2]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b22      	cmp	r3, #34	; 0x22
 8001b62:	d10f      	bne.n	8001b84 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2241      	movs	r2, #65	; 0x41
 8001b68:	2120      	movs	r1, #32
 8001b6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff fcaf 	bl	80014e0 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b82:	e00e      	b.n	8001ba2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2241      	movs	r2, #65	; 0x41
 8001b88:	2120      	movs	r1, #32
 8001b8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2240      	movs	r2, #64	; 0x40
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fc97 	bl	80014d0 <HAL_I2C_SlaveTxCpltCallback>
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b006      	add	sp, #24
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	00008001 	.word	0x00008001
 8001bb0:	00008002 	.word	0x00008002
 8001bb4:	fe00e800 	.word	0xfe00e800
 8001bb8:	ffffbfff 	.word	0xffffbfff
 8001bbc:	ffff7fff 	.word	0xffff7fff
 8001bc0:	ffff0000 	.word	0xffff0000

08001bc4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <I2C_ITListenCplt+0xac>)
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2241      	movs	r2, #65	; 0x41
 8001bde:	2120      	movs	r1, #32
 8001be0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2242      	movs	r2, #66	; 0x42
 8001be6:	2100      	movs	r1, #0
 8001be8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d012      	beq.n	8001c42 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c42:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <I2C_ITListenCplt+0xb0>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f961 	bl	8001f10 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2210      	movs	r2, #16
 8001c54:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fc55 	bl	8001510 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	ffff0000 	.word	0xffff0000
 8001c74:	00008003 	.word	0x00008003

08001c78 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c82:	200f      	movs	r0, #15
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	2141      	movs	r1, #65	; 0x41
 8001c8a:	5c52      	ldrb	r2, [r2, r1]
 8001c8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2242      	movs	r2, #66	; 0x42
 8001c92:	2100      	movs	r1, #0
 8001c94:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a62      	ldr	r2, [pc, #392]	; (8001e24 <I2C_ITError+0x1ac>)
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b28      	cmp	r3, #40	; 0x28
 8001cb4:	d007      	beq.n	8001cc6 <I2C_ITError+0x4e>
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b29      	cmp	r3, #41	; 0x29
 8001cbc:	d003      	beq.n	8001cc6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001cbe:	183b      	adds	r3, r7, r0
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc4:	d10c      	bne.n	8001ce0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2103      	movs	r1, #3
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 f920 	bl	8001f10 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	2128      	movs	r1, #40	; 0x28
 8001cd6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a53      	ldr	r2, [pc, #332]	; (8001e28 <I2C_ITError+0x1b0>)
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cde:	e012      	b.n	8001d06 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <I2C_ITError+0x1b4>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0011      	movs	r1, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f912 	bl	8001f10 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2241      	movs	r2, #65	; 0x41
 8001cf0:	5c9b      	ldrb	r3, [r3, r2]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b60      	cmp	r3, #96	; 0x60
 8001cf6:	d003      	beq.n	8001d00 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2241      	movs	r2, #65	; 0x41
 8001cfc:	2120      	movs	r1, #32
 8001cfe:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d03b      	beq.n	8001d8c <I2C_ITError+0x114>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b11      	cmp	r3, #17
 8001d18:	d002      	beq.n	8001d20 <I2C_ITError+0xa8>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b21      	cmp	r3, #33	; 0x21
 8001d1e:	d135      	bne.n	8001d8c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	01db      	lsls	r3, r3, #7
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	01db      	lsls	r3, r3, #7
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	493c      	ldr	r1, [pc, #240]	; (8001e30 <I2C_ITError+0x1b8>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff f902 	bl	8000f52 <HAL_DMA_GetState>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d016      	beq.n	8001d82 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	4a36      	ldr	r2, [pc, #216]	; (8001e34 <I2C_ITError+0x1bc>)
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff f8ab 	bl	8000ec4 <HAL_DMA_Abort_IT>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d051      	beq.n	8001e16 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d80:	e049      	b.n	8001e16 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 f859 	bl	8001e3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d8a:	e044      	b.n	8001e16 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d03b      	beq.n	8001e0c <I2C_ITError+0x194>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d002      	beq.n	8001da0 <I2C_ITError+0x128>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b22      	cmp	r3, #34	; 0x22
 8001d9e:	d135      	bne.n	8001e0c <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	401a      	ands	r2, r3
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	491e      	ldr	r1, [pc, #120]	; (8001e38 <I2C_ITError+0x1c0>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff f8c2 	bl	8000f52 <HAL_DMA_GetState>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d016      	beq.n	8001e02 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <I2C_ITError+0x1bc>)
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	2100      	movs	r1, #0
 8001de2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff f86b 	bl	8000ec4 <HAL_DMA_Abort_IT>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d013      	beq.n	8001e1a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001e00:	e00b      	b.n	8001e1a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 f819 	bl	8001e3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001e0a:	e006      	b.n	8001e1a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 f814 	bl	8001e3c <I2C_TreatErrorCallback>
  }
}
 8001e14:	e002      	b.n	8001e1c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	e000      	b.n	8001e1c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001e1a:	46c0      	nop			; (mov r8, r8)
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	ffff0000 	.word	0xffff0000
 8001e28:	08001541 	.word	0x08001541
 8001e2c:	00008003 	.word	0x00008003
 8001e30:	ffffbfff 	.word	0xffffbfff
 8001e34:	08001ed3 	.word	0x08001ed3
 8001e38:	ffff7fff 	.word	0xffff7fff

08001e3c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2241      	movs	r2, #65	; 0x41
 8001e48:	5c9b      	ldrb	r3, [r3, r2]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b60      	cmp	r3, #96	; 0x60
 8001e4e:	d10f      	bne.n	8001e70 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2241      	movs	r2, #65	; 0x41
 8001e54:	2120      	movs	r1, #32
 8001e56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff fb61 	bl	8001530 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e6e:	e00a      	b.n	8001e86 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fb4d 	bl	8001520 <HAL_I2C_ErrorCallback>
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d103      	bne.n	8001eac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d007      	beq.n	8001eca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	619a      	str	r2, [r3, #24]
  }
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	2200      	movs	r2, #0
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	2200      	movs	r2, #0
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff ff9a 	bl	8001e3c <I2C_TreatErrorCallback>
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	000a      	movs	r2, r1
 8001f1a:	1cbb      	adds	r3, r7, #2
 8001f1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f22:	1cbb      	adds	r3, r7, #2
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d010      	beq.n	8001f4e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2242      	movs	r2, #66	; 0x42
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2241      	movs	r2, #65	; 0x41
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2328      	movs	r3, #40	; 0x28
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b28      	cmp	r3, #40	; 0x28
 8001f44:	d003      	beq.n	8001f4e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	22b0      	movs	r2, #176	; 0xb0
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f4e:	1cbb      	adds	r3, r7, #2
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d010      	beq.n	8001f7a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2244      	movs	r2, #68	; 0x44
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2241      	movs	r2, #65	; 0x41
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2328      	movs	r3, #40	; 0x28
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b28      	cmp	r3, #40	; 0x28
 8001f70:	d003      	beq.n	8001f7a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22b0      	movs	r2, #176	; 0xb0
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f7a:	1cbb      	adds	r3, r7, #2
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	5e9b      	ldrsh	r3, [r3, r2]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da03      	bge.n	8001f8c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	22b8      	movs	r2, #184	; 0xb8
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d103      	bne.n	8001f9c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2290      	movs	r2, #144	; 0x90
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001f9c:	1cbb      	adds	r3, r7, #2
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d103      	bne.n	8001fac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001fac:	1cbb      	adds	r3, r7, #2
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d103      	bne.n	8001fbc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43d9      	mvns	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2241      	movs	r2, #65	; 0x41
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d138      	bne.n	8002060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	5c9b      	ldrb	r3, [r3, r2]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e032      	b.n	8002062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2241      	movs	r2, #65	; 0x41
 8002008:	2124      	movs	r1, #36	; 0x24
 800200a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	438a      	bics	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4911      	ldr	r1, [pc, #68]	; (800206c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002028:	400a      	ands	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2241      	movs	r2, #65	; 0x41
 8002050:	2120      	movs	r1, #32
 8002052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	ffffefff 	.word	0xffffefff

08002070 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2241      	movs	r2, #65	; 0x41
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b20      	cmp	r3, #32
 8002084:	d139      	bne.n	80020fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2240      	movs	r2, #64	; 0x40
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002090:	2302      	movs	r3, #2
 8002092:	e033      	b.n	80020fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2241      	movs	r2, #65	; 0x41
 80020a0:	2124      	movs	r1, #36	; 0x24
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	438a      	bics	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2241      	movs	r2, #65	; 0x41
 80020ea:	2120      	movs	r1, #32
 80020ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2240      	movs	r2, #64	; 0x40
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
  }
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}
 8002104:	fffff0ff 	.word	0xfffff0ff

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	f000 fb6c 	bl	80027f4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211c:	4bc8      	ldr	r3, [pc, #800]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	220c      	movs	r2, #12
 8002122:	4013      	ands	r3, r2
 8002124:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002126:	4bc6      	ldr	r3, [pc, #792]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	025b      	lsls	r3, r3, #9
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <HAL_RCC_OscConfig+0x36>
 800213c:	e07d      	b.n	800223a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d007      	beq.n	8002154 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d112      	bne.n	8002170 <HAL_RCC_OscConfig+0x68>
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	429a      	cmp	r2, r3
 8002152:	d10d      	bne.n	8002170 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	4bba      	ldr	r3, [pc, #744]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	4013      	ands	r3, r2
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x5a>
 8002160:	e06a      	b.n	8002238 <HAL_RCC_OscConfig+0x130>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d166      	bne.n	8002238 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	f000 fb42 	bl	80027f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	025b      	lsls	r3, r3, #9
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x84>
 800217c:	4bb0      	ldr	r3, [pc, #704]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4baf      	ldr	r3, [pc, #700]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	0249      	lsls	r1, r1, #9
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e027      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	23a0      	movs	r3, #160	; 0xa0
 8002192:	02db      	lsls	r3, r3, #11
 8002194:	429a      	cmp	r2, r3
 8002196:	d10e      	bne.n	80021b6 <HAL_RCC_OscConfig+0xae>
 8002198:	4ba9      	ldr	r3, [pc, #676]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4ba8      	ldr	r3, [pc, #672]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	02c9      	lsls	r1, r1, #11
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	4ba6      	ldr	r3, [pc, #664]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4ba5      	ldr	r3, [pc, #660]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0249      	lsls	r1, r1, #9
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e012      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021b6:	4ba2      	ldr	r3, [pc, #648]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4ba1      	ldr	r3, [pc, #644]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021bc:	49a1      	ldr	r1, [pc, #644]	; (8002444 <HAL_RCC_OscConfig+0x33c>)
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	4b9f      	ldr	r3, [pc, #636]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	025b      	lsls	r3, r3, #9
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4b9b      	ldr	r3, [pc, #620]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b9a      	ldr	r3, [pc, #616]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80021d6:	499c      	ldr	r1, [pc, #624]	; (8002448 <HAL_RCC_OscConfig+0x340>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d014      	beq.n	800220e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fd62 	bl	8000cac <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ee:	f7fe fd5d 	bl	8000cac <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e2f9      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002200:	4b8f      	ldr	r3, [pc, #572]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	4013      	ands	r3, r2
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0xe6>
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe fd4d 	bl	8000cac <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe fd48 	bl	8000cac <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2e4      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	029b      	lsls	r3, r3, #10
 8002232:	4013      	ands	r3, r2
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x110>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0x13e>
 8002244:	e099      	b.n	800237a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2220      	movs	r2, #32
 8002250:	4013      	ands	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002254:	4b7a      	ldr	r3, [pc, #488]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800225a:	2120      	movs	r1, #32
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	2220      	movs	r2, #32
 8002264:	4393      	bics	r3, r2
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d13e      	bne.n	80022f2 <HAL_RCC_OscConfig+0x1ea>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d13b      	bne.n	80022f2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800227a:	4b71      	ldr	r3, [pc, #452]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	4013      	ands	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_RCC_OscConfig+0x186>
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e2b2      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x344>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	021a      	lsls	r2, r3, #8
 800229e:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2209      	movs	r2, #9
 80022aa:	4393      	bics	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b6:	f000 fbeb 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 80022ba:	0001      	movs	r1, r0
 80022bc:	4b60      	ldr	r3, [pc, #384]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	220f      	movs	r2, #15
 80022c4:	4013      	ands	r3, r2
 80022c6:	4a62      	ldr	r2, [pc, #392]	; (8002450 <HAL_RCC_OscConfig+0x348>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	000a      	movs	r2, r1
 80022cc:	40da      	lsrs	r2, r3
 80022ce:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_RCC_OscConfig+0x34c>)
 80022d0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80022d2:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_OscConfig+0x350>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2513      	movs	r5, #19
 80022d8:	197c      	adds	r4, r7, r5
 80022da:	0018      	movs	r0, r3
 80022dc:	f7fe fca0 	bl	8000c20 <HAL_InitTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80022e4:	197b      	adds	r3, r7, r5
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d046      	beq.n	800237a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80022ec:	197b      	adds	r3, r7, r5
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	e280      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d027      	beq.n	8002348 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022f8:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2209      	movs	r2, #9
 80022fe:	4393      	bics	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	4b4f      	ldr	r3, [pc, #316]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe fccf 	bl	8000cac <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002314:	f7fe fcca 	bl	8000cac <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e266      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a45      	ldr	r2, [pc, #276]	; (800244c <HAL_RCC_OscConfig+0x344>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	021a      	lsls	r2, r3, #8
 8002340:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	e018      	b.n	800237a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002348:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fcaa 	bl	8000cac <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fca5 	bl	8000cac <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e241      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2204      	movs	r2, #4
 8002376:	4013      	ands	r3, r2
 8002378:	d1f1      	bne.n	800235e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2210      	movs	r2, #16
 8002380:	4013      	ands	r3, r2
 8002382:	d100      	bne.n	8002386 <HAL_RCC_OscConfig+0x27e>
 8002384:	e0a1      	b.n	80024ca <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d140      	bne.n	800240e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_OscConfig+0x29c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e227      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a2c      	ldr	r2, [pc, #176]	; (800245c <HAL_RCC_OscConfig+0x354>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	0a19      	lsrs	r1, r3, #8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	061a      	lsls	r2, r3, #24
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	0b5b      	lsrs	r3, r3, #13
 80023d2:	3301      	adds	r3, #1
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	0212      	lsls	r2, r2, #8
 80023d8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	210f      	movs	r1, #15
 80023e2:	400b      	ands	r3, r1
 80023e4:	491a      	ldr	r1, [pc, #104]	; (8002450 <HAL_RCC_OscConfig+0x348>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCC_OscConfig+0x34c>)
 80023ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_OscConfig+0x350>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2513      	movs	r5, #19
 80023f4:	197c      	adds	r4, r7, r5
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7fe fc12 	bl	8000c20 <HAL_InitTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002400:	197b      	adds	r3, r7, r5
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d060      	beq.n	80024ca <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002408:	197b      	adds	r3, r7, r5
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	e1f2      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03f      	beq.n	8002496 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	0049      	lsls	r1, r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fc42 	bl	8000cac <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800242e:	f7fe fc3d 	bl	8000cac <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d911      	bls.n	8002460 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1d9      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
 8002440:	40021000 	.word	0x40021000
 8002444:	fffeffff 	.word	0xfffeffff
 8002448:	fffbffff 	.word	0xfffbffff
 800244c:	ffffe0ff 	.word	0xffffe0ff
 8002450:	08003aac 	.word	0x08003aac
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004
 800245c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002460:	4bc9      	ldr	r3, [pc, #804]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d0e0      	beq.n	800242e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246c:	4bc6      	ldr	r3, [pc, #792]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4ac6      	ldr	r2, [pc, #792]	; (800278c <HAL_RCC_OscConfig+0x684>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	4bc3      	ldr	r3, [pc, #780]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002480:	4bc1      	ldr	r3, [pc, #772]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	0a19      	lsrs	r1, r3, #8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	061a      	lsls	r2, r3, #24
 800248e:	4bbe      	ldr	r3, [pc, #760]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	e019      	b.n	80024ca <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002496:	4bbc      	ldr	r3, [pc, #752]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4bbb      	ldr	r3, [pc, #748]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800249c:	49bc      	ldr	r1, [pc, #752]	; (8002790 <HAL_RCC_OscConfig+0x688>)
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fc03 	bl	8000cac <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ac:	f7fe fbfe 	bl	8000cac <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e19a      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024be:	4bb2      	ldr	r3, [pc, #712]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	4013      	ands	r3, r2
 80024d2:	d036      	beq.n	8002542 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d019      	beq.n	8002510 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024dc:	4baa      	ldr	r3, [pc, #680]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80024de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e0:	4ba9      	ldr	r3, [pc, #676]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fbe0 	bl	8000cac <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fbdb 	bl	8000cac <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e177      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002504:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d0f1      	beq.n	80024f2 <HAL_RCC_OscConfig+0x3ea>
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4b9d      	ldr	r3, [pc, #628]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002514:	4b9c      	ldr	r3, [pc, #624]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fbc6 	bl	8000cac <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fbc1 	bl	8000cac <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e15d      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d1f1      	bne.n	8002526 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2204      	movs	r2, #4
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x446>
 800254c:	e0ae      	b.n	80026ac <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2023      	movs	r0, #35	; 0x23
 8002550:	183b      	adds	r3, r7, r0
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	4013      	ands	r3, r2
 8002560:	d109      	bne.n	8002576 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002566:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0549      	lsls	r1, r1, #21
 800256c:	430a      	orrs	r2, r1
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002570:	183b      	adds	r3, r7, r0
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b87      	ldr	r3, [pc, #540]	; (8002794 <HAL_RCC_OscConfig+0x68c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4013      	ands	r3, r2
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b84      	ldr	r3, [pc, #528]	; (8002794 <HAL_RCC_OscConfig+0x68c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b83      	ldr	r3, [pc, #524]	; (8002794 <HAL_RCC_OscConfig+0x68c>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0049      	lsls	r1, r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002590:	f7fe fb8c 	bl	8000cac <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fb87 	bl	8000cac <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e123      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b79      	ldr	r3, [pc, #484]	; (8002794 <HAL_RCC_OscConfig+0x68c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4cc>
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80025c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c8:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	0049      	lsls	r1, r1, #1
 80025ce:	430a      	orrs	r2, r1
 80025d0:	651a      	str	r2, [r3, #80]	; 0x50
 80025d2:	e031      	b.n	8002638 <HAL_RCC_OscConfig+0x530>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4ee>
 80025dc:	4b6a      	ldr	r3, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80025de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025e0:	4b69      	ldr	r3, [pc, #420]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80025e2:	496b      	ldr	r1, [pc, #428]	; (8002790 <HAL_RCC_OscConfig+0x688>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	651a      	str	r2, [r3, #80]	; 0x50
 80025e8:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80025ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80025ee:	496a      	ldr	r1, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x690>)
 80025f0:	400a      	ands	r2, r1
 80025f2:	651a      	str	r2, [r3, #80]	; 0x50
 80025f4:	e020      	b.n	8002638 <HAL_RCC_OscConfig+0x530>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	23a0      	movs	r3, #160	; 0xa0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10e      	bne.n	8002620 <HAL_RCC_OscConfig+0x518>
 8002602:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	00c9      	lsls	r1, r1, #3
 800260c:	430a      	orrs	r2, r1
 800260e:	651a      	str	r2, [r3, #80]	; 0x50
 8002610:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002614:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	0049      	lsls	r1, r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	651a      	str	r2, [r3, #80]	; 0x50
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x530>
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002624:	4b58      	ldr	r3, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002626:	495a      	ldr	r1, [pc, #360]	; (8002790 <HAL_RCC_OscConfig+0x688>)
 8002628:	400a      	ands	r2, r1
 800262a:	651a      	str	r2, [r3, #80]	; 0x50
 800262c:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800262e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002630:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002632:	4959      	ldr	r1, [pc, #356]	; (8002798 <HAL_RCC_OscConfig+0x690>)
 8002634:	400a      	ands	r2, r1
 8002636:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d015      	beq.n	800266c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe fb34 	bl	8000cac <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002648:	e009      	b.n	800265e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fb2f 	bl	8000cac <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_RCC_OscConfig+0x694>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0ca      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800265e:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d0ef      	beq.n	800264a <HAL_RCC_OscConfig+0x542>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7fe fb1e 	bl	8000cac <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002674:	e009      	b.n	800268a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe fb19 	bl	8000cac <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	4a46      	ldr	r2, [pc, #280]	; (800279c <HAL_RCC_OscConfig+0x694>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0b4      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800268c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4013      	ands	r3, r2
 8002694:	d1ef      	bne.n	8002676 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002696:	2323      	movs	r3, #35	; 0x23
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80026a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80026a6:	493e      	ldr	r1, [pc, #248]	; (80027a0 <HAL_RCC_OscConfig+0x698>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d100      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5ae>
 80026b4:	e09d      	b.n	80027f2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d100      	bne.n	80026be <HAL_RCC_OscConfig+0x5b6>
 80026bc:	e076      	b.n	80027ac <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d145      	bne.n	8002752 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_RCC_OscConfig+0x69c>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe faeb 	bl	8000cac <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fae6 	bl	8000cac <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e082      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	049b      	lsls	r3, r3, #18
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <HAL_RCC_OscConfig+0x6a0>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	431a      	orrs	r2, r3
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002716:	430a      	orrs	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0449      	lsls	r1, r1, #17
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fac0 	bl	8000cac <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fabb 	bl	8000cac <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e057      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	049b      	lsls	r3, r3, #18
 800274c:	4013      	ands	r3, r2
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x62a>
 8002750:	e04f      	b.n	80027f2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 8002758:	4912      	ldr	r1, [pc, #72]	; (80027a4 <HAL_RCC_OscConfig+0x69c>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe faa5 	bl	8000cac <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe faa0 	bl	8000cac <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e03c      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800277a:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_OscConfig+0x680>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	049b      	lsls	r3, r3, #18
 8002782:	4013      	ands	r3, r2
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x660>
 8002786:	e034      	b.n	80027f2 <HAL_RCC_OscConfig+0x6ea>
 8002788:	40021000 	.word	0x40021000
 800278c:	ffff1fff 	.word	0xffff1fff
 8002790:	fffffeff 	.word	0xfffffeff
 8002794:	40007000 	.word	0x40007000
 8002798:	fffffbff 	.word	0xfffffbff
 800279c:	00001388 	.word	0x00001388
 80027a0:	efffffff 	.word	0xefffffff
 80027a4:	feffffff 	.word	0xfeffffff
 80027a8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_RCC_OscConfig+0x6f4>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	025b      	lsls	r3, r3, #9
 80027c4:	401a      	ands	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	23f0      	movs	r3, #240	; 0xf0
 80027d2:	039b      	lsls	r3, r3, #14
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	23c0      	movs	r3, #192	; 0xc0
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	401a      	ands	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b00a      	add	sp, #40	; 0x28
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e128      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b96      	ldr	r3, [pc, #600]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d91e      	bls.n	8002860 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b93      	ldr	r3, [pc, #588]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	4393      	bics	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002834:	f7fe fa3a 	bl	8000cac <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	e009      	b.n	8002852 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283e:	f7fe fa35 	bl	8000cac <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	4a8a      	ldr	r2, [pc, #552]	; (8002a74 <HAL_RCC_ClockConfig+0x274>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e109      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b87      	ldr	r3, [pc, #540]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d1ee      	bne.n	800283e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286a:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	22f0      	movs	r2, #240	; 0xf0
 8002870:	4393      	bics	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b7f      	ldr	r3, [pc, #508]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	4013      	ands	r3, r2
 8002886:	d100      	bne.n	800288a <HAL_RCC_ClockConfig+0x8a>
 8002888:	e089      	b.n	800299e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002892:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	029b      	lsls	r3, r3, #10
 800289a:	4013      	ands	r3, r2
 800289c:	d120      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0e1      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	049b      	lsls	r3, r3, #18
 80028b2:	4013      	ands	r3, r2
 80028b4:	d114      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0d5      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2204      	movs	r2, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	d109      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0ca      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028d0:	4b69      	ldr	r3, [pc, #420]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0c2      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e0:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2203      	movs	r2, #3
 80028e6:	4393      	bics	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f4:	f7fe f9da 	bl	8000cac <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d111      	bne.n	8002928 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002904:	e009      	b.n	800291a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002906:	f7fe f9d1 	bl	8000cac <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_ClockConfig+0x274>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0a5      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	220c      	movs	r2, #12
 8002920:	4013      	ands	r3, r2
 8002922:	2b08      	cmp	r3, #8
 8002924:	d1ef      	bne.n	8002906 <HAL_RCC_ClockConfig+0x106>
 8002926:	e03a      	b.n	800299e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d111      	bne.n	8002954 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	e009      	b.n	8002946 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7fe f9bb 	bl	8000cac <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x274>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e08f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002946:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	220c      	movs	r2, #12
 800294c:	4013      	ands	r3, r2
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_ClockConfig+0x132>
 8002952:	e024      	b.n	800299e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d11b      	bne.n	8002994 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800295c:	e009      	b.n	8002972 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295e:	f7fe f9a5 	bl	8000cac <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <HAL_RCC_ClockConfig+0x274>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e079      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	220c      	movs	r2, #12
 8002978:	4013      	ands	r3, r2
 800297a:	2b04      	cmp	r3, #4
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_ClockConfig+0x15e>
 800297e:	e00e      	b.n	800299e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7fe f994 	bl	8000cac <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_RCC_ClockConfig+0x274>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e068      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	220c      	movs	r2, #12
 800299a:	4013      	ands	r3, r2
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d21e      	bcs.n	80029ea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ac:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4393      	bics	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029be:	f7fe f975 	bl	8000cac <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	e009      	b.n	80029dc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe f970 	bl	8000cac <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <HAL_RCC_ClockConfig+0x274>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e044      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_ClockConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d1ee      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x27c>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_RCC_ClockConfig+0x280>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00da      	lsls	r2, r3, #3
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a28:	f000 f832 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a2c:	0001      	movs	r1, r0
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCC_ClockConfig+0x278>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	220f      	movs	r2, #15
 8002a36:	4013      	ands	r3, r2
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x284>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	40da      	lsrs	r2, r3
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_ClockConfig+0x288>)
 8002a42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_ClockConfig+0x28c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	250b      	movs	r5, #11
 8002a4a:	197c      	adds	r4, r7, r5
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fe f8e7 	bl	8000c20 <HAL_InitTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a56:	197b      	adds	r3, r7, r5
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002a5e:	197b      	adds	r3, r7, r5
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40022000 	.word	0x40022000
 8002a74:	00001388 	.word	0x00001388
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	fffff8ff 	.word	0xfffff8ff
 8002a80:	ffffc7ff 	.word	0xffffc7ff
 8002a84:	08003aac 	.word	0x08003aac
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a96:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d014      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aa6:	d900      	bls.n	8002aaa <HAL_RCC_GetSysClockFreq+0x1a>
 8002aa8:	e07b      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x112>
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x24>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ab2:	e076      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ab4:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002abe:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ac2:	e07c      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ac4:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ac8:	e079      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ace:	e076      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	0c9a      	lsrs	r2, r3, #18
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	0d9a      	lsrs	r2, r3, #22
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	025b      	lsls	r3, r3, #9
 8002af2:	4013      	ands	r3, r2
 8002af4:	d01a      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b00:	2300      	movs	r3, #0
 8002b02:	69b8      	ldr	r0, [r7, #24]
 8002b04:	69f9      	ldr	r1, [r7, #28]
 8002b06:	f7fd fbab 	bl	8000260 <__aeabi_lmul>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	000b      	movs	r3, r1
 8002b0e:	0010      	movs	r0, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f7fd fb7f 	bl	8000220 <__aeabi_uldivmod>
 8002b22:	0002      	movs	r2, r0
 8002b24:	000b      	movs	r3, r1
 8002b26:	0013      	movs	r3, r2
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2a:	e037      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b2c:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	4013      	ands	r3, r2
 8002b34:	d01a      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4a23      	ldr	r2, [pc, #140]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b40:	2300      	movs	r3, #0
 8002b42:	68b8      	ldr	r0, [r7, #8]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	f7fd fb8b 	bl	8000260 <__aeabi_lmul>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	000b      	movs	r3, r1
 8002b4e:	0010      	movs	r0, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f7fd fb5f 	bl	8000220 <__aeabi_uldivmod>
 8002b62:	0002      	movs	r2, r0
 8002b64:	000b      	movs	r3, r1
 8002b66:	0013      	movs	r3, r2
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	e017      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	0018      	movs	r0, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	0019      	movs	r1, r3
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b76:	2300      	movs	r3, #0
 8002b78:	f7fd fb72 	bl	8000260 <__aeabi_lmul>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	000b      	movs	r3, r1
 8002b80:	0010      	movs	r0, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	001c      	movs	r4, r3
 8002b88:	2300      	movs	r3, #0
 8002b8a:	001d      	movs	r5, r3
 8002b8c:	0022      	movs	r2, r4
 8002b8e:	002b      	movs	r3, r5
 8002b90:	f7fd fb46 	bl	8000220 <__aeabi_uldivmod>
 8002b94:	0002      	movs	r2, r0
 8002b96:	000b      	movs	r3, r1
 8002b98:	0013      	movs	r3, r2
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ba0:	e00d      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0b5b      	lsrs	r3, r3, #13
 8002ba8:	2207      	movs	r2, #7
 8002baa:	4013      	ands	r3, r2
 8002bac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bbc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b00e      	add	sp, #56	; 0x38
 8002bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	003d0900 	.word	0x003d0900
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200
 8002bd8:	08003abc 	.word	0x08003abc

08002bdc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002be4:	2017      	movs	r0, #23
 8002be6:	183b      	adds	r3, r7, r0
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002bf6:	e0c2      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf8:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	055b      	lsls	r3, r3, #21
 8002c00:	4013      	ands	r3, r2
 8002c02:	d109      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b7e      	ldr	r3, [pc, #504]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c08:	4b7d      	ldr	r3, [pc, #500]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	0549      	lsls	r1, r1, #21
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d11a      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c24:	4b77      	ldr	r3, [pc, #476]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	0049      	lsls	r1, r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe f83b 	bl	8000cac <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fe f836 	bl	8000cac <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0d4      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c5a:	4b69      	ldr	r3, [pc, #420]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	23c0      	movs	r3, #192	; 0xc0
 8002c60:	039b      	lsls	r3, r3, #14
 8002c62:	4013      	ands	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	039b      	lsls	r3, r3, #14
 8002c6e:	4013      	ands	r3, r2
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d013      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	23c0      	movs	r3, #192	; 0xc0
 8002c7c:	029b      	lsls	r3, r3, #10
 8002c7e:	401a      	ands	r2, r3
 8002c80:	23c0      	movs	r3, #192	; 0xc0
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d10a      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c88:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	401a      	ands	r2, r3
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0ac      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d03b      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	23c0      	movs	r3, #192	; 0xc0
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d033      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d02e      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002cca:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	0309      	lsls	r1, r1, #12
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ce6:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ce8:	4948      	ldr	r1, [pc, #288]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002cee:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d014      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fd ffd5 	bl	8000cac <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d06:	e009      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fd ffd0 	bl	8000cac <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	4a3f      	ldr	r2, [pc, #252]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e06d      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4013      	ands	r3, r2
 8002d26:	d0ef      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	401a      	ands	r2, r3
 8002d32:	23c0      	movs	r3, #192	; 0xc0
 8002d34:	029b      	lsls	r3, r3, #10
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a35      	ldr	r2, [pc, #212]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	23c0      	movs	r3, #192	; 0xc0
 8002d4a:	039b      	lsls	r3, r3, #14
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d56:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	23c0      	movs	r3, #192	; 0xc0
 8002d5e:	029b      	lsls	r3, r3, #10
 8002d60:	401a      	ands	r2, r3
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d68:	2317      	movs	r3, #23
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d78:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2202      	movs	r2, #2
 8002d84:	4013      	ands	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	220c      	movs	r2, #12
 8002d8e:	4393      	bics	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2204      	movs	r2, #4
 8002da2:	4013      	ands	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002db6:	430a      	orrs	r2, r1
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b006      	add	sp, #24
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40007000 	.word	0x40007000
 8002e08:	fffcffff 	.word	0xfffcffff
 8002e0c:	fff7ffff 	.word	0xfff7ffff
 8002e10:	00001388 	.word	0x00001388
 8002e14:	ffcfffff 	.word	0xffcfffff
 8002e18:	efffffff 	.word	0xefffffff
 8002e1c:	fffff3ff 	.word	0xfffff3ff
 8002e20:	ffffcfff 	.word	0xffffcfff
 8002e24:	fff3ffff 	.word	0xfff3ffff

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e032      	b.n	8002ea0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2239      	movs	r2, #57	; 0x39
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2238      	movs	r2, #56	; 0x38
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fd fdc3 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2239      	movs	r2, #57	; 0x39
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	0019      	movs	r1, r3
 8002e68:	0010      	movs	r0, r2
 8002e6a:	f000 fb8b 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223e      	movs	r2, #62	; 0x3e
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223a      	movs	r2, #58	; 0x3a
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223b      	movs	r2, #59	; 0x3b
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223c      	movs	r2, #60	; 0x3c
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	223d      	movs	r2, #61	; 0x3d
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2239      	movs	r2, #57	; 0x39
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e032      	b.n	8002f20 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2239      	movs	r2, #57	; 0x39
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2238      	movs	r2, #56	; 0x38
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd fd65 	bl	80009a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2239      	movs	r2, #57	; 0x39
 8002eda:	2102      	movs	r1, #2
 8002edc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	0010      	movs	r0, r2
 8002eea:	f000 fb4b 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	223e      	movs	r2, #62	; 0x3e
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	223a      	movs	r2, #58	; 0x3a
 8002efa:	2101      	movs	r1, #1
 8002efc:	5499      	strb	r1, [r3, r2]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	223b      	movs	r2, #59	; 0x3b
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223c      	movs	r2, #60	; 0x3c
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223d      	movs	r2, #61	; 0x3d
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2239      	movs	r2, #57	; 0x39
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d108      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x22>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	223a      	movs	r2, #58	; 0x3a
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	1e5a      	subs	r2, r3, #1
 8002f44:	4193      	sbcs	r3, r2
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	e01f      	b.n	8002f8a <HAL_TIM_PWM_Start+0x62>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d108      	bne.n	8002f62 <HAL_TIM_PWM_Start+0x3a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223b      	movs	r2, #59	; 0x3b
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	4193      	sbcs	r3, r2
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	e013      	b.n	8002f8a <HAL_TIM_PWM_Start+0x62>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d108      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x52>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	223c      	movs	r2, #60	; 0x3c
 8002f6c:	5c9b      	ldrb	r3, [r3, r2]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	1e5a      	subs	r2, r3, #1
 8002f74:	4193      	sbcs	r3, r2
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e007      	b.n	8002f8a <HAL_TIM_PWM_Start+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223d      	movs	r2, #61	; 0x3d
 8002f7e:	5c9b      	ldrb	r3, [r3, r2]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	4193      	sbcs	r3, r2
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e048      	b.n	8003024 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0x7a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	223a      	movs	r2, #58	; 0x3a
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	5499      	strb	r1, [r3, r2]
 8002fa0:	e013      	b.n	8002fca <HAL_TIM_PWM_Start+0xa2>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x8a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	223b      	movs	r2, #59	; 0x3b
 8002fac:	2102      	movs	r1, #2
 8002fae:	5499      	strb	r1, [r3, r2]
 8002fb0:	e00b      	b.n	8002fca <HAL_TIM_PWM_Start+0xa2>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d104      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x9a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223c      	movs	r2, #60	; 0x3c
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	5499      	strb	r1, [r3, r2]
 8002fc0:	e003      	b.n	8002fca <HAL_TIM_PWM_Start+0xa2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	223d      	movs	r2, #61	; 0x3d
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 fcbe 	bl	8003954 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d004      	beq.n	8002fee <HAL_TIM_PWM_Start+0xc6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_TIM_PWM_Start+0x104>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d111      	bne.n	8003012 <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d010      	beq.n	8003022 <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2101      	movs	r1, #1
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003010:	e007      	b.n	8003022 <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40010800 	.word	0x40010800

08003030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2202      	movs	r2, #2
 8003040:	4013      	ands	r3, r2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d124      	bne.n	8003090 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2202      	movs	r2, #2
 800304e:	4013      	ands	r3, r2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d11d      	bne.n	8003090 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2203      	movs	r2, #3
 800305a:	4252      	negs	r2, r2
 800305c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2203      	movs	r2, #3
 800306c:	4013      	ands	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 fa6e 	bl	8003554 <HAL_TIM_IC_CaptureCallback>
 8003078:	e007      	b.n	800308a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 fa61 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fa6d 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2204      	movs	r2, #4
 8003098:	4013      	ands	r3, r2
 800309a:	2b04      	cmp	r3, #4
 800309c:	d125      	bne.n	80030ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2204      	movs	r2, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d11e      	bne.n	80030ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2205      	movs	r2, #5
 80030b2:	4252      	negs	r2, r2
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	23c0      	movs	r3, #192	; 0xc0
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fa41 	bl	8003554 <HAL_TIM_IC_CaptureCallback>
 80030d2:	e007      	b.n	80030e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fa34 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 fa40 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2208      	movs	r2, #8
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d124      	bne.n	8003142 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2208      	movs	r2, #8
 8003100:	4013      	ands	r3, r2
 8003102:	2b08      	cmp	r3, #8
 8003104:	d11d      	bne.n	8003142 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2209      	movs	r2, #9
 800310c:	4252      	negs	r2, r2
 800310e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2204      	movs	r2, #4
 8003114:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2203      	movs	r2, #3
 800311e:	4013      	ands	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f000 fa15 	bl	8003554 <HAL_TIM_IC_CaptureCallback>
 800312a:	e007      	b.n	800313c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fa08 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	0018      	movs	r0, r3
 8003138:	f000 fa14 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	2b10      	cmp	r3, #16
 800314e:	d125      	bne.n	800319c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2210      	movs	r2, #16
 8003158:	4013      	ands	r3, r2
 800315a:	2b10      	cmp	r3, #16
 800315c:	d11e      	bne.n	800319c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2211      	movs	r2, #17
 8003164:	4252      	negs	r2, r2
 8003166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2208      	movs	r2, #8
 800316c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	23c0      	movs	r3, #192	; 0xc0
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 f9e8 	bl	8003554 <HAL_TIM_IC_CaptureCallback>
 8003184:	e007      	b.n	8003196 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f9db 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f000 f9e7 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10f      	bne.n	80031ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d108      	bne.n	80031ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2202      	movs	r2, #2
 80031be:	4252      	negs	r2, r2
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f9b5 	bl	8003534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d10f      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d108      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2241      	movs	r2, #65	; 0x41
 80031ec:	4252      	negs	r2, r2
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 f9be 	bl	8003574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2317      	movs	r3, #23
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2238      	movs	r2, #56	; 0x38
 8003218:	5c9b      	ldrb	r3, [r3, r2]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x22>
 800321e:	2302      	movs	r3, #2
 8003220:	e0ad      	b.n	800337e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2238      	movs	r2, #56	; 0x38
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d100      	bne.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003230:	e076      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	d900      	bls.n	800323a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003238:	e095      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x166>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d04e      	beq.n	80032de <HAL_TIM_PWM_ConfigChannel+0xde>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b08      	cmp	r3, #8
 8003244:	d900      	bls.n	8003248 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003246:	e08e      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x56>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d021      	beq.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003254:	e087      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f9da 	bl	8003618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2108      	movs	r1, #8
 8003270:	430a      	orrs	r2, r1
 8003272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2104      	movs	r1, #4
 8003280:	438a      	bics	r2, r1
 8003282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6999      	ldr	r1, [r3, #24]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	619a      	str	r2, [r3, #24]
      break;
 8003296:	e06b      	b.n	8003370 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 f9f5 	bl	8003690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0109      	lsls	r1, r1, #4
 80032b4:	430a      	orrs	r2, r1
 80032b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4931      	ldr	r1, [pc, #196]	; (8003388 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6999      	ldr	r1, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	619a      	str	r2, [r3, #24]
      break;
 80032dc:	e048      	b.n	8003370 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	0011      	movs	r1, r2
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 fa14 	bl	8003714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2108      	movs	r1, #8
 80032f8:	430a      	orrs	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2104      	movs	r1, #4
 8003308:	438a      	bics	r2, r1
 800330a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69d9      	ldr	r1, [r3, #28]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	61da      	str	r2, [r3, #28]
      break;
 800331e:	e027      	b.n	8003370 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	0011      	movs	r1, r2
 8003328:	0018      	movs	r0, r3
 800332a:	f000 fa33 	bl	8003794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	0109      	lsls	r1, r1, #4
 800333c:	430a      	orrs	r2, r1
 800333e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	490f      	ldr	r1, [pc, #60]	; (8003388 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800334c:	400a      	ands	r2, r1
 800334e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69d9      	ldr	r1, [r3, #28]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	021a      	lsls	r2, r3, #8
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	61da      	str	r2, [r3, #28]
      break;
 8003364:	e004      	b.n	8003370 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003366:	2317      	movs	r3, #23
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2238      	movs	r2, #56	; 0x38
 8003374:	2100      	movs	r1, #0
 8003376:	5499      	strb	r1, [r3, r2]

  return status;
 8003378:	2317      	movs	r3, #23
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b006      	add	sp, #24
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	fffffbff 	.word	0xfffffbff

0800338c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2238      	movs	r2, #56	; 0x38
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIM_ConfigClockSource+0x20>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0bc      	b.n	8003526 <HAL_TIM_ConfigClockSource+0x19a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2238      	movs	r2, #56	; 0x38
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2239      	movs	r2, #57	; 0x39
 80033b8:	2102      	movs	r1, #2
 80033ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2277      	movs	r2, #119	; 0x77
 80033c8:	4393      	bics	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_TIM_ConfigClockSource+0x1a4>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0192      	lsls	r2, r2, #6
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xde>
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	0192      	lsls	r2, r2, #6
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d900      	bls.n	80033f2 <HAL_TIM_ConfigClockSource+0x66>
 80033f0:	e088      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	0152      	lsls	r2, r2, #5
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d100      	bne.n	80033fc <HAL_TIM_ConfigClockSource+0x70>
 80033fa:	e088      	b.n	800350e <HAL_TIM_ConfigClockSource+0x182>
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0152      	lsls	r2, r2, #5
 8003400:	4293      	cmp	r3, r2
 8003402:	d900      	bls.n	8003406 <HAL_TIM_ConfigClockSource+0x7a>
 8003404:	e07e      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 8003406:	2b70      	cmp	r3, #112	; 0x70
 8003408:	d018      	beq.n	800343c <HAL_TIM_ConfigClockSource+0xb0>
 800340a:	d900      	bls.n	800340e <HAL_TIM_ConfigClockSource+0x82>
 800340c:	e07a      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 800340e:	2b60      	cmp	r3, #96	; 0x60
 8003410:	d04f      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x126>
 8003412:	d900      	bls.n	8003416 <HAL_TIM_ConfigClockSource+0x8a>
 8003414:	e076      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 8003416:	2b50      	cmp	r3, #80	; 0x50
 8003418:	d03b      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x106>
 800341a:	d900      	bls.n	800341e <HAL_TIM_ConfigClockSource+0x92>
 800341c:	e072      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d057      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x146>
 8003422:	d900      	bls.n	8003426 <HAL_TIM_ConfigClockSource+0x9a>
 8003424:	e06e      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 8003426:	2b30      	cmp	r3, #48	; 0x30
 8003428:	d063      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x166>
 800342a:	d86b      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d060      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x166>
 8003430:	d868      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d05d      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x166>
 8003436:	2b10      	cmp	r3, #16
 8003438:	d05b      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x166>
 800343a:	e063      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f000 fa62 	bl	8003914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2277      	movs	r2, #119	; 0x77
 800345c:	4313      	orrs	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]
      break;
 8003468:	e052      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f000 fa4b 	bl	8003914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	01c9      	lsls	r1, r1, #7
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
      break;
 8003490:	e03e      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	001a      	movs	r2, r3
 80034a0:	f000 f9be 	bl	8003820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2150      	movs	r1, #80	; 0x50
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 fa18 	bl	80038e0 <TIM_ITRx_SetConfig>
      break;
 80034b0:	e02e      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	001a      	movs	r2, r3
 80034c0:	f000 f9dc 	bl	800387c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2160      	movs	r1, #96	; 0x60
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fa08 	bl	80038e0 <TIM_ITRx_SetConfig>
      break;
 80034d0:	e01e      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	001a      	movs	r2, r3
 80034e0:	f000 f99e 	bl	8003820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f9f8 	bl	80038e0 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e00e      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0019      	movs	r1, r3
 80034fc:	0010      	movs	r0, r2
 80034fe:	f000 f9ef 	bl	80038e0 <TIM_ITRx_SetConfig>
      break;
 8003502:	e005      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003504:	230f      	movs	r3, #15
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
      break;
 800350c:	e000      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800350e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2239      	movs	r2, #57	; 0x39
 8003514:	2101      	movs	r1, #1
 8003516:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2238      	movs	r2, #56	; 0x38
 800351c:	2100      	movs	r1, #0
 800351e:	5499      	strb	r1, [r3, r2]

  return status;
 8003520:	230f      	movs	r3, #15
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	781b      	ldrb	r3, [r3, #0]
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	ffff00ff 	.word	0xffff00ff

08003534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	05db      	lsls	r3, r3, #23
 800359a:	429a      	cmp	r2, r3
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x22>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <TIM_Base_SetConfig+0x8c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2270      	movs	r2, #112	; 0x70
 80035aa:	4393      	bics	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	429a      	cmp	r2, r3
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x46>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <TIM_Base_SetConfig+0x8c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a11      	ldr	r2, [pc, #68]	; (8003614 <TIM_Base_SetConfig+0x90>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	4393      	bics	r3, r2
 80035e2:	001a      	movs	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	615a      	str	r2, [r3, #20]
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40010800 	.word	0x40010800
 8003614:	fffffcff 	.word	0xfffffcff

08003618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	2201      	movs	r2, #1
 8003628:	4393      	bics	r3, r2
 800362a:	001a      	movs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2270      	movs	r2, #112	; 0x70
 8003646:	4393      	bics	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2203      	movs	r2, #3
 800364e:	4393      	bics	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2202      	movs	r2, #2
 8003660:	4393      	bics	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	621a      	str	r2, [r3, #32]
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b006      	add	sp, #24
 800368e:	bd80      	pop	{r7, pc}

08003690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	2210      	movs	r2, #16
 80036a0:	4393      	bics	r3, r2
 80036a2:	001a      	movs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_OC2_SetConfig+0x7c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a12      	ldr	r2, [pc, #72]	; (8003710 <TIM_OC2_SetConfig+0x80>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2220      	movs	r2, #32
 80036da:	4393      	bics	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b006      	add	sp, #24
 800370a:	bd80      	pop	{r7, pc}
 800370c:	ffff8fff 	.word	0xffff8fff
 8003710:	fffffcff 	.word	0xfffffcff

08003714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a1a      	ldr	r2, [pc, #104]	; (800378c <TIM_OC3_SetConfig+0x78>)
 8003724:	401a      	ands	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2270      	movs	r2, #112	; 0x70
 8003740:	4393      	bics	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2203      	movs	r2, #3
 8003748:	4393      	bics	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <TIM_OC3_SetConfig+0x7c>)
 800375a:	4013      	ands	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	621a      	str	r2, [r3, #32]
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b006      	add	sp, #24
 800378a:	bd80      	pop	{r7, pc}
 800378c:	fffffeff 	.word	0xfffffeff
 8003790:	fffffdff 	.word	0xfffffdff

08003794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <TIM_OC4_SetConfig+0x7c>)
 80037a4:	401a      	ands	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC4_SetConfig+0x80>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC4_SetConfig+0x84>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4a10      	ldr	r2, [pc, #64]	; (800381c <TIM_OC4_SetConfig+0x88>)
 80037dc:	4013      	ands	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	031b      	lsls	r3, r3, #12
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b006      	add	sp, #24
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	ffffefff 	.word	0xffffefff
 8003814:	ffff8fff 	.word	0xffff8fff
 8003818:	fffffcff 	.word	0xfffffcff
 800381c:	ffffdfff 	.word	0xffffdfff

08003820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	2201      	movs	r2, #1
 8003838:	4393      	bics	r3, r2
 800383a:	001a      	movs	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	22f0      	movs	r2, #240	; 0xf0
 800384a:	4393      	bics	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	220a      	movs	r2, #10
 800385c:	4393      	bics	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b006      	add	sp, #24
 800387a:	bd80      	pop	{r7, pc}

0800387c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	2210      	movs	r2, #16
 800388e:	4393      	bics	r3, r2
 8003890:	001a      	movs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <TIM_TI2_ConfigInputStage+0x60>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	031b      	lsls	r3, r3, #12
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	22a0      	movs	r2, #160	; 0xa0
 80038b8:	4393      	bics	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b006      	add	sp, #24
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	ffff0fff 	.word	0xffff0fff

080038e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2270      	movs	r2, #112	; 0x70
 80038f4:	4393      	bics	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	2207      	movs	r2, #7
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <TIM_ETR_SetConfig+0x3c>)
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	431a      	orrs	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b006      	add	sp, #24
 800394e:	bd80      	pop	{r7, pc}
 8003950:	ffff00ff 	.word	0xffff00ff

08003954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	221f      	movs	r2, #31
 8003964:	4013      	ands	r3, r2
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	0013      	movs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	43d2      	mvns	r2, r2
 8003976:	401a      	ands	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	211f      	movs	r1, #31
 8003984:	400b      	ands	r3, r1
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4099      	lsls	r1, r3
 800398a:	000b      	movs	r3, r1
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b006      	add	sp, #24
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2238      	movs	r2, #56	; 0x38
 80039aa:	5c9b      	ldrb	r3, [r3, r2]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e03d      	b.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2238      	movs	r2, #56	; 0x38
 80039b8:	2101      	movs	r1, #1
 80039ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2239      	movs	r2, #57	; 0x39
 80039c0:	2102      	movs	r1, #2
 80039c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2270      	movs	r2, #112	; 0x70
 80039d8:	4393      	bics	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d004      	beq.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a0e      	ldr	r2, [pc, #56]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10c      	bne.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	4393      	bics	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2239      	movs	r2, #57	; 0x39
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2238      	movs	r2, #56	; 0x38
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	0018      	movs	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b004      	add	sp, #16
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40010800 	.word	0x40010800

08003a3c <__libc_init_array>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	2600      	movs	r6, #0
 8003a40:	4d0c      	ldr	r5, [pc, #48]	; (8003a74 <__libc_init_array+0x38>)
 8003a42:	4c0d      	ldr	r4, [pc, #52]	; (8003a78 <__libc_init_array+0x3c>)
 8003a44:	1b64      	subs	r4, r4, r5
 8003a46:	10a4      	asrs	r4, r4, #2
 8003a48:	42a6      	cmp	r6, r4
 8003a4a:	d109      	bne.n	8003a60 <__libc_init_array+0x24>
 8003a4c:	2600      	movs	r6, #0
 8003a4e:	f000 f821 	bl	8003a94 <_init>
 8003a52:	4d0a      	ldr	r5, [pc, #40]	; (8003a7c <__libc_init_array+0x40>)
 8003a54:	4c0a      	ldr	r4, [pc, #40]	; (8003a80 <__libc_init_array+0x44>)
 8003a56:	1b64      	subs	r4, r4, r5
 8003a58:	10a4      	asrs	r4, r4, #2
 8003a5a:	42a6      	cmp	r6, r4
 8003a5c:	d105      	bne.n	8003a6a <__libc_init_array+0x2e>
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	00b3      	lsls	r3, r6, #2
 8003a62:	58eb      	ldr	r3, [r5, r3]
 8003a64:	4798      	blx	r3
 8003a66:	3601      	adds	r6, #1
 8003a68:	e7ee      	b.n	8003a48 <__libc_init_array+0xc>
 8003a6a:	00b3      	lsls	r3, r6, #2
 8003a6c:	58eb      	ldr	r3, [r5, r3]
 8003a6e:	4798      	blx	r3
 8003a70:	3601      	adds	r6, #1
 8003a72:	e7f2      	b.n	8003a5a <__libc_init_array+0x1e>
 8003a74:	08003ad0 	.word	0x08003ad0
 8003a78:	08003ad0 	.word	0x08003ad0
 8003a7c:	08003ad0 	.word	0x08003ad0
 8003a80:	08003ad4 	.word	0x08003ad4

08003a84 <memset>:
 8003a84:	0003      	movs	r3, r0
 8003a86:	1882      	adds	r2, r0, r2
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <memset+0xa>
 8003a8c:	4770      	bx	lr
 8003a8e:	7019      	strb	r1, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	e7f9      	b.n	8003a88 <memset+0x4>

08003a94 <_init>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr

08003aa0 <_fini>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr
