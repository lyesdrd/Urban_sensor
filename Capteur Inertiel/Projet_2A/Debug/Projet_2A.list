
Projet_2A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000951c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  080096b0  080096b0  000196b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b58  08009b58  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b60  08009b60  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001e0  08009d48  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08009d48  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a48  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002988  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  000395e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227e0  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014466  00000000  00000000  0005e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce352  00000000  00000000  0007260e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006038  00000000  00000000  001409b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009694 	.word	0x08009694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009694 	.word	0x08009694

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f000 ff63 	bl	8001d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f816 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 f9b8 	bl	8001220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f986 	bl	80011c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eb4:	f000 f872 	bl	8000f9c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000eb8:	f000 f8b0 	bl	800101c <MX_TIM2_Init>
  MX_TIM15_Init();
 8000ebc:	f000 f92e 	bl	800111c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  //Fonction qui fait touuuut

  urban_sensor();
 8000ec0:	f000 fcda 	bl	8001878 <urban_sensor>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <main+0x34>)
 8000ec8:	f003 fdc8 	bl	8004a5c <HAL_TIM_PWM_Start>
 8000ecc:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002a4 	.word	0x200002a4

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2244      	movs	r2, #68	; 0x44
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fabe 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000efa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000efe:	f002 fb83 	bl	8003608 <HAL_PWREx_ControlVoltageScaling>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f08:	f000 fa18 	bl	800133c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f0c:	f002 fb5e 	bl	80035cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <SystemClock_Config+0xc0>)
 8000f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <SystemClock_Config+0xc0>)
 8000f18:	f023 0318 	bic.w	r3, r3, #24
 8000f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f20:	2314      	movs	r3, #20
 8000f22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f30:	2360      	movs	r3, #96	; 0x60
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f40:	2310      	movs	r3, #16
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f44:	2307      	movs	r3, #7
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fbad 	bl	80036b4 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f60:	f000 f9ec 	bl	800133c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 ffb9 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f88:	f000 f9d8 	bl	800133c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f8c:	f003 fbac 	bl	80046e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f90:	bf00      	nop
 8000f92:	3758      	adds	r7, #88	; 0x58
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f001 fa28 	bl	800242c <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 f9ab 	bl	800133c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f002 fa57 	bl	800349c <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 f9a2 	bl	800133c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f002 fa99 	bl	8003532 <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f999 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000020c 	.word	0x2000020c
 8001014:	40005400 	.word	0x40005400
 8001018:	00707cbb 	.word	0x00707cbb

0800101c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001054:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001066:	2263      	movs	r2, #99	; 0x63
 8001068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <MX_TIM2_Init+0xfc>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001076:	4828      	ldr	r0, [pc, #160]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001078:	f003 fc38 	bl	80048ec <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001082:	f000 f95b 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	4619      	mov	r1, r3
 8001092:	4821      	ldr	r0, [pc, #132]	; (8001118 <MX_TIM2_Init+0xfc>)
 8001094:	f004 f84a 	bl	800512c <HAL_TIM_ConfigClockSource>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800109e:	f000 f94d 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a2:	481d      	ldr	r0, [pc, #116]	; (8001118 <MX_TIM2_Init+0xfc>)
 80010a4:	f003 fc79 	bl	800499a <HAL_TIM_PWM_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ae:	f000 f945 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80010b2:	2108      	movs	r1, #8
 80010b4:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM2_Init+0xfc>)
 80010b6:	f003 fdaf 	bl	8004c18 <HAL_TIM_OnePulse_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80010c0:	f000 f93c 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_TIM2_Init+0xfc>)
 80010d4:	f004 fcc4 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80010de:	f000 f92d 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80010e6:	2332      	movs	r3, #50	; 0x32
 80010e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM2_Init+0xfc>)
 80010fa:	f003 ff07 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001104:	f000 f91a 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM2_Init+0xfc>)
 800110a:	f000 f9d9 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3738      	adds	r7, #56	; 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200002a4 	.word	0x200002a4

0800111c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_TIM15_Init+0x9c>)
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_TIM15_Init+0xa0>)
 800113e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 32000-1;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_TIM15_Init+0x9c>)
 8001142:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001146:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_TIM15_Init+0x9c>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_TIM15_Init+0x9c>)
 8001150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001154:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_TIM15_Init+0x9c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_TIM15_Init+0x9c>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_TIM15_Init+0x9c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_TIM15_Init+0x9c>)
 800116a:	f003 fbbf 	bl	80048ec <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001174:	f000 f8e2 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_TIM15_Init+0x9c>)
 8001186:	f003 ffd1 	bl	800512c <HAL_TIM_ConfigClockSource>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001190:	f000 f8d4 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_TIM15_Init+0x9c>)
 80011a2:	f004 fc5d 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80011ac:	f000 f8c6 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000258 	.word	0x20000258
 80011bc:	40014000 	.word	0x40014000

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <MX_USART2_UART_Init+0x5c>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x58>)
 8001204:	f004 fcb0 	bl	8005b68 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f895 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002f0 	.word	0x200002f0
 800121c:	40004400 	.word	0x40004400

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <MX_GPIO_Init+0xf0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a35      	ldr	r2, [pc, #212]	; (8001310 <MX_GPIO_Init+0xf0>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <MX_GPIO_Init+0xf0>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_GPIO_Init+0xf0>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <MX_GPIO_Init+0xf0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_GPIO_Init+0xf0>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_GPIO_Init+0xf0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <MX_GPIO_Init+0xf0>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_GPIO_Init+0xf0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	4824      	ldr	r0, [pc, #144]	; (8001314 <MX_GPIO_Init+0xf4>)
 8001284:	f001 f888 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001288:	2302      	movs	r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001298:	2305      	movs	r3, #5
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f000 ff0d 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012aa:	2308      	movs	r3, #8
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ae:	230b      	movs	r3, #11
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f000 ff00 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012c4:	2308      	movs	r3, #8
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_GPIO_Init+0xf4>)
 80012dc:	f000 fef2 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTBTN_Pin */
  GPIO_InitStruct.Pin = INTBTN_Pin;
 80012e0:	2310      	movs	r3, #16
 80012e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_GPIO_Init+0xf8>)
 80012e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTBTN_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_GPIO_Init+0xf4>)
 80012f4:	f000 fee6 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	200a      	movs	r0, #10
 80012fe:	f000 feaa 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001302:	200a      	movs	r0, #10
 8001304:	f000 fec3 	bl	800208e <HAL_NVIC_EnableIRQ>

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400
 8001318:	10110000 	.word	0x10110000

0800131c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
	INTBTN = 1;
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	200001fc 	.word	0x200001fc

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_MspInit+0x44>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6613      	str	r3, [r2, #96]	; 0x60
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x44>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6593      	str	r3, [r2, #88]	; 0x58
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b09e      	sub	sp, #120	; 0x78
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2254      	movs	r2, #84	; 0x54
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 f859 	bl	8006468 <memset>
  if(hi2c->Instance==I2C1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_I2C_MspInit+0xa8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d137      	bne.n	8001430 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 ff97 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013d8:	f7ff ffb0 	bl	800133c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_I2C_MspInit+0xac>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <HAL_I2C_MspInit+0xac>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_I2C_MspInit+0xac>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001406:	2304      	movs	r3, #4
 8001408:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f000 fe56 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_I2C_MspInit+0xac>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_I2C_MspInit+0xac>)
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_I2C_MspInit+0xac>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3778      	adds	r7, #120	; 0x78
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005400 	.word	0x40005400
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d114      	bne.n	800147c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201c      	movs	r0, #28
 8001470:	f000 fdf1 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 fe0a 	bl	800208e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800147a:	e018      	b.n	80014ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_TIM_Base_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d113      	bne.n	80014ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6613      	str	r3, [r2, #96]	; 0x60
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2018      	movs	r0, #24
 80014a4:	f000 fdd7 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014a8:	2018      	movs	r0, #24
 80014aa:	f000 fdf0 	bl	800208e <HAL_NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40014000 	.word	0x40014000

080014c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d11c      	bne.n	800151c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014fa:	2320      	movs	r3, #32
 80014fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f000 fdd4 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09e      	sub	sp, #120	; 0x78
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	2254      	movs	r2, #84	; 0x54
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f004 ff8d 	bl	8006468 <memset>
  if(huart->Instance==USART2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d148      	bne.n	80015ea <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fecb 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff fee4 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157e:	6593      	str	r3, [r2, #88]	; 0x58
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015a4:	2304      	movs	r3, #4
 80015a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b4:	2307      	movs	r3, #7
 80015b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f000 fd7f 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015d8:	2303      	movs	r3, #3
 80015da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f000 fd6d 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3778      	adds	r7, #120	; 0x78
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40004400 	.word	0x40004400
 80015f8:	40021000 	.word	0x40021000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 fbe6 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001654:	2010      	movs	r0, #16
 8001656:	f000 fed1 	bl	80023fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001666:	f003 fb31 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000258 	.word	0x20000258

08001674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM2_IRQHandler+0x10>)
 800167a:	f003 fb27 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002a4 	.word	0x200002a4

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016a2:	f004 feb7 	bl	8006414 <__errno>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2216      	movs	r2, #22
 80016aa:	601a      	str	r2, [r3, #0]
	return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_exit>:

void _exit (int status)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe7 	bl	8001698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ca:	e7fe      	b.n	80016ca <_exit+0x12>

080016cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	4601      	mov	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
	}

return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x12>
	}
	return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_close>:

int _close(int file)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
	return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001766:	605a      	str	r2, [r3, #4]
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_isatty>:

int _isatty(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	return 1;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
	return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f004 fe1c 	bl	8006414 <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000c000 	.word	0x2000c000
 8001808:	00000400 	.word	0x00000400
 800180c:	20000200 	.word	0x20000200
 8001810:	20000398 	.word	0x20000398

08001814 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <SystemInit+0x5c>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <SystemInit+0x5c>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <SystemInit+0x60>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a11      	ldr	r2, [pc, #68]	; (8001874 <SystemInit+0x60>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <SystemInit+0x60>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <SystemInit+0x60>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <SystemInit+0x60>)
 8001840:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001844:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001848:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <SystemInit+0x60>)
 800184c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001850:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <SystemInit+0x60>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <SystemInit+0x60>)
 8001858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SystemInit+0x60>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	40021000 	.word	0x40021000

08001878 <urban_sensor>:
extern uint8_t INTTIM15;

uint8_t buf[10];


void urban_sensor(){
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b0ac      	sub	sp, #176	; 0xb0
 800187c:	af04      	add	r7, sp, #16

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800187e:	2100      	movs	r1, #0
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <urban_sensor+0x18>)
 8001882:	f003 f8eb 	bl	8004a5c <HAL_TIM_PWM_Start>
	/* USER CODE BEGIN 2 */

	for (int i = 0; i < 10; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800188c:	e00d      	b.n	80018aa <urban_sensor+0x32>
 800188e:	bf00      	nop
 8001890:	200002a4 	.word	0x200002a4
		buf[i] = 0;
 8001894:	4ace      	ldr	r2, [pc, #824]	; (8001bd0 <urban_sensor+0x358>)
 8001896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800189a:	4413      	add	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80018a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a4:	3301      	adds	r3, #1
 80018a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80018aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	ddf0      	ble.n	8001894 <urban_sensor+0x1c>

	HAL_StatusTypeDef r = HAL_I2C_IsDeviceReady(&hi2c1, ADDRESS_IMU, 5, 2);
 80018b2:	2302      	movs	r3, #2
 80018b4:	2205      	movs	r2, #5
 80018b6:	21d0      	movs	r1, #208	; 0xd0
 80018b8:	48c6      	ldr	r0, [pc, #792]	; (8001bd4 <urban_sensor+0x35c>)
 80018ba:	f001 fa5f 	bl	8002d7c <HAL_I2C_IsDeviceReady>
 80018be:	4603      	mov	r3, r0
 80018c0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	// ===== Verif Id accel/gyro
	buf[0] = 117; // register address (def val 0x71)
 80018c4:	4bc2      	ldr	r3, [pc, #776]	; (8001bd0 <urban_sensor+0x358>)
 80018c6:	2275      	movs	r2, #117	; 0x75
 80018c8:	701a      	strb	r2, [r3, #0]
	r = HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_IMU, buf, 1, 200);
 80018ca:	23c8      	movs	r3, #200	; 0xc8
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	4abf      	ldr	r2, [pc, #764]	; (8001bd0 <urban_sensor+0x358>)
 80018d2:	21d0      	movs	r1, #208	; 0xd0
 80018d4:	48bf      	ldr	r0, [pc, #764]	; (8001bd4 <urban_sensor+0x35c>)
 80018d6:	f000 fe39 	bl	800254c <HAL_I2C_Master_Transmit>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	//on se positionne à l'adress imu et on lit 1 bit
	r = HAL_I2C_Master_Receive(&hi2c1, ADDRESS_IMU, buf, 1, 200);
 80018e0:	23c8      	movs	r3, #200	; 0xc8
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	4aba      	ldr	r2, [pc, #744]	; (8001bd0 <urban_sensor+0x358>)
 80018e8:	21d0      	movs	r1, #208	; 0xd0
 80018ea:	48ba      	ldr	r0, [pc, #744]	; (8001bd4 <urban_sensor+0x35c>)
 80018ec:	f000 ff22 	bl	8002734 <HAL_I2C_Master_Receive>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	buf[0]=IMU_IN_PIN_CFG_REG;
 80018f6:	4bb6      	ldr	r3, [pc, #728]	; (8001bd0 <urban_sensor+0x358>)
 80018f8:	2237      	movs	r2, #55	; 0x37
 80018fa:	701a      	strb	r2, [r3, #0]
	buf[1]=BYPASS_EN;
 80018fc:	4bb4      	ldr	r3, [pc, #720]	; (8001bd0 <urban_sensor+0x358>)
 80018fe:	2202      	movs	r2, #2
 8001900:	705a      	strb	r2, [r3, #1]
	r=HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_IMU, buf, 2, 200);
 8001902:	23c8      	movs	r3, #200	; 0xc8
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2302      	movs	r3, #2
 8001908:	4ab1      	ldr	r2, [pc, #708]	; (8001bd0 <urban_sensor+0x358>)
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	48b1      	ldr	r0, [pc, #708]	; (8001bd4 <urban_sensor+0x35c>)
 800190e:	f000 fe1d 	bl	800254c <HAL_I2C_Master_Transmit>
 8001912:	4603      	mov	r3, r0
 8001914:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	// ===== Verif Id Mag
	buf[0] = 0x00; // register address (def val 0x71)
 8001918:	4bad      	ldr	r3, [pc, #692]	; (8001bd0 <urban_sensor+0x358>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
	r = HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MAG, buf, 1, 200);
 800191e:	23c8      	movs	r3, #200	; 0xc8
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	4aaa      	ldr	r2, [pc, #680]	; (8001bd0 <urban_sensor+0x358>)
 8001926:	2118      	movs	r1, #24
 8001928:	48aa      	ldr	r0, [pc, #680]	; (8001bd4 <urban_sensor+0x35c>)
 800192a:	f000 fe0f 	bl	800254c <HAL_I2C_Master_Transmit>
 800192e:	4603      	mov	r3, r0
 8001930:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	//on se positionne à l'adress imu et on lit 1 bit
	r = HAL_I2C_Master_Receive(&hi2c1, ADDRESS_MAG, buf, 1, 200);
 8001934:	23c8      	movs	r3, #200	; 0xc8
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	4aa5      	ldr	r2, [pc, #660]	; (8001bd0 <urban_sensor+0x358>)
 800193c:	2118      	movs	r1, #24
 800193e:	48a5      	ldr	r0, [pc, #660]	; (8001bd4 <urban_sensor+0x35c>)
 8001940:	f000 fef8 	bl	8002734 <HAL_I2C_Master_Receive>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	// Test: si buf[0] != de valeur doc (0x48) =>>> Kernel Panic

	buf[0] = IMU_PWR_MGMT_1_REG;
 800194a:	4ba1      	ldr	r3, [pc, #644]	; (8001bd0 <urban_sensor+0x358>)
 800194c:	226b      	movs	r2, #107	; 0x6b
 800194e:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 8001950:	4b9f      	ldr	r3, [pc, #636]	; (8001bd0 <urban_sensor+0x358>)
 8001952:	2200      	movs	r2, #0
 8001954:	705a      	strb	r2, [r3, #1]
	r = HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_IMU, buf, 2, 200);
 8001956:	23c8      	movs	r3, #200	; 0xc8
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4a9c      	ldr	r2, [pc, #624]	; (8001bd0 <urban_sensor+0x358>)
 800195e:	21d0      	movs	r1, #208	; 0xd0
 8001960:	489c      	ldr	r0, [pc, #624]	; (8001bd4 <urban_sensor+0x35c>)
 8001962:	f000 fdf3 	bl	800254c <HAL_I2C_Master_Transmit>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	//on ecrit dans le registre 107 la valeur 0 qui permet d'activer l' IMU
	buf[0] = 107;
 800196c:	4b98      	ldr	r3, [pc, #608]	; (8001bd0 <urban_sensor+0x358>)
 800196e:	226b      	movs	r2, #107	; 0x6b
 8001970:	701a      	strb	r2, [r3, #0]
	r = HAL_I2C_Master_Receive(&hi2c1, ADDRESS_IMU, buf, 1, 200);
 8001972:	23c8      	movs	r3, #200	; 0xc8
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	4a95      	ldr	r2, [pc, #596]	; (8001bd0 <urban_sensor+0x358>)
 800197a:	21d0      	movs	r1, #208	; 0xd0
 800197c:	4895      	ldr	r0, [pc, #596]	; (8001bd4 <urban_sensor+0x35c>)
 800197e:	f000 fed9 	bl	8002734 <HAL_I2C_Master_Receive>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	buf[0] = 0;
 8001988:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <urban_sensor+0x358>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	r = HAL_I2C_Mem_Write(&hi2c1, ADDRESS_IMU, IMU_PWR_MGMT_1_REG,I2C_MEMADD_SIZE_8BIT, (uint8_t*) buf, 1, 10);
 800198e:	230a      	movs	r3, #10
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	2301      	movs	r3, #1
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	4b8e      	ldr	r3, [pc, #568]	; (8001bd0 <urban_sensor+0x358>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2301      	movs	r3, #1
 800199c:	226b      	movs	r2, #107	; 0x6b
 800199e:	21d0      	movs	r1, #208	; 0xd0
 80019a0:	488c      	ldr	r0, [pc, #560]	; (8001bd4 <urban_sensor+0x35c>)
 80019a2:	f000 ffbd 	bl	8002920 <HAL_I2C_Mem_Write>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	//GPIO_PinState PinState;

	while (1) {
		uint8_t buuuf[14];
		//uint8_t buf2[8];
		r = HAL_I2C_Mem_Read(&hi2c1, ADDRESS_IMU, FIRST_REG_IMU,I2C_MEMADD_SIZE_8BIT, buuuf, 14, 10);
 80019ac:	230a      	movs	r3, #10
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	230e      	movs	r3, #14
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	223b      	movs	r2, #59	; 0x3b
 80019be:	21d0      	movs	r1, #208	; 0xd0
 80019c0:	4884      	ldr	r0, [pc, #528]	; (8001bd4 <urban_sensor+0x35c>)
 80019c2:	f001 f8c1 	bl	8002b48 <HAL_I2C_Mem_Read>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b


		GYRO_XOUT_H = buuuf[67 - FIRST_REG_IMU];
 80019cc:	7e3b      	ldrb	r3, [r7, #24]
 80019ce:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
		GYRO_XOUT_L = buuuf[68 - FIRST_REG_IMU];
 80019d2:	7e7b      	ldrb	r3, [r7, #25]
 80019d4:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
		GYRO_XOUT = (GYRO_XOUT_H << 8) + GYRO_XOUT_L;
 80019d8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		GYRO_XOUT_Finale = GYRO_XOUT;
 80019f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80019f4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

		GYRO_YOUT_H = buuuf[69 - FIRST_REG_IMU];
 80019f8:	7ebb      	ldrb	r3, [r7, #26]
 80019fa:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		GYRO_YOUT_L = buuuf[70 - FIRST_REG_IMU];
 80019fe:	7efb      	ldrb	r3, [r7, #27]
 8001a00:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		GYRO_YOUT = (GYRO_YOUT_H << 8) + GYRO_YOUT_L;
 8001a04:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		GYRO_YOUT_Finale = GYRO_YOUT;
 8001a1c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001a20:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

		GYRO_ZOUT_H = buuuf[71 - FIRST_REG_IMU];
 8001a24:	7f3b      	ldrb	r3, [r7, #28]
 8001a26:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		GYRO_ZOUT_L = buuuf[72 - FIRST_REG_IMU];
 8001a2a:	7f7b      	ldrb	r3, [r7, #29]
 8001a2c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
		GYRO_ZOUT = (GYRO_ZOUT_H << 8) + GYRO_ZOUT_L;
 8001a30:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		GYRO_ZOUT_Finale = GYRO_ZOUT;
 8001a48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001a4c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		ACCEL_XOUT_H = buuuf[0];
 8001a50:	7c3b      	ldrb	r3, [r7, #16]
 8001a52:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		ACCEL_XOUT_L = buuuf[9];
 8001a56:	7e7b      	ldrb	r3, [r7, #25]
 8001a58:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		ACCEL_XOUT = (ACCEL_XOUT_H << 8) + ACCEL_XOUT_L;
 8001a5c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		ACCEL_XOUT_Finale=(ACCEL_XOUT)*(4/32768);
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		ACCEL_YOUT_H = buuuf[16];
 8001a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		ACCEL_YOUT_L = buuuf[24];
 8001a82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a86:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		ACCEL_YOUT = (ACCEL_YOUT_H << 8) + ACCEL_YOUT_L;
 8001a8a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		ACCEL_YOUT_Finale=(ACCEL_YOUT)*(4/32768);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c


		ACCEL_ZOUT_H = buuuf[32];
 8001aa8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aac:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		ACCEL_ZOUT_L = buuuf[40];
 8001ab0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ab4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		ACCEL_ZOUT = (ACCEL_ZOUT_H << 8) + ACCEL_ZOUT_L;
 8001ab8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		ACCEL_ZOUT_Finale=(ACCEL_ZOUT)*(4/32768);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

		//Valeur pour la boussole
		uint8_t rawData[14];
		r = HAL_I2C_Mem_Read(&hi2c1, ADDRESS_MAG, FIRST_REG_MAG, I2C_MEMADD_SIZE_8BIT, rawData, 14, 10);
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	230e      	movs	r3, #14
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	463b      	mov	r3, r7
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	2118      	movs	r1, #24
 8001ae8:	483a      	ldr	r0, [pc, #232]	; (8001bd4 <urban_sensor+0x35c>)
 8001aea:	f001 f82d 	bl	8002b48 <HAL_I2C_Mem_Read>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

		AK8963_XOUT_L=rawData[0];
 8001af4:	783b      	ldrb	r3, [r7, #0]
 8001af6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		AK8963_XOUT_H=rawData[1];
 8001afa:	787b      	ldrb	r3, [r7, #1]
 8001afc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		AK8963_XOUT=(AK8963_XOUT_H << 8) + AK8963_XOUT_L;
 8001b00:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		//AK8963_XOUT=(AK8963_XOUT_L<<8)+AK8963_XOUT_H;

		AK8963_YOUT_L=rawData[2];
 8001b18:	78bb      	ldrb	r3, [r7, #2]
 8001b1a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		AK8963_YOUT_H=rawData[3];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		AK8963_YOUT=(AK8963_YOUT_H << 8) + AK8963_YOUT_L;
 8001b24:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		//Calcul de la position en degré

		POSITION_RADIAN = atan2(AK8963_YOUT,AK8963_XOUT);
 8001b3c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcef 	bl	8000524 <__aeabi_i2d>
 8001b46:	4604      	mov	r4, r0
 8001b48:	460d      	mov	r5, r1
 8001b4a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fce8 	bl	8000524 <__aeabi_i2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	ec43 2b11 	vmov	d1, r2, r3
 8001b5c:	ec45 4b10 	vmov	d0, r4, r5
 8001b60:	f007 fb20 	bl	80091a4 <atan2>
 8001b64:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
		POSITION_DEGRE = (180*POSITION_RADIAN)*M_PI;
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <urban_sensor+0x360>)
 8001b6e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b72:	f7fe fd41 	bl	80005f8 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	a312      	add	r3, pc, #72	; (adr r3, 8001bc8 <urban_sensor+0x350>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

		AK8963_ZOUT_L=rawData[4];
 8001b90:	793b      	ldrb	r3, [r7, #4]
 8001b92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		AK8963_ZOUT_H=rawData[5];
 8001b96:	797b      	ldrb	r3, [r7, #5]
 8001b98:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		AK8963_ZOUT=(AK8963_ZOUT_H << 8) + AK8963_ZOUT_L;
 8001b9c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		AK8963_ZOUT_Finale=(AK8963_ZOUT - 128)/256 + 1.0;
 8001bb4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001bb8:	3b80      	subs	r3, #128	; 0x80
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da0e      	bge.n	8001bdc <urban_sensor+0x364>
 8001bbe:	33ff      	adds	r3, #255	; 0xff
 8001bc0:	e00c      	b.n	8001bdc <urban_sensor+0x364>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	54442d18 	.word	0x54442d18
 8001bcc:	400921fb 	.word	0x400921fb
 8001bd0:	20000374 	.word	0x20000374
 8001bd4:	2000020c 	.word	0x2000020c
 8001bd8:	40668000 	.word	0x40668000
 8001bdc:	121b      	asrs	r3, r3, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fca0 	bl	8000524 <__aeabi_i2d>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <urban_sensor+0x484>)
 8001bea:	f7fe fb4f 	bl	800028c <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ffaf 	bl	8000b58 <__aeabi_d2iz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

//		buf[0] = 0x00;


		HAL_I2C_Mem_Write(&hi2c1, ADDRESS_MAG, AK8963_CNTL,I2C_MEMADD_SIZE_8BIT, buf, 1, 10); // Power down magnetometer
 8001c00:	230a      	movs	r3, #10
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2301      	movs	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <urban_sensor+0x488>)
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	220a      	movs	r2, #10
 8001c10:	2118      	movs	r1, #24
 8001c12:	483c      	ldr	r0, [pc, #240]	; (8001d04 <urban_sensor+0x48c>)
 8001c14:	f000 fe84 	bl	8002920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f000 f91d 	bl	8001e58 <HAL_Delay>
		buf[0] = 0x0F;
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <urban_sensor+0x488>)
 8001c20:	220f      	movs	r2, #15
 8001c22:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS_MAG, AK8963_CNTL,I2C_MEMADD_SIZE_8BIT, buf, 1, 10); // Enter Fuse ROM access mode
 8001c24:	230a      	movs	r3, #10
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <urban_sensor+0x488>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	220a      	movs	r2, #10
 8001c34:	2118      	movs	r1, #24
 8001c36:	4833      	ldr	r0, [pc, #204]	; (8001d04 <urban_sensor+0x48c>)
 8001c38:	f000 fe72 	bl	8002920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f000 f90b 	bl	8001e58 <HAL_Delay>

		//Activation d'une LED avec boutton poussoir
		//PinState=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //Pin sur laquelle est le boutton poussoir
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);

		if (INTBTN == 1)//Si on appuie sur le boutton
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <urban_sensor+0x490>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10a      	bne.n	8001c60 <urban_sensor+0x3e8>
					{
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	482f      	ldr	r0, [pc, #188]	; (8001d0c <urban_sensor+0x494>)
 8001c4e:	f000 fbbb 	bl	80023c8 <HAL_GPIO_TogglePin>
					REF_DEGRE=POSITION_DEGRE;//On prend une valeur de référence
 8001c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c56:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
					INTBTN=0;
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <urban_sensor+0x490>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
						// Activation autre vibreur
						}
					else{
						//bas rien
						}
					INTTIM15 = 0;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <urban_sensor+0x498>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
		HAL_Delay(500);
*/


		buf[0] = 0x00;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <urban_sensor+0x488>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS_MAG, AK8963_CNTL,I2C_MEMADD_SIZE_8BIT, buf, 1, 10); // Power down magnetometer
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2301      	movs	r3, #1
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <urban_sensor+0x488>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	220a      	movs	r2, #10
 8001c7c:	2118      	movs	r1, #24
 8001c7e:	4821      	ldr	r0, [pc, #132]	; (8001d04 <urban_sensor+0x48c>)
 8001c80:	f000 fe4e 	bl	8002920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8001c84:	200a      	movs	r0, #10
 8001c86:	f000 f8e7 	bl	8001e58 <HAL_Delay>


		// Configure the magnetometer for continuous read and highest resolution
		// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
		// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
		int Mscale = 1;//resolution de mesure : 16 bits
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
		int Mmode = 2;//0010 "continuous maesurement mode 1
 8001c8e:	2302      	movs	r3, #2
 8001c90:	643b      	str	r3, [r7, #64]	; 0x40
		buf[0] = Mscale << 4 | Mmode;
 8001c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <urban_sensor+0x488>)
 8001ca4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS_MAG, AK8963_CNTL,I2C_MEMADD_SIZE_8BIT, buf, 1, 10); // Power up magnetometer
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2301      	movs	r3, #1
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <urban_sensor+0x488>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	2118      	movs	r1, #24
 8001cb8:	4812      	ldr	r0, [pc, #72]	; (8001d04 <urban_sensor+0x48c>)
 8001cba:	f000 fe31 	bl	8002920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f000 f8ca 	bl	8001e58 <HAL_Delay>

		sprintf(str, "%f\r\n", POSITION_RADIAN);
 8001cc4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001cc8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ccc:	4911      	ldr	r1, [pc, #68]	; (8001d14 <urban_sensor+0x49c>)
 8001cce:	f005 f83d 	bl	8006d4c <siprintf>
		r = HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8001cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa7a 	bl	80001d0 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001ce4:	2364      	movs	r3, #100	; 0x64
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <urban_sensor+0x4a0>)
 8001ce8:	f003 ff8c 	bl	8005c04 <HAL_UART_Transmit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		HAL_Delay(200);
 8001cf2:	20c8      	movs	r0, #200	; 0xc8
 8001cf4:	f000 f8b0 	bl	8001e58 <HAL_Delay>
	while (1) {
 8001cf8:	e658      	b.n	80019ac <urban_sensor+0x134>
 8001cfa:	bf00      	nop
 8001cfc:	3ff00000 	.word	0x3ff00000
 8001d00:	20000374 	.word	0x20000374
 8001d04:	2000020c 	.word	0x2000020c
 8001d08:	200001fc 	.word	0x200001fc
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	20000000 	.word	0x20000000
 8001d14:	080096b0 	.word	0x080096b0
 8001d18:	200002f0 	.word	0x200002f0

08001d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff fd78 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
	ldr	r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <LoopForever+0x16>)
	cmp	r2, r3
 8001d46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f004 fb69 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4e:	f7ff f8a7 	bl	8000ea0 <main>

08001d52 <LoopForever>:

LoopForever:
    b LoopForever
 8001d52:	e7fe      	b.n	8001d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d54:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001d58:	08009b68 	.word	0x08009b68
	ldr	r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d60:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001d64:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001d68:	20000394 	.word	0x20000394

08001d6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_IRQHandler>

08001d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f961 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f80e 	bl	8001da0 <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	e001      	b.n	8001d94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d90:	f7ff fada 	bl	8001348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_InitTick+0x6c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_InitTick+0x70>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_InitTick+0x6c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f96d 	bl	80020aa <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d809      	bhi.n	8001df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 f937 	bl	8002056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_InitTick+0x74>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e007      	b.n	8001e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e004      	b.n	8001e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e001      	b.n	8001e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000004 	.word	0x20000004
 8001e14:	20000008 	.word	0x20000008

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20000380 	.word	0x20000380

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000380 	.word	0x20000380

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d2:	e148      	b.n	8002366 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 813a 	beq.w	8002360 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d00b      	beq.n	800210c <HAL_GPIO_Init+0x48>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002100:	2b11      	cmp	r3, #17
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d130      	bne.n	800216e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002142:	2201      	movs	r2, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 0201 	and.w	r2, r3, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0xea>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d123      	bne.n	80021f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0203 	and.w	r2, r3, #3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8094 	beq.w	8002360 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002238:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_GPIO_Init+0x2c0>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	4a51      	ldr	r2, [pc, #324]	; (8002384 <HAL_GPIO_Init+0x2c0>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6613      	str	r3, [r2, #96]	; 0x60
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x2c0>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002250:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <HAL_GPIO_Init+0x2c4>)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800227a:	d00d      	beq.n	8002298 <HAL_GPIO_Init+0x1d4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a43      	ldr	r2, [pc, #268]	; (800238c <HAL_GPIO_Init+0x2c8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x1d0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_GPIO_Init+0x2cc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_GPIO_Init+0x1cc>
 800228c:	2302      	movs	r3, #2
 800228e:	e004      	b.n	800229a <HAL_GPIO_Init+0x1d6>
 8002290:	2307      	movs	r3, #7
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x1d6>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_GPIO_Init+0x1d6>
 8002298:	2300      	movs	r3, #0
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	4093      	lsls	r3, r2
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022aa:	4937      	ldr	r1, [pc, #220]	; (8002388 <HAL_GPIO_Init+0x2c4>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022dc:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022e2:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002306:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f aeaf 	bne.w	80020d4 <HAL_GPIO_Init+0x10>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000
 800238c:	48000400 	.word	0x48000400
 8002390:	48000800 	.word	0x48000800
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43d9      	mvns	r1, r3
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	400b      	ands	r3, r1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe ff7e 	bl	800131c <HAL_GPIO_EXTI_Callback>
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e081      	b.n	8002542 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe ff9c 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	; 0x24
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e006      	b.n	80024b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d104      	bne.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	ea42 0103 	orr.w	r1, r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	021a      	lsls	r2, r3, #8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69d9      	ldr	r1, [r3, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	460b      	mov	r3, r1
 800255a:	817b      	strh	r3, [r7, #10]
 800255c:	4613      	mov	r3, r2
 800255e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b20      	cmp	r3, #32
 800256a:	f040 80da 	bne.w	8002722 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_I2C_Master_Transmit+0x30>
 8002578:	2302      	movs	r3, #2
 800257a:	e0d3      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1d8>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002584:	f7ff fc5c 	bl	8001e40 <HAL_GetTick>
 8002588:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2319      	movs	r3, #25
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fdc4 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0be      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2221      	movs	r2, #33	; 0x21
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2210      	movs	r2, #16
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	893a      	ldrh	r2, [r7, #8]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2bff      	cmp	r3, #255	; 0xff
 80025d6:	d90e      	bls.n	80025f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	8979      	ldrh	r1, [r7, #10]
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_I2C_Master_Transmit+0x1e0>)
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 ff26 	bl	8003440 <I2C_TransferConfig>
 80025f4:	e06c      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	b2da      	uxtb	r2, r3
 8002606:	8979      	ldrh	r1, [r7, #10]
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_I2C_Master_Transmit+0x1e0>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 ff15 	bl	8003440 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002616:	e05b      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	6a39      	ldr	r1, [r7, #32]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fdc1 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e07b      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d034      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x184>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	d130      	bne.n	80026d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2200      	movs	r2, #0
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fd53 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e04d      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d90e      	bls.n	80026b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	b2da      	uxtb	r2, r3
 800269e:	8979      	ldrh	r1, [r7, #10]
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fec9 	bl	8003440 <I2C_TransferConfig>
 80026ae:	e00f      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 feb8 	bl	8003440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d19e      	bne.n	8002618 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	6a39      	ldr	r1, [r7, #32]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fda0 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e01a      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2220      	movs	r2, #32
 80026f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_I2C_Master_Transmit+0x1e4>)
 8002702:	400b      	ands	r3, r1
 8002704:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	80002000 	.word	0x80002000
 8002730:	fe00e800 	.word	0xfe00e800

08002734 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	817b      	strh	r3, [r7, #10]
 8002744:	4613      	mov	r3, r2
 8002746:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	f040 80db 	bne.w	800290c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_I2C_Master_Receive+0x30>
 8002760:	2302      	movs	r3, #2
 8002762:	e0d4      	b.n	800290e <HAL_I2C_Master_Receive+0x1da>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800276c:	f7ff fb68 	bl	8001e40 <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2319      	movs	r3, #25
 8002778:	2201      	movs	r2, #1
 800277a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fcd0 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0bf      	b.n	800290e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2222      	movs	r2, #34	; 0x22
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2210      	movs	r2, #16
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	893a      	ldrh	r2, [r7, #8]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2bff      	cmp	r3, #255	; 0xff
 80027be:	d90e      	bls.n	80027de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	4b52      	ldr	r3, [pc, #328]	; (8002918 <HAL_I2C_Master_Receive+0x1e4>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fe32 	bl	8003440 <I2C_TransferConfig>
 80027dc:	e06d      	b.n	80028ba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_I2C_Master_Receive+0x1e4>)
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fe21 	bl	8003440 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80027fe:	e05c      	b.n	80028ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	6a39      	ldr	r1, [r7, #32]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fd49 	bl	800329c <I2C_WaitOnRXNEFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e07c      	b.n	800290e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d034      	beq.n	80028ba <HAL_I2C_Master_Receive+0x186>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d130      	bne.n	80028ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fc5e 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e04d      	b.n	800290e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2bff      	cmp	r3, #255	; 0xff
 800287a:	d90e      	bls.n	800289a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fdd4 	bl	8003440 <I2C_TransferConfig>
 8002898:	e00f      	b.n	80028ba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fdc3 	bl	8003440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d19d      	bne.n	8002800 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	6a39      	ldr	r1, [r7, #32]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fcab 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e01a      	b.n	800290e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_I2C_Master_Receive+0x1e8>)
 80028ec:	400b      	ands	r3, r1
 80028ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	80002400 	.word	0x80002400
 800291c:	fe00e800 	.word	0xfe00e800

08002920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4603      	mov	r3, r0
 8002930:	817b      	strh	r3, [r7, #10]
 8002932:	460b      	mov	r3, r1
 8002934:	813b      	strh	r3, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	f040 80f9 	bne.w	8002b3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_I2C_Mem_Write+0x34>
 800294e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0ed      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2C_Mem_Write+0x4e>
 800296a:	2302      	movs	r3, #2
 800296c:	e0e6      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002976:	f7ff fa63 	bl	8001e40 <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2319      	movs	r3, #25
 8002982:	2201      	movs	r2, #1
 8002984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fbcb 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0d1      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	; 0x21
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c0:	88f8      	ldrh	r0, [r7, #6]
 80029c2:	893a      	ldrh	r2, [r7, #8]
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	4603      	mov	r3, r0
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fadb 	bl	8002f8c <I2C_RequestMemoryWrite>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0a9      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2bff      	cmp	r3, #255	; 0xff
 80029f0:	d90e      	bls.n	8002a10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	2300      	movs	r3, #0
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fd19 	bl	8003440 <I2C_TransferConfig>
 8002a0e:	e00f      	b.n	8002a30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	8979      	ldrh	r1, [r7, #10]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fd08 	bl	8003440 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fbb5 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e07b      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d034      	beq.n	8002ae8 <HAL_I2C_Mem_Write+0x1c8>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d130      	bne.n	8002ae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fb47 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04d      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d90e      	bls.n	8002ac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	8979      	ldrh	r1, [r7, #10]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fcbd 	bl	8003440 <I2C_TransferConfig>
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	8979      	ldrh	r1, [r7, #10]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fcac 	bl	8003440 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d19e      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb94 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01a      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_I2C_Mem_Write+0x224>)
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	fe00e800 	.word	0xfe00e800

08002b48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	813b      	strh	r3, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80fd 	bne.w	8002d6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_I2C_Mem_Read+0x34>
 8002b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0f1      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Mem_Read+0x4e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0ea      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b9e:	f7ff f94f 	bl	8001e40 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2319      	movs	r3, #25
 8002baa:	2201      	movs	r2, #1
 8002bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fab7 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d5      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2222      	movs	r2, #34	; 0x22
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be8:	88f8      	ldrh	r0, [r7, #6]
 8002bea:	893a      	ldrh	r2, [r7, #8]
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fa1b 	bl	8003034 <I2C_RequestMemoryRead>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0ad      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2bff      	cmp	r3, #255	; 0xff
 8002c18:	d90e      	bls.n	8002c38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_I2C_Mem_Read+0x22c>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fc05 	bl	8003440 <I2C_TransferConfig>
 8002c36:	e00f      	b.n	8002c58 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_I2C_Mem_Read+0x22c>)
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fbf4 	bl	8003440 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2104      	movs	r1, #4
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa5e 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07c      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d034      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x1d0>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d130      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa2f 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04d      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d90e      	bls.n	8002cf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fba5 	bl	8003440 <I2C_TransferConfig>
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb94 	bl	8003440 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d19a      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa7c 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e01a      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_I2C_Mem_Read+0x230>)
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	80002400 	.word	0x80002400
 8002d78:	fe00e800 	.word	0xfe00e800

08002d7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	f040 80f1 	bne.w	8002f80 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0e7      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2C_IsDeviceReady+0x44>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0e0      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_I2C_IsDeviceReady+0x72>
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dec:	e004      	b.n	8002df8 <HAL_I2C_IsDeviceReady+0x7c>
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f81f 	bl	8001e40 <HAL_GetTick>
 8002e02:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e30:	e034      	b.n	8002e9c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d01a      	beq.n	8002e70 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7ff f801 	bl	8001e40 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <HAL_I2C_IsDeviceReady+0xd4>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e088      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_I2C_IsDeviceReady+0x12c>
 8002ea2:	7fbb      	ldrb	r3, [r7, #30]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0c4      	beq.n	8002e32 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d01a      	beq.n	8002eec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f92f 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e058      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e04a      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f914 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e03d      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2220      	movs	r2, #32
 8002f14:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d118      	bne.n	8002f50 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2120      	movs	r1, #32
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f8f3 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01c      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	f63f af3b 	bhi.w	8002dd6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	817b      	strh	r3, [r7, #10]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	813b      	strh	r3, [r7, #8]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <I2C_RequestMemoryWrite+0xa4>)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fa43 	bl	8003440 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	69b9      	ldr	r1, [r7, #24]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f8f0 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02c      	b.n	8003028 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd4:	893b      	ldrh	r3, [r7, #8]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8002fde:	e015      	b.n	800300c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	69b9      	ldr	r1, [r7, #24]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f8d6 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e012      	b.n	8003028 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003002:	893b      	ldrh	r3, [r7, #8]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2200      	movs	r2, #0
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f884 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	80002000 	.word	0x80002000

08003034 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	460b      	mov	r3, r1
 8003048:	813b      	strh	r3, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	8979      	ldrh	r1, [r7, #10]
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <I2C_RequestMemoryRead+0xa4>)
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2300      	movs	r3, #0
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f9f0 	bl	8003440 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	69b9      	ldr	r1, [r7, #24]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f89d 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e02c      	b.n	80030ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
 8003084:	e015      	b.n	80030b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003086:	893b      	ldrh	r3, [r7, #8]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	b29b      	uxth	r3, r3
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f883 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e012      	b.n	80030ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a8:	893b      	ldrh	r3, [r7, #8]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f831 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	80002000 	.word	0x80002000

080030dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d103      	bne.n	80030fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d007      	beq.n	8003118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	619a      	str	r2, [r3, #24]
  }
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	e022      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d01e      	beq.n	800317c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7fe fe7f 	bl	8001e40 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d113      	bne.n	800317c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00f      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d0cd      	beq.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b0:	e02c      	b.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8dc 	bl	8003374 <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02a      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d01e      	beq.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fe fe37 	bl	8001e40 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d1cb      	bne.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003230:	e028      	b.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f89c 	bl	8003374 <I2C_IsAcknowledgeFailed>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e026      	b.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe fdfb 	bl	8001e40 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e007      	b.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d1cf      	bne.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a8:	e055      	b.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f860 	bl	8003374 <I2C_IsAcknowledgeFailed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e053      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d129      	bne.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d105      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e03f      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2220      	movs	r2, #32
 80032ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e022      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003320:	f7fe fd8e 	bl	8001e40 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d1a2      	bne.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d151      	bne.n	8003432 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338e:	e022      	b.n	80033d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d01e      	beq.n	80033d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003398:	f7fe fd52 	bl	8001e40 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d302      	bcc.n	80033ae <I2C_IsAcknowledgeFailed+0x3a>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d113      	bne.n	80033d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02e      	b.n	8003434 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d1d5      	bne.n	8003390 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2210      	movs	r2, #16
 80033ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2220      	movs	r2, #32
 80033f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff fe71 	bl	80030dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <I2C_IsAcknowledgeFailed+0xc8>)
 8003406:	400b      	ands	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0204 	orr.w	r2, r3, #4
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	fe00e800 	.word	0xfe00e800

08003440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	817b      	strh	r3, [r7, #10]
 800344e:	4613      	mov	r3, r2
 8003450:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	0d5b      	lsrs	r3, r3, #21
 800345c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <I2C_TransferConfig+0x58>)
 8003462:	430b      	orrs	r3, r1
 8003464:	43db      	mvns	r3, r3
 8003466:	ea02 0103 	and.w	r1, r2, r3
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003470:	7a7b      	ldrb	r3, [r7, #9]
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	431a      	orrs	r2, r3
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	03ff63ff 	.word	0x03ff63ff

0800349c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d138      	bne.n	8003524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034bc:	2302      	movs	r3, #2
 80034be:	e032      	b.n	8003526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	d139      	bne.n	80035bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003552:	2302      	movs	r3, #2
 8003554:	e033      	b.n	80035be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2224      	movs	r2, #36	; 0x24
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40007000 	.word	0x40007000

080035ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <HAL_PWREx_GetVoltageRange+0x18>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40007000 	.word	0x40007000

08003608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003616:	d130      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003624:	d038      	beq.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2232      	movs	r2, #50	; 0x32
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0c9b      	lsrs	r3, r3, #18
 8003648:	3301      	adds	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364c:	e002      	b.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b01      	subs	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d102      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f2      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d110      	bne.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e00f      	b.n	800369a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d007      	beq.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003690:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40007000 	.word	0x40007000
 80036ac:	20000004 	.word	0x20000004
 80036b0:	431bde83 	.word	0x431bde83

080036b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f000 bc11 	b.w	8003eea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c8:	4ba0      	ldr	r3, [pc, #640]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d2:	4b9e      	ldr	r3, [pc, #632]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80e4 	beq.w	80038b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_RCC_OscConfig+0x4c>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	f040 808b 	bne.w	800380e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 8087 	bne.w	800380e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003700:	4b92      	ldr	r3, [pc, #584]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_OscConfig+0x64>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e3e8      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	4b8b      	ldr	r3, [pc, #556]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e>
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	e005      	b.n	800373e <HAL_RCC_OscConfig+0x8a>
 8003732:	4b86      	ldr	r3, [pc, #536]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373e:	4293      	cmp	r3, r2
 8003740:	d223      	bcs.n	800378a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fd7a 	bl	8004240 <RCC_SetFlashLatencyFromMSIRange>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e3c9      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003756:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800375c:	f043 0308 	orr.w	r3, r3, #8
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4977      	ldr	r1, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003774:	4b75      	ldr	r3, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	4972      	ldr	r1, [pc, #456]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
 8003788:	e025      	b.n	80037d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378a:	4b70      	ldr	r3, [pc, #448]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6f      	ldr	r2, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	496a      	ldr	r1, [pc, #424]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a8:	4b68      	ldr	r3, [pc, #416]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4965      	ldr	r1, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fd3a 	bl	8004240 <RCC_SetFlashLatencyFromMSIRange>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e389      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d6:	f000 fc6f 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	495a      	ldr	r1, [pc, #360]	; (8003950 <HAL_RCC_OscConfig+0x29c>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_RCC_OscConfig+0x2a0>)
 80037f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037f6:	4b58      	ldr	r3, [pc, #352]	; (8003958 <HAL_RCC_OscConfig+0x2a4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fad0 	bl	8001da0 <HAL_InitTick>
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d052      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	e36d      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d032      	beq.n	800387c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003816:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a4c      	ldr	r2, [pc, #304]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003822:	f7fe fb0d 	bl	8001e40 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800382a:	f7fe fb09 	bl	8001e40 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e356      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800383c:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003848:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3f      	ldr	r2, [pc, #252]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800384e:	f043 0308 	orr.w	r3, r3, #8
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	493a      	ldr	r1, [pc, #232]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	4935      	ldr	r1, [pc, #212]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
 800387a:	e01a      	b.n	80038b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800387c:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a32      	ldr	r2, [pc, #200]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003888:	f7fe fada 	bl	8001e40 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003890:	f7fe fad6 	bl	8001e40 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e323      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x1dc>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d073      	beq.n	80039a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x21c>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d10e      	bne.n	80038e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d063      	beq.n	80039a4 <HAL_RCC_OscConfig+0x2f0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d15f      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e300      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x24c>
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x298>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0x288>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x270>
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0x288>
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCC_OscConfig+0x298>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a05      	ldr	r2, [pc, #20]	; (800394c <HAL_RCC_OscConfig+0x298>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fa7c 	bl	8001e40 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394a:	e010      	b.n	800396e <HAL_RCC_OscConfig+0x2ba>
 800394c:	40021000 	.word	0x40021000
 8003950:	080096b8 	.word	0x080096b8
 8003954:	20000004 	.word	0x20000004
 8003958:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800395c:	f7fe fa70 	bl	8001e40 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e2bd      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396e:	4baf      	ldr	r3, [pc, #700]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x2a8>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fa60 	bl	8001e40 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe fa5c 	bl	8001e40 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e2a9      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003996:	4ba5      	ldr	r3, [pc, #660]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x2d0>
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d060      	beq.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_OscConfig+0x310>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d116      	bne.n	80039f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c4:	4b99      	ldr	r3, [pc, #612]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_OscConfig+0x328>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e286      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b93      	ldr	r3, [pc, #588]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	4990      	ldr	r1, [pc, #576]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f0:	e040      	b.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d023      	beq.n	8003a42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fa:	4b8c      	ldr	r3, [pc, #560]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a8b      	ldr	r2, [pc, #556]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe fa1b 	bl	8001e40 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fe fa17 	bl	8001e40 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e264      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a20:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	497c      	ldr	r1, [pc, #496]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e018      	b.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a42:	4b7a      	ldr	r3, [pc, #488]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a79      	ldr	r2, [pc, #484]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fe f9f7 	bl	8001e40 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fe f9f3 	bl	8001e40 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e240      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a68:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d03c      	beq.n	8003afa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01c      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	4a67      	ldr	r2, [pc, #412]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fe f9d2 	bl	8001e40 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fe f9ce 	bl	8001e40 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e21b      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ab2:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ef      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x3ec>
 8003ac0:	e01b      	b.n	8003afa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac2:	4b5a      	ldr	r3, [pc, #360]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fe f9b5 	bl	8001e40 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ada:	f7fe f9b1 	bl	8001e40 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1fe      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aec:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1ef      	bne.n	8003ada <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80a6 	beq.w	8003c54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b0c:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b18:	4b44      	ldr	r3, [pc, #272]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	4a43      	ldr	r2, [pc, #268]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6593      	str	r3, [r2, #88]	; 0x58
 8003b24:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b30:	2301      	movs	r3, #1
 8003b32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b34:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <HAL_RCC_OscConfig+0x57c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d118      	bne.n	8003b72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b40:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCC_OscConfig+0x57c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a3a      	ldr	r2, [pc, #232]	; (8003c30 <HAL_RCC_OscConfig+0x57c>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4c:	f7fe f978 	bl	8001e40 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe f974 	bl	8001e40 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e1c1      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b66:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <HAL_RCC_OscConfig+0x57c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4d8>
 8003b7a:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b8a:	e024      	b.n	8003bd6 <HAL_RCC_OscConfig+0x522>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d110      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x502>
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x522>
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fe f92f 	bl	8001e40 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe f92b 	bl	8001e40 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e176      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_OscConfig+0x578>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ed      	beq.n	8003be6 <HAL_RCC_OscConfig+0x532>
 8003c0a:	e01a      	b.n	8003c42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fe f918 	bl	8001e40 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c12:	e00f      	b.n	8003c34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fe f914 	bl	8001e40 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d906      	bls.n	8003c34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e15f      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c34:	4baa      	ldr	r3, [pc, #680]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e8      	bne.n	8003c14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4ba5      	ldr	r3, [pc, #660]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	4aa4      	ldr	r2, [pc, #656]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03c      	beq.n	8003cda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c68:	4b9d      	ldr	r3, [pc, #628]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6e:	4a9c      	ldr	r2, [pc, #624]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fe f8e2 	bl	8001e40 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c80:	f7fe f8de 	bl	8001e40 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e12b      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c92:	4b93      	ldr	r3, [pc, #588]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <HAL_RCC_OscConfig+0x5cc>
 8003ca0:	e01b      	b.n	8003cda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ca2:	4b8f      	ldr	r3, [pc, #572]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca8:	4a8d      	ldr	r2, [pc, #564]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fe f8c5 	bl	8001e40 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cba:	f7fe f8c1 	bl	8001e40 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e10e      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ccc:	4b84      	ldr	r3, [pc, #528]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ef      	bne.n	8003cba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8102 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f040 80c5 	bne.w	8003e78 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cee:	4b7c      	ldr	r3, [pc, #496]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0203 	and.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d12c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d123      	bne.n	8003d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d11b      	bne.n	8003d5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d113      	bne.n	8003d5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	3b01      	subs	r3, #1
 8003d42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d109      	bne.n	8003d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d067      	beq.n	8003e2c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d062      	beq.n	8003e28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d62:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0bb      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5a      	ldr	r2, [pc, #360]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d7e:	f7fe f85f 	bl	8001e40 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fe f85b 	bl	8001e40 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0a8      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d98:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da4:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <HAL_RCC_OscConfig+0x830>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003db4:	3a01      	subs	r2, #1
 8003db6:	0112      	lsls	r2, r2, #4
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dbe:	0212      	lsls	r2, r2, #8
 8003dc0:	4311      	orrs	r1, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dc6:	0852      	lsrs	r2, r2, #1
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	0552      	lsls	r2, r2, #21
 8003dcc:	4311      	orrs	r1, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dd2:	0852      	lsrs	r2, r2, #1
 8003dd4:	3a01      	subs	r2, #1
 8003dd6:	0652      	lsls	r2, r2, #25
 8003dd8:	4311      	orrs	r1, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dde:	06d2      	lsls	r2, r2, #27
 8003de0:	430a      	orrs	r2, r1
 8003de2:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003de8:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df4:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e00:	f7fe f81e 	bl	8001e40 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe f81a 	bl	8001e40 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e067      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e26:	e05f      	b.n	8003ee8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e05e      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e44:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e50:	f7fd fff6 	bl	8001e40 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd fff2 	bl	8001e40 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e03f      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x7a4>
 8003e76:	e037      	b.n	8003ee8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d02d      	beq.n	8003eda <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e88:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003e9c:	f023 0303 	bic.w	r3, r3, #3
 8003ea0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003ea8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd ffc5 	bl	8001e40 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fd ffc1 	bl	8001e40 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e00e      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <HAL_RCC_OscConfig+0x82c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x806>
 8003ed8:	e006      	b.n	8003ee8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e005      	b.n	8003eea <HAL_RCC_OscConfig+0x836>
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0c8      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	4961      	ldr	r1, [pc, #388]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b0      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d04c      	beq.n	8003fde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4c:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d121      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e09e      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e092      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e086      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8c:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e07e      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 0203 	bic.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	493f      	ldr	r1, [pc, #252]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fae:	f7fd ff47 	bl	8001e40 <HAL_GetTick>
 8003fb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb6:	f7fd ff43 	bl	8001e40 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e066      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 020c 	and.w	r2, r3, #12
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d1eb      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	492c      	ldr	r1, [pc, #176]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d210      	bcs.n	800402c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0207 	bic.w	r2, r3, #7
 8004012:	4924      	ldr	r1, [pc, #144]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e036      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4918      	ldr	r1, [pc, #96]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4910      	ldr	r1, [pc, #64]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800406a:	f000 f825 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 800406e:	4602      	mov	r2, r0
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	490c      	ldr	r1, [pc, #48]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	5ccb      	ldrb	r3, [r1, r3]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fe86 	bl	8001da0 <HAL_InitTick>
 8004094:	4603      	mov	r3, r0
 8004096:	72fb      	strb	r3, [r7, #11]

  return status;
 8004098:	7afb      	ldrb	r3, [r7, #11]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40021000 	.word	0x40021000
 80040ac:	080096b8 	.word	0x080096b8
 80040b0:	20000004 	.word	0x20000004
 80040b4:	20000008 	.word	0x20000008

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d0:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x34>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d121      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d11e      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	e005      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004114:	4a2b      	ldr	r2, [pc, #172]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d102      	bne.n	8004136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e004      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d101      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800413c:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_RCC_GetSysClockFreq+0x114>)
 800413e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d134      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0xa6>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d003      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0xac>
 800415c:	e005      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004160:	617b      	str	r3, [r7, #20]
      break;
 8004162:	e005      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004166:	617b      	str	r3, [r7, #20]
      break;
 8004168:	e002      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	617b      	str	r3, [r7, #20]
      break;
 800416e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	3301      	adds	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	fb02 f203 	mul.w	r2, r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	0e5b      	lsrs	r3, r3, #25
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	3301      	adds	r3, #1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041b0:	69bb      	ldr	r3, [r7, #24]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	080096d0 	.word	0x080096d0
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200

080041d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000004 	.word	0x20000004

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041ec:	f7ff fff0 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	080096c8 	.word	0x080096c8

08004214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004218:	f7ff ffda 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0adb      	lsrs	r3, r3, #11
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_RCC_GetPCLK2Freq+0x28>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	080096c8 	.word	0x080096c8

08004240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800424c:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004258:	f7ff f9c8 	bl	80035ec <HAL_PWREx_GetVoltageRange>
 800425c:	6178      	str	r0, [r7, #20]
 800425e:	e014      	b.n	800428a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6593      	str	r3, [r2, #88]	; 0x58
 800426c:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004278:	f7ff f9b8 	bl	80035ec <HAL_PWREx_GetVoltageRange>
 800427c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004290:	d10b      	bne.n	80042aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d919      	bls.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2ba0      	cmp	r3, #160	; 0xa0
 800429c:	d902      	bls.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800429e:	2302      	movs	r3, #2
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e013      	b.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a4:	2301      	movs	r3, #1
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e010      	b.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d902      	bls.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042b0:	2303      	movs	r3, #3
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	e00a      	b.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b80      	cmp	r3, #128	; 0x80
 80042ba:	d102      	bne.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042bc:	2302      	movs	r3, #2
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e004      	b.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b70      	cmp	r3, #112	; 0x70
 80042c6:	d101      	bne.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042c8:	2301      	movs	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 0207 	bic.w	r2, r3, #7
 80042d4:	4909      	ldr	r1, [pc, #36]	; (80042fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042dc:	4b07      	ldr	r3, [pc, #28]	; (80042fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d001      	beq.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40022000 	.word	0x40022000

08004300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004308:	2300      	movs	r3, #0
 800430a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800430c:	2300      	movs	r3, #0
 800430e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004318:	2b00      	cmp	r3, #0
 800431a:	d031      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004324:	d01a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004326:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800432a:	d814      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004334:	d10f      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004336:	4bac      	ldr	r3, [pc, #688]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4aab      	ldr	r2, [pc, #684]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004340:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004342:	e00c      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f9dc 	bl	8004708 <RCCEx_PLLSAI1_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	74fb      	strb	r3, [r7, #19]
      break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800435c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004364:	4ba0      	ldr	r3, [pc, #640]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	499d      	ldr	r1, [pc, #628]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8099 	beq.w	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004392:	4b95      	ldr	r3, [pc, #596]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a8:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	4a8e      	ldr	r2, [pc, #568]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6593      	str	r3, [r2, #88]	; 0x58
 80043b4:	4b8c      	ldr	r3, [pc, #560]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c0:	2301      	movs	r3, #1
 80043c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c4:	4b89      	ldr	r3, [pc, #548]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a88      	ldr	r2, [pc, #544]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80043ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d0:	f7fd fd36 	bl	8001e40 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d6:	e009      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d8:	f7fd fd32 	bl	8001e40 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d902      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ea:	e005      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ec:	4b7f      	ldr	r3, [pc, #508]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ef      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d155      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043fe:	4b7a      	ldr	r3, [pc, #488]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	429a      	cmp	r2, r3
 8004418:	d019      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800441a:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004424:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	4a6e      	ldr	r2, [pc, #440]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800442e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004436:	4b6c      	ldr	r3, [pc, #432]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	4a6a      	ldr	r2, [pc, #424]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004446:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d016      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fcf2 	bl	8001e40 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445e:	e00b      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fd fcee 	bl	8001e40 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d902      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	74fb      	strb	r3, [r7, #19]
            break;
 8004476:	e006      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004478:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ec      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448c:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	4953      	ldr	r1, [pc, #332]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	74bb      	strb	r3, [r7, #18]
 80044a8:	e001      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ae:	7c7b      	ldrb	r3, [r7, #17]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b4:	4b4c      	ldr	r3, [pc, #304]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044cc:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 0203 	bic.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4943      	ldr	r1, [pc, #268]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ee:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f023 020c 	bic.w	r2, r3, #12
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	493a      	ldr	r1, [pc, #232]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004510:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	4932      	ldr	r1, [pc, #200]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004532:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	4929      	ldr	r1, [pc, #164]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004554:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	4921      	ldr	r1, [pc, #132]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004576:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4918      	ldr	r1, [pc, #96]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4910      	ldr	r1, [pc, #64]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02c      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d8:	d10a      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045da:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e4:	60d3      	str	r3, [r2, #12]
 80045e6:	e015      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f8:	d10c      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f881 	bl	8004708 <RCCEx_PLLSAI1_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d028      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004620:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	492d      	ldr	r1, [pc, #180]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463e:	d106      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464a:	60d3      	str	r3, [r2, #12]
 800464c:	e011      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004656:	d10c      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	2101      	movs	r1, #1
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f852 	bl	8004708 <RCCEx_PLLSAI1_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01c      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	4915      	ldr	r1, [pc, #84]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f82f 	bl	8004708 <RCCEx_PLLSAI1_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	4904      	ldr	r1, [pc, #16]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046da:	7cbb      	ldrb	r3, [r7, #18]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000

080046e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a04      	ldr	r2, [pc, #16]	; (8004704 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	6013      	str	r3, [r2, #0]
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000

08004708 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004716:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004722:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0203 	and.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d10d      	bne.n	800474e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
       ||
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800473a:	4b6b      	ldr	r3, [pc, #428]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
       ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d047      	beq.n	80047de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	e044      	b.n	80047de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d018      	beq.n	800478e <RCCEx_PLLSAI1_Config+0x86>
 800475c:	2b03      	cmp	r3, #3
 800475e:	d825      	bhi.n	80047ac <RCCEx_PLLSAI1_Config+0xa4>
 8004760:	2b01      	cmp	r3, #1
 8004762:	d002      	beq.n	800476a <RCCEx_PLLSAI1_Config+0x62>
 8004764:	2b02      	cmp	r3, #2
 8004766:	d009      	beq.n	800477c <RCCEx_PLLSAI1_Config+0x74>
 8004768:	e020      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800476a:	4b5f      	ldr	r3, [pc, #380]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800477a:	e01a      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800477c:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d116      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478c:	e013      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800478e:	4b56      	ldr	r3, [pc, #344]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10f      	bne.n	80047ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800479a:	4b53      	ldr	r3, [pc, #332]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047aa:	e006      	b.n	80047ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
      break;
 80047b0:	e004      	b.n	80047bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047b2:	bf00      	nop
 80047b4:	e002      	b.n	80047bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047b6:	bf00      	nop
 80047b8:	e000      	b.n	80047bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10d      	bne.n	80047de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047c2:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	430b      	orrs	r3, r1
 80047d8:	4943      	ldr	r1, [pc, #268]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d17c      	bne.n	80048de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047e4:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f0:	f7fd fb26 	bl	8001e40 <HAL_GetTick>
 80047f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f6:	e009      	b.n	800480c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047f8:	f7fd fb22 	bl	8001e40 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d902      	bls.n	800480c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	73fb      	strb	r3, [r7, #15]
        break;
 800480a:	e005      	b.n	8004818 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ef      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d15f      	bne.n	80048de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d110      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004824:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800482c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6892      	ldr	r2, [r2, #8]
 8004834:	0211      	lsls	r1, r2, #8
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68d2      	ldr	r2, [r2, #12]
 800483a:	06d2      	lsls	r2, r2, #27
 800483c:	430a      	orrs	r2, r1
 800483e:	492a      	ldr	r1, [pc, #168]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	610b      	str	r3, [r1, #16]
 8004844:	e027      	b.n	8004896 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d112      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484c:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
 800485c:	0211      	lsls	r1, r2, #8
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6912      	ldr	r2, [r2, #16]
 8004862:	0852      	lsrs	r2, r2, #1
 8004864:	3a01      	subs	r2, #1
 8004866:	0552      	lsls	r2, r2, #21
 8004868:	430a      	orrs	r2, r1
 800486a:	491f      	ldr	r1, [pc, #124]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	610b      	str	r3, [r1, #16]
 8004870:	e011      	b.n	8004896 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800487a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6892      	ldr	r2, [r2, #8]
 8004882:	0211      	lsls	r1, r2, #8
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6952      	ldr	r2, [r2, #20]
 8004888:	0852      	lsrs	r2, r2, #1
 800488a:	3a01      	subs	r2, #1
 800488c:	0652      	lsls	r2, r2, #25
 800488e:	430a      	orrs	r2, r1
 8004890:	4915      	ldr	r1, [pc, #84]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd facd 	bl	8001e40 <HAL_GetTick>
 80048a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a8:	e009      	b.n	80048be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048aa:	f7fd fac9 	bl	8001e40 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d902      	bls.n	80048be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	73fb      	strb	r3, [r7, #15]
          break;
 80048bc:	e005      	b.n	80048ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0ef      	beq.n	80048aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000

080048ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e049      	b.n	8004992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc fd94 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 fcf6 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e049      	b.n	8004a40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f841 	bl	8004a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f000 fc9f 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start+0x24>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e03c      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d109      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x3e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e02f      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIM_PWM_Start+0x58>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e022      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d109      	bne.n	8004ace <HAL_TIM_PWM_Start+0x72>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e015      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x8c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e008      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07e      	b.n	8004c00 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_PWM_Start+0xb6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b10:	e023      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_PWM_Start+0xc6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b20:	e01b      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Start+0xd6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	e013      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b0c      	cmp	r3, #12
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_PWM_Start+0xe6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b40:	e00b      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start+0xf6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b50:	e003      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ff56 	bl	8005a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <HAL_TIM_PWM_Start+0x1ac>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x12a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <HAL_TIM_PWM_Start+0x1b0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x12a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <HAL_TIM_PWM_Start+0x1b4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_PWM_Start+0x12e>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_TIM_PWM_Start+0x130>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_TIM_PWM_Start+0x1ac>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_TIM_PWM_Start+0x162>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIM_PWM_Start+0x162>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <HAL_TIM_PWM_Start+0x1b0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d115      	bne.n	8004bea <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_TIM_PWM_Start+0x1b8>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b06      	cmp	r3, #6
 8004bce:	d015      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x1a0>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d011      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be8:	e008      	b.n	8004bfc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e000      	b.n	8004bfe <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	00010007 	.word	0x00010007

08004c18 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e041      	b.n	8004cb0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f839 	bl	8004cb8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f000 fb5f 	bl	800531c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0208 	bic.w	r2, r2, #8
 8004c6c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0202 	mvn.w	r2, #2
 8004cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fae6 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fad8 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fae9 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0204 	mvn.w	r2, #4
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fabc 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 faae 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fabf 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0208 	mvn.w	r2, #8
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa92 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa84 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fa95 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0210 	mvn.w	r2, #16
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa68 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa5a 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fa6b 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10e      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0201 	mvn.w	r2, #1
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa34 	bl	80052b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d10e      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d107      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fe62 	bl	8005b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	d10e      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fe55 	bl	8005b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa19 	bl	8005308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d10e      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f06f 0220 	mvn.w	r2, #32
 8004efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fe15 	bl	8005b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e0fd      	b.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b14      	cmp	r3, #20
 8004f32:	f200 80f0 	bhi.w	8005116 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004f36:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08005117 	.word	0x08005117
 8004f44:	08005117 	.word	0x08005117
 8004f48:	08005117 	.word	0x08005117
 8004f4c:	08004fd1 	.word	0x08004fd1
 8004f50:	08005117 	.word	0x08005117
 8004f54:	08005117 	.word	0x08005117
 8004f58:	08005117 	.word	0x08005117
 8004f5c:	08005013 	.word	0x08005013
 8004f60:	08005117 	.word	0x08005117
 8004f64:	08005117 	.word	0x08005117
 8004f68:	08005117 	.word	0x08005117
 8004f6c:	08005053 	.word	0x08005053
 8004f70:	08005117 	.word	0x08005117
 8004f74:	08005117 	.word	0x08005117
 8004f78:	08005117 	.word	0x08005117
 8004f7c:	08005095 	.word	0x08005095
 8004f80:	08005117 	.word	0x08005117
 8004f84:	08005117 	.word	0x08005117
 8004f88:	08005117 	.word	0x08005117
 8004f8c:	080050d5 	.word	0x080050d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fa24 	bl	80053e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0208 	orr.w	r2, r2, #8
 8004faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0204 	bic.w	r2, r2, #4
 8004fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6999      	ldr	r1, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	619a      	str	r2, [r3, #24]
      break;
 8004fce:	e0a3      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fa80 	bl	80054dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	619a      	str	r2, [r3, #24]
      break;
 8005010:	e082      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fad9 	bl	80055d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0208 	orr.w	r2, r2, #8
 800502c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0204 	bic.w	r2, r2, #4
 800503c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	61da      	str	r2, [r3, #28]
      break;
 8005050:	e062      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fb31 	bl	80056c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69d9      	ldr	r1, [r3, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	61da      	str	r2, [r3, #28]
      break;
 8005092:	e041      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fb6e 	bl	800577c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0208 	orr.w	r2, r2, #8
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050d2:	e021      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fba6 	bl	800582c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	021a      	lsls	r2, r3, #8
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005114:	e000      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop

0800512c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIM_ConfigClockSource+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e0b5      	b.n	80052b0 <HAL_TIM_ConfigClockSource+0x184>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800516e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005180:	d03e      	beq.n	8005200 <HAL_TIM_ConfigClockSource+0xd4>
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	f200 8087 	bhi.w	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 800518a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518e:	f000 8085 	beq.w	800529c <HAL_TIM_ConfigClockSource+0x170>
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	d87f      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b70      	cmp	r3, #112	; 0x70
 800519a:	d01a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xa6>
 800519c:	2b70      	cmp	r3, #112	; 0x70
 800519e:	d87b      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b60      	cmp	r3, #96	; 0x60
 80051a2:	d050      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x11a>
 80051a4:	2b60      	cmp	r3, #96	; 0x60
 80051a6:	d877      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051a8:	2b50      	cmp	r3, #80	; 0x50
 80051aa:	d03c      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0xfa>
 80051ac:	2b50      	cmp	r3, #80	; 0x50
 80051ae:	d873      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d058      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x13a>
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d86f      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d064      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d86b      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d060      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d867      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d05c      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d05a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051d0:	e062      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6899      	ldr	r1, [r3, #8]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f000 fbf7 	bl	80059d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	609a      	str	r2, [r3, #8]
      break;
 80051fe:	e04e      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6899      	ldr	r1, [r3, #8]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f000 fbe0 	bl	80059d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005222:	609a      	str	r2, [r3, #8]
      break;
 8005224:	e03b      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6859      	ldr	r1, [r3, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	461a      	mov	r2, r3
 8005234:	f000 fb54 	bl	80058e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2150      	movs	r1, #80	; 0x50
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fbad 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005244:	e02b      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fb73 	bl	800593e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2160      	movs	r1, #96	; 0x60
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fb9d 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005264:	e01b      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	461a      	mov	r2, r3
 8005274:	f000 fb34 	bl	80058e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb8d 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005284:	e00b      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f000 fb84 	bl	800599e <TIM_ITRx_SetConfig>
        break;
 8005296:	e002      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800529c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <TIM_Base_SetConfig+0xbc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x20>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <TIM_Base_SetConfig+0xbc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0x52>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0x52>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <TIM_Base_SetConfig+0xc0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0x52>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <TIM_Base_SetConfig+0xc4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <TIM_Base_SetConfig+0xbc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0xa0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0b      	ldr	r2, [pc, #44]	; (80053dc <TIM_Base_SetConfig+0xc0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0xa0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <TIM_Base_SetConfig+0xc4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400

080053e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f023 0201 	bic.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 0302 	bic.w	r3, r3, #2
 8005430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <TIM_OC1_SetConfig+0xec>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_OC1_SetConfig+0x70>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <TIM_OC1_SetConfig+0xf0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC1_SetConfig+0x70>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a22      	ldr	r2, [pc, #136]	; (80054d8 <TIM_OC1_SetConfig+0xf4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10c      	bne.n	800546e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0308 	bic.w	r3, r3, #8
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <TIM_OC1_SetConfig+0xec>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_OC1_SetConfig+0xa2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <TIM_OC1_SetConfig+0xf0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <TIM_OC1_SetConfig+0xf4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400

080054dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0210 	bic.w	r2, r3, #16
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0320 	bic.w	r3, r3, #32
 800552a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <TIM_OC2_SetConfig+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10d      	bne.n	800555c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <TIM_OC2_SetConfig+0xe8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_OC2_SetConfig+0x98>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <TIM_OC2_SetConfig+0xec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC2_SetConfig+0x98>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <TIM_OC2_SetConfig+0xf0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d113      	bne.n	800559c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800557a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400

080055d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <TIM_OC3_SetConfig+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10d      	bne.n	800564e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800564c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <TIM_OC3_SetConfig+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_OC3_SetConfig+0x96>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <TIM_OC3_SetConfig+0xe8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC3_SetConfig+0x96>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TIM_OC3_SetConfig+0xec>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d113      	bne.n	800568e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400

080056c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800570e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC4_SetConfig+0xb0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_OC4_SetConfig+0x74>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <TIM_OC4_SetConfig+0xb4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC4_SetConfig+0x74>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <TIM_OC4_SetConfig+0xb8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d109      	bne.n	8005748 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400

0800577c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	041b      	lsls	r3, r3, #16
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <TIM_OC5_SetConfig+0xa4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_OC5_SetConfig+0x6a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a12      	ldr	r2, [pc, #72]	; (8005824 <TIM_OC5_SetConfig+0xa8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC5_SetConfig+0x6a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a11      	ldr	r2, [pc, #68]	; (8005828 <TIM_OC5_SetConfig+0xac>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d109      	bne.n	80057fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400

0800582c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a14      	ldr	r2, [pc, #80]	; (80058d4 <TIM_OC6_SetConfig+0xa8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_OC6_SetConfig+0x6c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <TIM_OC6_SetConfig+0xac>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_OC6_SetConfig+0x6c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a12      	ldr	r2, [pc, #72]	; (80058dc <TIM_OC6_SetConfig+0xb0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d109      	bne.n	80058ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	029b      	lsls	r3, r3, #10
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400

080058e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800590a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f023 030a 	bic.w	r3, r3, #10
 800591c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0210 	bic.w	r2, r3, #16
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	031b      	lsls	r3, r3, #12
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 0307 	orr.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2201      	movs	r2, #1
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e04f      	b.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d004      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10c      	bne.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40014000 	.word	0x40014000

08005b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e040      	b.n	8005bfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fb fccc 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2224      	movs	r2, #36	; 0x24
 8005b94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8c0 	bl	8005d2c <UART_SetConfig>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e022      	b.n	8005bfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fac0 	bl	8006144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb47 	bl	8006288 <UART_CheckIdleState>
 8005bfa:	4603      	mov	r3, r0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	f040 8082 	bne.w	8005d22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_UART_Transmit+0x26>
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e07a      	b.n	8005d24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_UART_Transmit+0x38>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e073      	b.n	8005d24 <HAL_UART_Transmit+0x120>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2221      	movs	r2, #33	; 0x21
 8005c50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c52:	f7fc f8f5 	bl	8001e40 <HAL_GetTick>
 8005c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c70:	d108      	bne.n	8005c84 <HAL_UART_Transmit+0x80>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	e003      	b.n	8005c8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c94:	e02d      	b.n	8005cf2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fb3a 	bl	800631a <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e039      	b.n	8005d24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cc2:	b292      	uxth	r2, r2
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	3302      	adds	r3, #2
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	e008      	b.n	8005ce0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1cb      	bne.n	8005c96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2140      	movs	r1, #64	; 0x40
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fb06 	bl	800631a <UART_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e005      	b.n	8005d24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e000      	b.n	8005d24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	b5b0      	push	{r4, r5, r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4baf      	ldr	r3, [pc, #700]	; (8006014 <UART_SetConfig+0x2e8>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4aa4      	ldr	r2, [pc, #656]	; (8006018 <UART_SetConfig+0x2ec>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a9b      	ldr	r2, [pc, #620]	; (800601c <UART_SetConfig+0x2f0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d121      	bne.n	8005df6 <UART_SetConfig+0xca>
 8005db2:	4b9b      	ldr	r3, [pc, #620]	; (8006020 <UART_SetConfig+0x2f4>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d817      	bhi.n	8005df0 <UART_SetConfig+0xc4>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x9c>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	08005ddf 	.word	0x08005ddf
 8005dd4:	08005deb 	.word	0x08005deb
 8005dd8:	2301      	movs	r3, #1
 8005dda:	76fb      	strb	r3, [r7, #27]
 8005ddc:	e070      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005dde:	2302      	movs	r3, #2
 8005de0:	76fb      	strb	r3, [r7, #27]
 8005de2:	e06d      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005de4:	2304      	movs	r3, #4
 8005de6:	76fb      	strb	r3, [r7, #27]
 8005de8:	e06a      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005dea:	2308      	movs	r3, #8
 8005dec:	76fb      	strb	r3, [r7, #27]
 8005dee:	e067      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005df0:	2310      	movs	r3, #16
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e064      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a8a      	ldr	r2, [pc, #552]	; (8006024 <UART_SetConfig+0x2f8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d132      	bne.n	8005e66 <UART_SetConfig+0x13a>
 8005e00:	4b87      	ldr	r3, [pc, #540]	; (8006020 <UART_SetConfig+0x2f4>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f003 030c 	and.w	r3, r3, #12
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d828      	bhi.n	8005e60 <UART_SetConfig+0x134>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0xe8>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e49 	.word	0x08005e49
 8005e18:	08005e61 	.word	0x08005e61
 8005e1c:	08005e61 	.word	0x08005e61
 8005e20:	08005e61 	.word	0x08005e61
 8005e24:	08005e55 	.word	0x08005e55
 8005e28:	08005e61 	.word	0x08005e61
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005e61 	.word	0x08005e61
 8005e34:	08005e4f 	.word	0x08005e4f
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e61 	.word	0x08005e61
 8005e44:	08005e5b 	.word	0x08005e5b
 8005e48:	2300      	movs	r3, #0
 8005e4a:	76fb      	strb	r3, [r7, #27]
 8005e4c:	e038      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	76fb      	strb	r3, [r7, #27]
 8005e52:	e035      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005e54:	2304      	movs	r3, #4
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e032      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	76fb      	strb	r3, [r7, #27]
 8005e5e:	e02f      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005e60:	2310      	movs	r3, #16
 8005e62:	76fb      	strb	r3, [r7, #27]
 8005e64:	e02c      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6b      	ldr	r2, [pc, #428]	; (8006018 <UART_SetConfig+0x2ec>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d125      	bne.n	8005ebc <UART_SetConfig+0x190>
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <UART_SetConfig+0x2f4>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7e:	d017      	beq.n	8005eb0 <UART_SetConfig+0x184>
 8005e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e84:	d817      	bhi.n	8005eb6 <UART_SetConfig+0x18a>
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d00b      	beq.n	8005ea4 <UART_SetConfig+0x178>
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e90:	d811      	bhi.n	8005eb6 <UART_SetConfig+0x18a>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <UART_SetConfig+0x172>
 8005e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9a:	d006      	beq.n	8005eaa <UART_SetConfig+0x17e>
 8005e9c:	e00b      	b.n	8005eb6 <UART_SetConfig+0x18a>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	76fb      	strb	r3, [r7, #27]
 8005ea2:	e00d      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	76fb      	strb	r3, [r7, #27]
 8005ea8:	e00a      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005eaa:	2304      	movs	r3, #4
 8005eac:	76fb      	strb	r3, [r7, #27]
 8005eae:	e007      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	76fb      	strb	r3, [r7, #27]
 8005eb4:	e004      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005eb6:	2310      	movs	r3, #16
 8005eb8:	76fb      	strb	r3, [r7, #27]
 8005eba:	e001      	b.n	8005ec0 <UART_SetConfig+0x194>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a54      	ldr	r2, [pc, #336]	; (8006018 <UART_SetConfig+0x2ec>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d173      	bne.n	8005fb2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eca:	7efb      	ldrb	r3, [r7, #27]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d824      	bhi.n	8005f1a <UART_SetConfig+0x1ee>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <UART_SetConfig+0x1ac>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f0b 	.word	0x08005f0b
 8005eec:	08005f1b 	.word	0x08005f1b
 8005ef0:	08005f1b 	.word	0x08005f1b
 8005ef4:	08005f1b 	.word	0x08005f1b
 8005ef8:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005efc:	f7fe f974 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005f00:	6178      	str	r0, [r7, #20]
        break;
 8005f02:	e00f      	b.n	8005f24 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b48      	ldr	r3, [pc, #288]	; (8006028 <UART_SetConfig+0x2fc>)
 8005f06:	617b      	str	r3, [r7, #20]
        break;
 8005f08:	e00c      	b.n	8005f24 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fe f8d5 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8005f0e:	6178      	str	r0, [r7, #20]
        break;
 8005f10:	e008      	b.n	8005f24 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	617b      	str	r3, [r7, #20]
        break;
 8005f18:	e004      	b.n	8005f24 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	76bb      	strb	r3, [r7, #26]
        break;
 8005f22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80fe 	beq.w	8006128 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d305      	bcc.n	8005f48 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d902      	bls.n	8005f4e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	76bb      	strb	r3, [r7, #26]
 8005f4c:	e0ec      	b.n	8006128 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	020b      	lsls	r3, r1, #8
 8005f60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f64:	0202      	lsls	r2, r0, #8
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	6849      	ldr	r1, [r1, #4]
 8005f6a:	0849      	lsrs	r1, r1, #1
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	1814      	adds	r4, r2, r0
 8005f74:	eb43 0501 	adc.w	r5, r3, r1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	4620      	mov	r0, r4
 8005f84:	4629      	mov	r1, r5
 8005f86:	f7fa fe0f 	bl	8000ba8 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4613      	mov	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f98:	d308      	bcc.n	8005fac <UART_SetConfig+0x280>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa0:	d204      	bcs.n	8005fac <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e0bd      	b.n	8006128 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	76bb      	strb	r3, [r7, #26]
 8005fb0:	e0ba      	b.n	8006128 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fba:	d168      	bne.n	800608e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005fbc:	7efb      	ldrb	r3, [r7, #27]
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d834      	bhi.n	800602c <UART_SetConfig+0x300>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <UART_SetConfig+0x29c>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	0800602d 	.word	0x0800602d
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	0800602d 	.word	0x0800602d
 8005fe0:	0800602d 	.word	0x0800602d
 8005fe4:	0800602d 	.word	0x0800602d
 8005fe8:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe f8fc 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005ff0:	6178      	str	r0, [r7, #20]
        break;
 8005ff2:	e020      	b.n	8006036 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff4:	f7fe f90e 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8005ff8:	6178      	str	r0, [r7, #20]
        break;
 8005ffa:	e01c      	b.n	8006036 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <UART_SetConfig+0x2fc>)
 8005ffe:	617b      	str	r3, [r7, #20]
        break;
 8006000:	e019      	b.n	8006036 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006002:	f7fe f859 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8006006:	6178      	str	r0, [r7, #20]
        break;
 8006008:	e015      	b.n	8006036 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	617b      	str	r3, [r7, #20]
        break;
 8006010:	e011      	b.n	8006036 <UART_SetConfig+0x30a>
 8006012:	bf00      	nop
 8006014:	efff69f3 	.word	0xefff69f3
 8006018:	40008000 	.word	0x40008000
 800601c:	40013800 	.word	0x40013800
 8006020:	40021000 	.word	0x40021000
 8006024:	40004400 	.word	0x40004400
 8006028:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	76bb      	strb	r3, [r7, #26]
        break;
 8006034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d075      	beq.n	8006128 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	005a      	lsls	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	441a      	add	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	b29b      	uxth	r3, r3
 8006052:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b0f      	cmp	r3, #15
 8006058:	d916      	bls.n	8006088 <UART_SetConfig+0x35c>
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006060:	d212      	bcs.n	8006088 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f023 030f 	bic.w	r3, r3, #15
 800606a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	b29a      	uxth	r2, r3
 8006078:	89fb      	ldrh	r3, [r7, #14]
 800607a:	4313      	orrs	r3, r2
 800607c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	89fa      	ldrh	r2, [r7, #14]
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	e04f      	b.n	8006128 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	76bb      	strb	r3, [r7, #26]
 800608c:	e04c      	b.n	8006128 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800608e:	7efb      	ldrb	r3, [r7, #27]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d828      	bhi.n	80060e6 <UART_SetConfig+0x3ba>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x370>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	080060e7 	.word	0x080060e7
 80060ac:	080060d7 	.word	0x080060d7
 80060b0:	080060e7 	.word	0x080060e7
 80060b4:	080060e7 	.word	0x080060e7
 80060b8:	080060e7 	.word	0x080060e7
 80060bc:	080060df 	.word	0x080060df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c0:	f7fe f892 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 80060c4:	6178      	str	r0, [r7, #20]
        break;
 80060c6:	e013      	b.n	80060f0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c8:	f7fe f8a4 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 80060cc:	6178      	str	r0, [r7, #20]
        break;
 80060ce:	e00f      	b.n	80060f0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <UART_SetConfig+0x414>)
 80060d2:	617b      	str	r3, [r7, #20]
        break;
 80060d4:	e00c      	b.n	80060f0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fd ffef 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 80060da:	6178      	str	r0, [r7, #20]
        break;
 80060dc:	e008      	b.n	80060f0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	617b      	str	r3, [r7, #20]
        break;
 80060e4:	e004      	b.n	80060f0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	76bb      	strb	r3, [r7, #26]
        break;
 80060ee:	bf00      	nop
    }

    if (pclk != 0U)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d018      	beq.n	8006128 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	085a      	lsrs	r2, r3, #1
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	441a      	add	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	b29b      	uxth	r3, r3
 800610a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b0f      	cmp	r3, #15
 8006110:	d908      	bls.n	8006124 <UART_SetConfig+0x3f8>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d204      	bcs.n	8006124 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	e001      	b.n	8006128 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006134:	7ebb      	ldrb	r3, [r7, #26]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bdb0      	pop	{r4, r5, r7, pc}
 800613e:	bf00      	nop
 8006140:	00f42400 	.word	0x00f42400

08006144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01a      	beq.n	800625a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d10a      	bne.n	800625a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006298:	f7fb fdd2 	bl	8001e40 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d10e      	bne.n	80062ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f82d 	bl	800631a <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e023      	b.n	8006312 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d10e      	bne.n	80062f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f817 	bl	800631a <UART_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e00d      	b.n	8006312 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632a:	e05e      	b.n	80063ea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d05a      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006334:	f7fb fd84 	bl	8001e40 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	429a      	cmp	r2, r3
 8006342:	d302      	bcc.n	800634a <UART_WaitOnFlagUntilTimeout+0x30>
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d11b      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006358:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e043      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d02c      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639e:	d124      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e00f      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	429a      	cmp	r2, r3
 8006406:	d091      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000010 	.word	0x20000010

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4d0d      	ldr	r5, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2600      	movs	r6, #0
 800642c:	42a6      	cmp	r6, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4d0b      	ldr	r5, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f003 f92e 	bl	8009694 <_init>
 8006438:	1b64      	subs	r4, r4, r5
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2600      	movs	r6, #0
 800643e:	42a6      	cmp	r6, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f855 3b04 	ldr.w	r3, [r5], #4
 8006448:	4798      	blx	r3
 800644a:	3601      	adds	r6, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006452:	4798      	blx	r3
 8006454:	3601      	adds	r6, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	08009b60 	.word	0x08009b60
 800645c:	08009b60 	.word	0x08009b60
 8006460:	08009b60 	.word	0x08009b60
 8006464:	08009b64 	.word	0x08009b64

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <__cvt>:
 8006478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	ec55 4b10 	vmov	r4, r5, d0
 8006480:	2d00      	cmp	r5, #0
 8006482:	460e      	mov	r6, r1
 8006484:	4619      	mov	r1, r3
 8006486:	462b      	mov	r3, r5
 8006488:	bfbb      	ittet	lt
 800648a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800648e:	461d      	movlt	r5, r3
 8006490:	2300      	movge	r3, #0
 8006492:	232d      	movlt	r3, #45	; 0x2d
 8006494:	700b      	strb	r3, [r1, #0]
 8006496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006498:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800649c:	4691      	mov	r9, r2
 800649e:	f023 0820 	bic.w	r8, r3, #32
 80064a2:	bfbc      	itt	lt
 80064a4:	4622      	movlt	r2, r4
 80064a6:	4614      	movlt	r4, r2
 80064a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064ac:	d005      	beq.n	80064ba <__cvt+0x42>
 80064ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064b2:	d100      	bne.n	80064b6 <__cvt+0x3e>
 80064b4:	3601      	adds	r6, #1
 80064b6:	2102      	movs	r1, #2
 80064b8:	e000      	b.n	80064bc <__cvt+0x44>
 80064ba:	2103      	movs	r1, #3
 80064bc:	ab03      	add	r3, sp, #12
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	ab02      	add	r3, sp, #8
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	ec45 4b10 	vmov	d0, r4, r5
 80064c8:	4653      	mov	r3, sl
 80064ca:	4632      	mov	r2, r6
 80064cc:	f000 fcec 	bl	8006ea8 <_dtoa_r>
 80064d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064d4:	4607      	mov	r7, r0
 80064d6:	d102      	bne.n	80064de <__cvt+0x66>
 80064d8:	f019 0f01 	tst.w	r9, #1
 80064dc:	d022      	beq.n	8006524 <__cvt+0xac>
 80064de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064e2:	eb07 0906 	add.w	r9, r7, r6
 80064e6:	d110      	bne.n	800650a <__cvt+0x92>
 80064e8:	783b      	ldrb	r3, [r7, #0]
 80064ea:	2b30      	cmp	r3, #48	; 0x30
 80064ec:	d10a      	bne.n	8006504 <__cvt+0x8c>
 80064ee:	2200      	movs	r2, #0
 80064f0:	2300      	movs	r3, #0
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7fa fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80064fa:	b918      	cbnz	r0, 8006504 <__cvt+0x8c>
 80064fc:	f1c6 0601 	rsb	r6, r6, #1
 8006500:	f8ca 6000 	str.w	r6, [sl]
 8006504:	f8da 3000 	ldr.w	r3, [sl]
 8006508:	4499      	add	r9, r3
 800650a:	2200      	movs	r2, #0
 800650c:	2300      	movs	r3, #0
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f7fa fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006516:	b108      	cbz	r0, 800651c <__cvt+0xa4>
 8006518:	f8cd 900c 	str.w	r9, [sp, #12]
 800651c:	2230      	movs	r2, #48	; 0x30
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	454b      	cmp	r3, r9
 8006522:	d307      	bcc.n	8006534 <__cvt+0xbc>
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006528:	1bdb      	subs	r3, r3, r7
 800652a:	4638      	mov	r0, r7
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	b004      	add	sp, #16
 8006530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	9103      	str	r1, [sp, #12]
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e7f0      	b.n	800651e <__cvt+0xa6>

0800653c <__exponent>:
 800653c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800653e:	4603      	mov	r3, r0
 8006540:	2900      	cmp	r1, #0
 8006542:	bfb8      	it	lt
 8006544:	4249      	neglt	r1, r1
 8006546:	f803 2b02 	strb.w	r2, [r3], #2
 800654a:	bfb4      	ite	lt
 800654c:	222d      	movlt	r2, #45	; 0x2d
 800654e:	222b      	movge	r2, #43	; 0x2b
 8006550:	2909      	cmp	r1, #9
 8006552:	7042      	strb	r2, [r0, #1]
 8006554:	dd2a      	ble.n	80065ac <__exponent+0x70>
 8006556:	f10d 0407 	add.w	r4, sp, #7
 800655a:	46a4      	mov	ip, r4
 800655c:	270a      	movs	r7, #10
 800655e:	46a6      	mov	lr, r4
 8006560:	460a      	mov	r2, r1
 8006562:	fb91 f6f7 	sdiv	r6, r1, r7
 8006566:	fb07 1516 	mls	r5, r7, r6, r1
 800656a:	3530      	adds	r5, #48	; 0x30
 800656c:	2a63      	cmp	r2, #99	; 0x63
 800656e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006572:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006576:	4631      	mov	r1, r6
 8006578:	dcf1      	bgt.n	800655e <__exponent+0x22>
 800657a:	3130      	adds	r1, #48	; 0x30
 800657c:	f1ae 0502 	sub.w	r5, lr, #2
 8006580:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006584:	1c44      	adds	r4, r0, #1
 8006586:	4629      	mov	r1, r5
 8006588:	4561      	cmp	r1, ip
 800658a:	d30a      	bcc.n	80065a2 <__exponent+0x66>
 800658c:	f10d 0209 	add.w	r2, sp, #9
 8006590:	eba2 020e 	sub.w	r2, r2, lr
 8006594:	4565      	cmp	r5, ip
 8006596:	bf88      	it	hi
 8006598:	2200      	movhi	r2, #0
 800659a:	4413      	add	r3, r2
 800659c:	1a18      	subs	r0, r3, r0
 800659e:	b003      	add	sp, #12
 80065a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065aa:	e7ed      	b.n	8006588 <__exponent+0x4c>
 80065ac:	2330      	movs	r3, #48	; 0x30
 80065ae:	3130      	adds	r1, #48	; 0x30
 80065b0:	7083      	strb	r3, [r0, #2]
 80065b2:	70c1      	strb	r1, [r0, #3]
 80065b4:	1d03      	adds	r3, r0, #4
 80065b6:	e7f1      	b.n	800659c <__exponent+0x60>

080065b8 <_printf_float>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	ed2d 8b02 	vpush	{d8}
 80065c0:	b08d      	sub	sp, #52	; 0x34
 80065c2:	460c      	mov	r4, r1
 80065c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065c8:	4616      	mov	r6, r2
 80065ca:	461f      	mov	r7, r3
 80065cc:	4605      	mov	r5, r0
 80065ce:	f001 fa57 	bl	8007a80 <_localeconv_r>
 80065d2:	f8d0 a000 	ldr.w	sl, [r0]
 80065d6:	4650      	mov	r0, sl
 80065d8:	f7f9 fdfa 	bl	80001d0 <strlen>
 80065dc:	2300      	movs	r3, #0
 80065de:	930a      	str	r3, [sp, #40]	; 0x28
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	f8d8 3000 	ldr.w	r3, [r8]
 80065e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065ec:	3307      	adds	r3, #7
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	f103 0208 	add.w	r2, r3, #8
 80065f6:	f8c8 2000 	str.w	r2, [r8]
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006602:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800660a:	9307      	str	r3, [sp, #28]
 800660c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006610:	ee08 0a10 	vmov	s16, r0
 8006614:	4b9f      	ldr	r3, [pc, #636]	; (8006894 <_printf_float+0x2dc>)
 8006616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	f7fa fa85 	bl	8000b2c <__aeabi_dcmpun>
 8006622:	bb88      	cbnz	r0, 8006688 <_printf_float+0xd0>
 8006624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006628:	4b9a      	ldr	r3, [pc, #616]	; (8006894 <_printf_float+0x2dc>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	f7fa fa5f 	bl	8000af0 <__aeabi_dcmple>
 8006632:	bb48      	cbnz	r0, 8006688 <_printf_float+0xd0>
 8006634:	2200      	movs	r2, #0
 8006636:	2300      	movs	r3, #0
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7fa fa4e 	bl	8000adc <__aeabi_dcmplt>
 8006640:	b110      	cbz	r0, 8006648 <_printf_float+0x90>
 8006642:	232d      	movs	r3, #45	; 0x2d
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	4b93      	ldr	r3, [pc, #588]	; (8006898 <_printf_float+0x2e0>)
 800664a:	4894      	ldr	r0, [pc, #592]	; (800689c <_printf_float+0x2e4>)
 800664c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006650:	bf94      	ite	ls
 8006652:	4698      	movls	r8, r3
 8006654:	4680      	movhi	r8, r0
 8006656:	2303      	movs	r3, #3
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	9b05      	ldr	r3, [sp, #20]
 800665c:	f023 0204 	bic.w	r2, r3, #4
 8006660:	6022      	str	r2, [r4, #0]
 8006662:	f04f 0900 	mov.w	r9, #0
 8006666:	9700      	str	r7, [sp, #0]
 8006668:	4633      	mov	r3, r6
 800666a:	aa0b      	add	r2, sp, #44	; 0x2c
 800666c:	4621      	mov	r1, r4
 800666e:	4628      	mov	r0, r5
 8006670:	f000 f9d8 	bl	8006a24 <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	f040 8090 	bne.w	800679a <_printf_float+0x1e2>
 800667a:	f04f 30ff 	mov.w	r0, #4294967295
 800667e:	b00d      	add	sp, #52	; 0x34
 8006680:	ecbd 8b02 	vpop	{d8}
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	4640      	mov	r0, r8
 800668e:	4649      	mov	r1, r9
 8006690:	f7fa fa4c 	bl	8000b2c <__aeabi_dcmpun>
 8006694:	b140      	cbz	r0, 80066a8 <_printf_float+0xf0>
 8006696:	464b      	mov	r3, r9
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfbc      	itt	lt
 800669c:	232d      	movlt	r3, #45	; 0x2d
 800669e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066a2:	487f      	ldr	r0, [pc, #508]	; (80068a0 <_printf_float+0x2e8>)
 80066a4:	4b7f      	ldr	r3, [pc, #508]	; (80068a4 <_printf_float+0x2ec>)
 80066a6:	e7d1      	b.n	800664c <_printf_float+0x94>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066ae:	9206      	str	r2, [sp, #24]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	d13f      	bne.n	8006734 <_printf_float+0x17c>
 80066b4:	2306      	movs	r3, #6
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	9b05      	ldr	r3, [sp, #20]
 80066ba:	6861      	ldr	r1, [r4, #4]
 80066bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066c0:	2300      	movs	r3, #0
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	ab0a      	add	r3, sp, #40	; 0x28
 80066c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066ca:	ab09      	add	r3, sp, #36	; 0x24
 80066cc:	ec49 8b10 	vmov	d0, r8, r9
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff fecd 	bl	8006478 <__cvt>
 80066de:	9b06      	ldr	r3, [sp, #24]
 80066e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e2:	2b47      	cmp	r3, #71	; 0x47
 80066e4:	4680      	mov	r8, r0
 80066e6:	d108      	bne.n	80066fa <_printf_float+0x142>
 80066e8:	1cc8      	adds	r0, r1, #3
 80066ea:	db02      	blt.n	80066f2 <_printf_float+0x13a>
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	4299      	cmp	r1, r3
 80066f0:	dd41      	ble.n	8006776 <_printf_float+0x1be>
 80066f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80066f6:	fa5f fb8b 	uxtb.w	fp, fp
 80066fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066fe:	d820      	bhi.n	8006742 <_printf_float+0x18a>
 8006700:	3901      	subs	r1, #1
 8006702:	465a      	mov	r2, fp
 8006704:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006708:	9109      	str	r1, [sp, #36]	; 0x24
 800670a:	f7ff ff17 	bl	800653c <__exponent>
 800670e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006710:	1813      	adds	r3, r2, r0
 8006712:	2a01      	cmp	r2, #1
 8006714:	4681      	mov	r9, r0
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	dc02      	bgt.n	8006720 <_printf_float+0x168>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	07d2      	lsls	r2, r2, #31
 800671e:	d501      	bpl.n	8006724 <_printf_float+0x16c>
 8006720:	3301      	adds	r3, #1
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006728:	2b00      	cmp	r3, #0
 800672a:	d09c      	beq.n	8006666 <_printf_float+0xae>
 800672c:	232d      	movs	r3, #45	; 0x2d
 800672e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006732:	e798      	b.n	8006666 <_printf_float+0xae>
 8006734:	9a06      	ldr	r2, [sp, #24]
 8006736:	2a47      	cmp	r2, #71	; 0x47
 8006738:	d1be      	bne.n	80066b8 <_printf_float+0x100>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1bc      	bne.n	80066b8 <_printf_float+0x100>
 800673e:	2301      	movs	r3, #1
 8006740:	e7b9      	b.n	80066b6 <_printf_float+0xfe>
 8006742:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006746:	d118      	bne.n	800677a <_printf_float+0x1c2>
 8006748:	2900      	cmp	r1, #0
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	dd0b      	ble.n	8006766 <_printf_float+0x1ae>
 800674e:	6121      	str	r1, [r4, #16]
 8006750:	b913      	cbnz	r3, 8006758 <_printf_float+0x1a0>
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	07d0      	lsls	r0, r2, #31
 8006756:	d502      	bpl.n	800675e <_printf_float+0x1a6>
 8006758:	3301      	adds	r3, #1
 800675a:	440b      	add	r3, r1
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006760:	f04f 0900 	mov.w	r9, #0
 8006764:	e7de      	b.n	8006724 <_printf_float+0x16c>
 8006766:	b913      	cbnz	r3, 800676e <_printf_float+0x1b6>
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	07d2      	lsls	r2, r2, #31
 800676c:	d501      	bpl.n	8006772 <_printf_float+0x1ba>
 800676e:	3302      	adds	r3, #2
 8006770:	e7f4      	b.n	800675c <_printf_float+0x1a4>
 8006772:	2301      	movs	r3, #1
 8006774:	e7f2      	b.n	800675c <_printf_float+0x1a4>
 8006776:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800677a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677c:	4299      	cmp	r1, r3
 800677e:	db05      	blt.n	800678c <_printf_float+0x1d4>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	6121      	str	r1, [r4, #16]
 8006784:	07d8      	lsls	r0, r3, #31
 8006786:	d5ea      	bpl.n	800675e <_printf_float+0x1a6>
 8006788:	1c4b      	adds	r3, r1, #1
 800678a:	e7e7      	b.n	800675c <_printf_float+0x1a4>
 800678c:	2900      	cmp	r1, #0
 800678e:	bfd4      	ite	le
 8006790:	f1c1 0202 	rsble	r2, r1, #2
 8006794:	2201      	movgt	r2, #1
 8006796:	4413      	add	r3, r2
 8006798:	e7e0      	b.n	800675c <_printf_float+0x1a4>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	055a      	lsls	r2, r3, #21
 800679e:	d407      	bmi.n	80067b0 <_printf_float+0x1f8>
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	4642      	mov	r2, r8
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	d12c      	bne.n	8006808 <_printf_float+0x250>
 80067ae:	e764      	b.n	800667a <_printf_float+0xc2>
 80067b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067b4:	f240 80e0 	bls.w	8006978 <_printf_float+0x3c0>
 80067b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067bc:	2200      	movs	r2, #0
 80067be:	2300      	movs	r3, #0
 80067c0:	f7fa f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d034      	beq.n	8006832 <_printf_float+0x27a>
 80067c8:	4a37      	ldr	r2, [pc, #220]	; (80068a8 <_printf_float+0x2f0>)
 80067ca:	2301      	movs	r3, #1
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af51 	beq.w	800667a <_printf_float+0xc2>
 80067d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067dc:	429a      	cmp	r2, r3
 80067de:	db02      	blt.n	80067e6 <_printf_float+0x22e>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	07d8      	lsls	r0, r3, #31
 80067e4:	d510      	bpl.n	8006808 <_printf_float+0x250>
 80067e6:	ee18 3a10 	vmov	r3, s16
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f af41 	beq.w	800667a <_printf_float+0xc2>
 80067f8:	f04f 0800 	mov.w	r8, #0
 80067fc:	f104 091a 	add.w	r9, r4, #26
 8006800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	4543      	cmp	r3, r8
 8006806:	dc09      	bgt.n	800681c <_printf_float+0x264>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	079b      	lsls	r3, r3, #30
 800680c:	f100 8105 	bmi.w	8006a1a <_printf_float+0x462>
 8006810:	68e0      	ldr	r0, [r4, #12]
 8006812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006814:	4298      	cmp	r0, r3
 8006816:	bfb8      	it	lt
 8006818:	4618      	movlt	r0, r3
 800681a:	e730      	b.n	800667e <_printf_float+0xc6>
 800681c:	2301      	movs	r3, #1
 800681e:	464a      	mov	r2, r9
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f af27 	beq.w	800667a <_printf_float+0xc2>
 800682c:	f108 0801 	add.w	r8, r8, #1
 8006830:	e7e6      	b.n	8006800 <_printf_float+0x248>
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc39      	bgt.n	80068ac <_printf_float+0x2f4>
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <_printf_float+0x2f0>)
 800683a:	2301      	movs	r3, #1
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af19 	beq.w	800667a <_printf_float+0xc2>
 8006848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800684c:	4313      	orrs	r3, r2
 800684e:	d102      	bne.n	8006856 <_printf_float+0x29e>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07d9      	lsls	r1, r3, #31
 8006854:	d5d8      	bpl.n	8006808 <_printf_float+0x250>
 8006856:	ee18 3a10 	vmov	r3, s16
 800685a:	4652      	mov	r2, sl
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af09 	beq.w	800667a <_printf_float+0xc2>
 8006868:	f04f 0900 	mov.w	r9, #0
 800686c:	f104 0a1a 	add.w	sl, r4, #26
 8006870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006872:	425b      	negs	r3, r3
 8006874:	454b      	cmp	r3, r9
 8006876:	dc01      	bgt.n	800687c <_printf_float+0x2c4>
 8006878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687a:	e792      	b.n	80067a2 <_printf_float+0x1ea>
 800687c:	2301      	movs	r3, #1
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f aef7 	beq.w	800667a <_printf_float+0xc2>
 800688c:	f109 0901 	add.w	r9, r9, #1
 8006890:	e7ee      	b.n	8006870 <_printf_float+0x2b8>
 8006892:	bf00      	nop
 8006894:	7fefffff 	.word	0x7fefffff
 8006898:	08009704 	.word	0x08009704
 800689c:	08009708 	.word	0x08009708
 80068a0:	08009710 	.word	0x08009710
 80068a4:	0800970c 	.word	0x0800970c
 80068a8:	08009714 	.word	0x08009714
 80068ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bfa8      	it	ge
 80068b4:	461a      	movge	r2, r3
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	4691      	mov	r9, r2
 80068ba:	dc37      	bgt.n	800692c <_printf_float+0x374>
 80068bc:	f04f 0b00 	mov.w	fp, #0
 80068c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068c4:	f104 021a 	add.w	r2, r4, #26
 80068c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	eba3 0309 	sub.w	r3, r3, r9
 80068d0:	455b      	cmp	r3, fp
 80068d2:	dc33      	bgt.n	800693c <_printf_float+0x384>
 80068d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068d8:	429a      	cmp	r2, r3
 80068da:	db3b      	blt.n	8006954 <_printf_float+0x39c>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	07da      	lsls	r2, r3, #31
 80068e0:	d438      	bmi.n	8006954 <_printf_float+0x39c>
 80068e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e4:	9b05      	ldr	r3, [sp, #20]
 80068e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	eba2 0901 	sub.w	r9, r2, r1
 80068ee:	4599      	cmp	r9, r3
 80068f0:	bfa8      	it	ge
 80068f2:	4699      	movge	r9, r3
 80068f4:	f1b9 0f00 	cmp.w	r9, #0
 80068f8:	dc35      	bgt.n	8006966 <_printf_float+0x3ae>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006902:	f104 0a1a 	add.w	sl, r4, #26
 8006906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	eba3 0309 	sub.w	r3, r3, r9
 8006910:	4543      	cmp	r3, r8
 8006912:	f77f af79 	ble.w	8006808 <_printf_float+0x250>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f aeaa 	beq.w	800667a <_printf_float+0xc2>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	e7ec      	b.n	8006906 <_printf_float+0x34e>
 800692c:	4613      	mov	r3, r2
 800692e:	4631      	mov	r1, r6
 8006930:	4642      	mov	r2, r8
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	d1c0      	bne.n	80068bc <_printf_float+0x304>
 800693a:	e69e      	b.n	800667a <_printf_float+0xc2>
 800693c:	2301      	movs	r3, #1
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	9205      	str	r2, [sp, #20]
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f ae97 	beq.w	800667a <_printf_float+0xc2>
 800694c:	9a05      	ldr	r2, [sp, #20]
 800694e:	f10b 0b01 	add.w	fp, fp, #1
 8006952:	e7b9      	b.n	80068c8 <_printf_float+0x310>
 8006954:	ee18 3a10 	vmov	r3, s16
 8006958:	4652      	mov	r2, sl
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d1be      	bne.n	80068e2 <_printf_float+0x32a>
 8006964:	e689      	b.n	800667a <_printf_float+0xc2>
 8006966:	9a05      	ldr	r2, [sp, #20]
 8006968:	464b      	mov	r3, r9
 800696a:	4442      	add	r2, r8
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	d1c1      	bne.n	80068fa <_printf_float+0x342>
 8006976:	e680      	b.n	800667a <_printf_float+0xc2>
 8006978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800697a:	2a01      	cmp	r2, #1
 800697c:	dc01      	bgt.n	8006982 <_printf_float+0x3ca>
 800697e:	07db      	lsls	r3, r3, #31
 8006980:	d538      	bpl.n	80069f4 <_printf_float+0x43c>
 8006982:	2301      	movs	r3, #1
 8006984:	4642      	mov	r2, r8
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f ae74 	beq.w	800667a <_printf_float+0xc2>
 8006992:	ee18 3a10 	vmov	r3, s16
 8006996:	4652      	mov	r2, sl
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f ae6b 	beq.w	800667a <_printf_float+0xc2>
 80069a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069a8:	2200      	movs	r2, #0
 80069aa:	2300      	movs	r3, #0
 80069ac:	f7fa f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b0:	b9d8      	cbnz	r0, 80069ea <_printf_float+0x432>
 80069b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b4:	f108 0201 	add.w	r2, r8, #1
 80069b8:	3b01      	subs	r3, #1
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	d10e      	bne.n	80069e2 <_printf_float+0x42a>
 80069c4:	e659      	b.n	800667a <_printf_float+0xc2>
 80069c6:	2301      	movs	r3, #1
 80069c8:	4652      	mov	r2, sl
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae52 	beq.w	800667a <_printf_float+0xc2>
 80069d6:	f108 0801 	add.w	r8, r8, #1
 80069da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069dc:	3b01      	subs	r3, #1
 80069de:	4543      	cmp	r3, r8
 80069e0:	dcf1      	bgt.n	80069c6 <_printf_float+0x40e>
 80069e2:	464b      	mov	r3, r9
 80069e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069e8:	e6dc      	b.n	80067a4 <_printf_float+0x1ec>
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	f104 0a1a 	add.w	sl, r4, #26
 80069f2:	e7f2      	b.n	80069da <_printf_float+0x422>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4642      	mov	r2, r8
 80069f8:	e7df      	b.n	80069ba <_printf_float+0x402>
 80069fa:	2301      	movs	r3, #1
 80069fc:	464a      	mov	r2, r9
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	f43f ae38 	beq.w	800667a <_printf_float+0xc2>
 8006a0a:	f108 0801 	add.w	r8, r8, #1
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	4543      	cmp	r3, r8
 8006a16:	dcf0      	bgt.n	80069fa <_printf_float+0x442>
 8006a18:	e6fa      	b.n	8006810 <_printf_float+0x258>
 8006a1a:	f04f 0800 	mov.w	r8, #0
 8006a1e:	f104 0919 	add.w	r9, r4, #25
 8006a22:	e7f4      	b.n	8006a0e <_printf_float+0x456>

08006a24 <_printf_common>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	4616      	mov	r6, r2
 8006a2a:	4699      	mov	r9, r3
 8006a2c:	688a      	ldr	r2, [r1, #8]
 8006a2e:	690b      	ldr	r3, [r1, #16]
 8006a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	bfb8      	it	lt
 8006a38:	4613      	movlt	r3, r2
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a40:	4607      	mov	r7, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b10a      	cbz	r2, 8006a4a <_printf_common+0x26>
 8006a46:	3301      	adds	r3, #1
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	0699      	lsls	r1, r3, #26
 8006a4e:	bf42      	ittt	mi
 8006a50:	6833      	ldrmi	r3, [r6, #0]
 8006a52:	3302      	addmi	r3, #2
 8006a54:	6033      	strmi	r3, [r6, #0]
 8006a56:	6825      	ldr	r5, [r4, #0]
 8006a58:	f015 0506 	ands.w	r5, r5, #6
 8006a5c:	d106      	bne.n	8006a6c <_printf_common+0x48>
 8006a5e:	f104 0a19 	add.w	sl, r4, #25
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	1a9b      	subs	r3, r3, r2
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dc26      	bgt.n	8006aba <_printf_common+0x96>
 8006a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a70:	1e13      	subs	r3, r2, #0
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	bf18      	it	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	0692      	lsls	r2, r2, #26
 8006a7a:	d42b      	bmi.n	8006ad4 <_printf_common+0xb0>
 8006a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a80:	4649      	mov	r1, r9
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c0      	blx	r8
 8006a86:	3001      	adds	r0, #1
 8006a88:	d01e      	beq.n	8006ac8 <_printf_common+0xa4>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	68e5      	ldr	r5, [r4, #12]
 8006a8e:	6832      	ldr	r2, [r6, #0]
 8006a90:	f003 0306 	and.w	r3, r3, #6
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	bf08      	it	eq
 8006a98:	1aad      	subeq	r5, r5, r2
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	6922      	ldr	r2, [r4, #16]
 8006a9e:	bf0c      	ite	eq
 8006aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa4:	2500      	movne	r5, #0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bfc4      	itt	gt
 8006aaa:	1a9b      	subgt	r3, r3, r2
 8006aac:	18ed      	addgt	r5, r5, r3
 8006aae:	2600      	movs	r6, #0
 8006ab0:	341a      	adds	r4, #26
 8006ab2:	42b5      	cmp	r5, r6
 8006ab4:	d11a      	bne.n	8006aec <_printf_common+0xc8>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e008      	b.n	8006acc <_printf_common+0xa8>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4652      	mov	r2, sl
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	47c0      	blx	r8
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d103      	bne.n	8006ad0 <_printf_common+0xac>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	e7c6      	b.n	8006a62 <_printf_common+0x3e>
 8006ad4:	18e1      	adds	r1, r4, r3
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	2030      	movs	r0, #48	; 0x30
 8006ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ade:	4422      	add	r2, r4
 8006ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ae8:	3302      	adds	r3, #2
 8006aea:	e7c7      	b.n	8006a7c <_printf_common+0x58>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4622      	mov	r2, r4
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d0e6      	beq.n	8006ac8 <_printf_common+0xa4>
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7d9      	b.n	8006ab2 <_printf_common+0x8e>
	...

08006b00 <_printf_i>:
 8006b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	460c      	mov	r4, r1
 8006b06:	4691      	mov	r9, r2
 8006b08:	7e27      	ldrb	r7, [r4, #24]
 8006b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b0c:	2f78      	cmp	r7, #120	; 0x78
 8006b0e:	4680      	mov	r8, r0
 8006b10:	469a      	mov	sl, r3
 8006b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b16:	d807      	bhi.n	8006b28 <_printf_i+0x28>
 8006b18:	2f62      	cmp	r7, #98	; 0x62
 8006b1a:	d80a      	bhi.n	8006b32 <_printf_i+0x32>
 8006b1c:	2f00      	cmp	r7, #0
 8006b1e:	f000 80d8 	beq.w	8006cd2 <_printf_i+0x1d2>
 8006b22:	2f58      	cmp	r7, #88	; 0x58
 8006b24:	f000 80a3 	beq.w	8006c6e <_printf_i+0x16e>
 8006b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b30:	e03a      	b.n	8006ba8 <_printf_i+0xa8>
 8006b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b36:	2b15      	cmp	r3, #21
 8006b38:	d8f6      	bhi.n	8006b28 <_printf_i+0x28>
 8006b3a:	a001      	add	r0, pc, #4	; (adr r0, 8006b40 <_printf_i+0x40>)
 8006b3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006bad 	.word	0x08006bad
 8006b48:	08006b29 	.word	0x08006b29
 8006b4c:	08006b29 	.word	0x08006b29
 8006b50:	08006b29 	.word	0x08006b29
 8006b54:	08006b29 	.word	0x08006b29
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006b29 	.word	0x08006b29
 8006b60:	08006b29 	.word	0x08006b29
 8006b64:	08006b29 	.word	0x08006b29
 8006b68:	08006b29 	.word	0x08006b29
 8006b6c:	08006cb9 	.word	0x08006cb9
 8006b70:	08006bdd 	.word	0x08006bdd
 8006b74:	08006c9b 	.word	0x08006c9b
 8006b78:	08006b29 	.word	0x08006b29
 8006b7c:	08006b29 	.word	0x08006b29
 8006b80:	08006cdb 	.word	0x08006cdb
 8006b84:	08006b29 	.word	0x08006b29
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b29 	.word	0x08006b29
 8006b90:	08006b29 	.word	0x08006b29
 8006b94:	08006ca3 	.word	0x08006ca3
 8006b98:	680b      	ldr	r3, [r1, #0]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	600a      	str	r2, [r1, #0]
 8006ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0a3      	b.n	8006cf4 <_printf_i+0x1f4>
 8006bac:	6825      	ldr	r5, [r4, #0]
 8006bae:	6808      	ldr	r0, [r1, #0]
 8006bb0:	062e      	lsls	r6, r5, #24
 8006bb2:	f100 0304 	add.w	r3, r0, #4
 8006bb6:	d50a      	bpl.n	8006bce <_printf_i+0xce>
 8006bb8:	6805      	ldr	r5, [r0, #0]
 8006bba:	600b      	str	r3, [r1, #0]
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	da03      	bge.n	8006bc8 <_printf_i+0xc8>
 8006bc0:	232d      	movs	r3, #45	; 0x2d
 8006bc2:	426d      	negs	r5, r5
 8006bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc8:	485e      	ldr	r0, [pc, #376]	; (8006d44 <_printf_i+0x244>)
 8006bca:	230a      	movs	r3, #10
 8006bcc:	e019      	b.n	8006c02 <_printf_i+0x102>
 8006bce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bd2:	6805      	ldr	r5, [r0, #0]
 8006bd4:	600b      	str	r3, [r1, #0]
 8006bd6:	bf18      	it	ne
 8006bd8:	b22d      	sxthne	r5, r5
 8006bda:	e7ef      	b.n	8006bbc <_printf_i+0xbc>
 8006bdc:	680b      	ldr	r3, [r1, #0]
 8006bde:	6825      	ldr	r5, [r4, #0]
 8006be0:	1d18      	adds	r0, r3, #4
 8006be2:	6008      	str	r0, [r1, #0]
 8006be4:	0628      	lsls	r0, r5, #24
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0xec>
 8006be8:	681d      	ldr	r5, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <_printf_i+0xf2>
 8006bec:	0669      	lsls	r1, r5, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0xe8>
 8006bf0:	881d      	ldrh	r5, [r3, #0]
 8006bf2:	4854      	ldr	r0, [pc, #336]	; (8006d44 <_printf_i+0x244>)
 8006bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2308      	moveq	r3, #8
 8006bfa:	230a      	movne	r3, #10
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c02:	6866      	ldr	r6, [r4, #4]
 8006c04:	60a6      	str	r6, [r4, #8]
 8006c06:	2e00      	cmp	r6, #0
 8006c08:	bfa2      	ittt	ge
 8006c0a:	6821      	ldrge	r1, [r4, #0]
 8006c0c:	f021 0104 	bicge.w	r1, r1, #4
 8006c10:	6021      	strge	r1, [r4, #0]
 8006c12:	b90d      	cbnz	r5, 8006c18 <_printf_i+0x118>
 8006c14:	2e00      	cmp	r6, #0
 8006c16:	d04d      	beq.n	8006cb4 <_printf_i+0x1b4>
 8006c18:	4616      	mov	r6, r2
 8006c1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c22:	5dc7      	ldrb	r7, [r0, r7]
 8006c24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c28:	462f      	mov	r7, r5
 8006c2a:	42bb      	cmp	r3, r7
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	d9f4      	bls.n	8006c1a <_printf_i+0x11a>
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d10b      	bne.n	8006c4c <_printf_i+0x14c>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	07df      	lsls	r7, r3, #31
 8006c38:	d508      	bpl.n	8006c4c <_printf_i+0x14c>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	bfde      	ittt	le
 8006c42:	2330      	movle	r3, #48	; 0x30
 8006c44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c4c:	1b92      	subs	r2, r2, r6
 8006c4e:	6122      	str	r2, [r4, #16]
 8006c50:	f8cd a000 	str.w	sl, [sp]
 8006c54:	464b      	mov	r3, r9
 8006c56:	aa03      	add	r2, sp, #12
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f7ff fee2 	bl	8006a24 <_printf_common>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d14c      	bne.n	8006cfe <_printf_i+0x1fe>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b004      	add	sp, #16
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	4835      	ldr	r0, [pc, #212]	; (8006d44 <_printf_i+0x244>)
 8006c70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	680e      	ldr	r6, [r1, #0]
 8006c78:	061f      	lsls	r7, r3, #24
 8006c7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c7e:	600e      	str	r6, [r1, #0]
 8006c80:	d514      	bpl.n	8006cac <_printf_i+0x1ac>
 8006c82:	07d9      	lsls	r1, r3, #31
 8006c84:	bf44      	itt	mi
 8006c86:	f043 0320 	orrmi.w	r3, r3, #32
 8006c8a:	6023      	strmi	r3, [r4, #0]
 8006c8c:	b91d      	cbnz	r5, 8006c96 <_printf_i+0x196>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	f023 0320 	bic.w	r3, r3, #32
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	2310      	movs	r3, #16
 8006c98:	e7b0      	b.n	8006bfc <_printf_i+0xfc>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f043 0320 	orr.w	r3, r3, #32
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	2378      	movs	r3, #120	; 0x78
 8006ca4:	4828      	ldr	r0, [pc, #160]	; (8006d48 <_printf_i+0x248>)
 8006ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006caa:	e7e3      	b.n	8006c74 <_printf_i+0x174>
 8006cac:	065e      	lsls	r6, r3, #25
 8006cae:	bf48      	it	mi
 8006cb0:	b2ad      	uxthmi	r5, r5
 8006cb2:	e7e6      	b.n	8006c82 <_printf_i+0x182>
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	e7bb      	b.n	8006c30 <_printf_i+0x130>
 8006cb8:	680b      	ldr	r3, [r1, #0]
 8006cba:	6826      	ldr	r6, [r4, #0]
 8006cbc:	6960      	ldr	r0, [r4, #20]
 8006cbe:	1d1d      	adds	r5, r3, #4
 8006cc0:	600d      	str	r5, [r1, #0]
 8006cc2:	0635      	lsls	r5, r6, #24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	d501      	bpl.n	8006ccc <_printf_i+0x1cc>
 8006cc8:	6018      	str	r0, [r3, #0]
 8006cca:	e002      	b.n	8006cd2 <_printf_i+0x1d2>
 8006ccc:	0671      	lsls	r1, r6, #25
 8006cce:	d5fb      	bpl.n	8006cc8 <_printf_i+0x1c8>
 8006cd0:	8018      	strh	r0, [r3, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	4616      	mov	r6, r2
 8006cd8:	e7ba      	b.n	8006c50 <_printf_i+0x150>
 8006cda:	680b      	ldr	r3, [r1, #0]
 8006cdc:	1d1a      	adds	r2, r3, #4
 8006cde:	600a      	str	r2, [r1, #0]
 8006ce0:	681e      	ldr	r6, [r3, #0]
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7f9 fa7a 	bl	80001e0 <memchr>
 8006cec:	b108      	cbz	r0, 8006cf2 <_printf_i+0x1f2>
 8006cee:	1b80      	subs	r0, r0, r6
 8006cf0:	6060      	str	r0, [r4, #4]
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cfc:	e7a8      	b.n	8006c50 <_printf_i+0x150>
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	4632      	mov	r2, r6
 8006d02:	4649      	mov	r1, r9
 8006d04:	4640      	mov	r0, r8
 8006d06:	47d0      	blx	sl
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d0ab      	beq.n	8006c64 <_printf_i+0x164>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	079b      	lsls	r3, r3, #30
 8006d10:	d413      	bmi.n	8006d3a <_printf_i+0x23a>
 8006d12:	68e0      	ldr	r0, [r4, #12]
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	4298      	cmp	r0, r3
 8006d18:	bfb8      	it	lt
 8006d1a:	4618      	movlt	r0, r3
 8006d1c:	e7a4      	b.n	8006c68 <_printf_i+0x168>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4632      	mov	r2, r6
 8006d22:	4649      	mov	r1, r9
 8006d24:	4640      	mov	r0, r8
 8006d26:	47d0      	blx	sl
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d09b      	beq.n	8006c64 <_printf_i+0x164>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	9903      	ldr	r1, [sp, #12]
 8006d32:	1a5b      	subs	r3, r3, r1
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	dcf2      	bgt.n	8006d1e <_printf_i+0x21e>
 8006d38:	e7eb      	b.n	8006d12 <_printf_i+0x212>
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	f104 0619 	add.w	r6, r4, #25
 8006d40:	e7f5      	b.n	8006d2e <_printf_i+0x22e>
 8006d42:	bf00      	nop
 8006d44:	08009716 	.word	0x08009716
 8006d48:	08009727 	.word	0x08009727

08006d4c <siprintf>:
 8006d4c:	b40e      	push	{r1, r2, r3}
 8006d4e:	b500      	push	{lr}
 8006d50:	b09c      	sub	sp, #112	; 0x70
 8006d52:	ab1d      	add	r3, sp, #116	; 0x74
 8006d54:	9002      	str	r0, [sp, #8]
 8006d56:	9006      	str	r0, [sp, #24]
 8006d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <siprintf+0x38>)
 8006d5e:	9107      	str	r1, [sp, #28]
 8006d60:	9104      	str	r1, [sp, #16]
 8006d62:	4909      	ldr	r1, [pc, #36]	; (8006d88 <siprintf+0x3c>)
 8006d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	a902      	add	r1, sp, #8
 8006d70:	f001 fb34 	bl	80083dc <_svfiprintf_r>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	b01c      	add	sp, #112	; 0x70
 8006d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d80:	b003      	add	sp, #12
 8006d82:	4770      	bx	lr
 8006d84:	20000010 	.word	0x20000010
 8006d88:	ffff0208 	.word	0xffff0208

08006d8c <quorem>:
 8006d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d90:	6903      	ldr	r3, [r0, #16]
 8006d92:	690c      	ldr	r4, [r1, #16]
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	4607      	mov	r7, r0
 8006d98:	f2c0 8081 	blt.w	8006e9e <quorem+0x112>
 8006d9c:	3c01      	subs	r4, #1
 8006d9e:	f101 0814 	add.w	r8, r1, #20
 8006da2:	f100 0514 	add.w	r5, r0, #20
 8006da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006daa:	9301      	str	r3, [sp, #4]
 8006dac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006db4:	3301      	adds	r3, #1
 8006db6:	429a      	cmp	r2, r3
 8006db8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dc4:	d331      	bcc.n	8006e2a <quorem+0x9e>
 8006dc6:	f04f 0e00 	mov.w	lr, #0
 8006dca:	4640      	mov	r0, r8
 8006dcc:	46ac      	mov	ip, r5
 8006dce:	46f2      	mov	sl, lr
 8006dd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dd4:	b293      	uxth	r3, r2
 8006dd6:	fb06 e303 	mla	r3, r6, r3, lr
 8006dda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ebaa 0303 	sub.w	r3, sl, r3
 8006de4:	0c12      	lsrs	r2, r2, #16
 8006de6:	f8dc a000 	ldr.w	sl, [ip]
 8006dea:	fb06 e202 	mla	r2, r6, r2, lr
 8006dee:	fa13 f38a 	uxtah	r3, r3, sl
 8006df2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006df6:	fa1f fa82 	uxth.w	sl, r2
 8006dfa:	f8dc 2000 	ldr.w	r2, [ip]
 8006dfe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006e02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0c:	4581      	cmp	r9, r0
 8006e0e:	f84c 3b04 	str.w	r3, [ip], #4
 8006e12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e16:	d2db      	bcs.n	8006dd0 <quorem+0x44>
 8006e18:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e1c:	b92b      	cbnz	r3, 8006e2a <quorem+0x9e>
 8006e1e:	9b01      	ldr	r3, [sp, #4]
 8006e20:	3b04      	subs	r3, #4
 8006e22:	429d      	cmp	r5, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	d32e      	bcc.n	8006e86 <quorem+0xfa>
 8006e28:	613c      	str	r4, [r7, #16]
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f001 f8c0 	bl	8007fb0 <__mcmp>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	db24      	blt.n	8006e7e <quorem+0xf2>
 8006e34:	3601      	adds	r6, #1
 8006e36:	4628      	mov	r0, r5
 8006e38:	f04f 0c00 	mov.w	ip, #0
 8006e3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e40:	f8d0 e000 	ldr.w	lr, [r0]
 8006e44:	b293      	uxth	r3, r2
 8006e46:	ebac 0303 	sub.w	r3, ip, r3
 8006e4a:	0c12      	lsrs	r2, r2, #16
 8006e4c:	fa13 f38e 	uxtah	r3, r3, lr
 8006e50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e5e:	45c1      	cmp	r9, r8
 8006e60:	f840 3b04 	str.w	r3, [r0], #4
 8006e64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e68:	d2e8      	bcs.n	8006e3c <quorem+0xb0>
 8006e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e72:	b922      	cbnz	r2, 8006e7e <quorem+0xf2>
 8006e74:	3b04      	subs	r3, #4
 8006e76:	429d      	cmp	r5, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	d30a      	bcc.n	8006e92 <quorem+0x106>
 8006e7c:	613c      	str	r4, [r7, #16]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	b003      	add	sp, #12
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	3b04      	subs	r3, #4
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	d1cc      	bne.n	8006e28 <quorem+0x9c>
 8006e8e:	3c01      	subs	r4, #1
 8006e90:	e7c7      	b.n	8006e22 <quorem+0x96>
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	3b04      	subs	r3, #4
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d1f0      	bne.n	8006e7c <quorem+0xf0>
 8006e9a:	3c01      	subs	r4, #1
 8006e9c:	e7eb      	b.n	8006e76 <quorem+0xea>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	e7ee      	b.n	8006e80 <quorem+0xf4>
 8006ea2:	0000      	movs	r0, r0
 8006ea4:	0000      	movs	r0, r0
	...

08006ea8 <_dtoa_r>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	ed2d 8b02 	vpush	{d8}
 8006eb0:	ec57 6b10 	vmov	r6, r7, d0
 8006eb4:	b095      	sub	sp, #84	; 0x54
 8006eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ebc:	9105      	str	r1, [sp, #20]
 8006ebe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec8:	b975      	cbnz	r5, 8006ee8 <_dtoa_r+0x40>
 8006eca:	2010      	movs	r0, #16
 8006ecc:	f000 fddc 	bl	8007a88 <malloc>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ed4:	b920      	cbnz	r0, 8006ee0 <_dtoa_r+0x38>
 8006ed6:	4bb2      	ldr	r3, [pc, #712]	; (80071a0 <_dtoa_r+0x2f8>)
 8006ed8:	21ea      	movs	r1, #234	; 0xea
 8006eda:	48b2      	ldr	r0, [pc, #712]	; (80071a4 <_dtoa_r+0x2fc>)
 8006edc:	f001 fb8e 	bl	80085fc <__assert_func>
 8006ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ee4:	6005      	str	r5, [r0, #0]
 8006ee6:	60c5      	str	r5, [r0, #12]
 8006ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eea:	6819      	ldr	r1, [r3, #0]
 8006eec:	b151      	cbz	r1, 8006f04 <_dtoa_r+0x5c>
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	604a      	str	r2, [r1, #4]
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4093      	lsls	r3, r2
 8006ef6:	608b      	str	r3, [r1, #8]
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fe1b 	bl	8007b34 <_Bfree>
 8006efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	1e3b      	subs	r3, r7, #0
 8006f06:	bfb9      	ittee	lt
 8006f08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	9303      	strlt	r3, [sp, #12]
 8006f0e:	2300      	movge	r3, #0
 8006f10:	f8c8 3000 	strge.w	r3, [r8]
 8006f14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006f18:	4ba3      	ldr	r3, [pc, #652]	; (80071a8 <_dtoa_r+0x300>)
 8006f1a:	bfbc      	itt	lt
 8006f1c:	2201      	movlt	r2, #1
 8006f1e:	f8c8 2000 	strlt.w	r2, [r8]
 8006f22:	ea33 0309 	bics.w	r3, r3, r9
 8006f26:	d11b      	bne.n	8006f60 <_dtoa_r+0xb8>
 8006f28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f34:	4333      	orrs	r3, r6
 8006f36:	f000 857a 	beq.w	8007a2e <_dtoa_r+0xb86>
 8006f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f3c:	b963      	cbnz	r3, 8006f58 <_dtoa_r+0xb0>
 8006f3e:	4b9b      	ldr	r3, [pc, #620]	; (80071ac <_dtoa_r+0x304>)
 8006f40:	e024      	b.n	8006f8c <_dtoa_r+0xe4>
 8006f42:	4b9b      	ldr	r3, [pc, #620]	; (80071b0 <_dtoa_r+0x308>)
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	9800      	ldr	r0, [sp, #0]
 8006f4e:	b015      	add	sp, #84	; 0x54
 8006f50:	ecbd 8b02 	vpop	{d8}
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	4b94      	ldr	r3, [pc, #592]	; (80071ac <_dtoa_r+0x304>)
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	3303      	adds	r3, #3
 8006f5e:	e7f3      	b.n	8006f48 <_dtoa_r+0xa0>
 8006f60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	ec51 0b17 	vmov	r0, r1, d7
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f70:	f7f9 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f74:	4680      	mov	r8, r0
 8006f76:	b158      	cbz	r0, 8006f90 <_dtoa_r+0xe8>
 8006f78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8551 	beq.w	8007a28 <_dtoa_r+0xb80>
 8006f86:	488b      	ldr	r0, [pc, #556]	; (80071b4 <_dtoa_r+0x30c>)
 8006f88:	6018      	str	r0, [r3, #0]
 8006f8a:	1e43      	subs	r3, r0, #1
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	e7dd      	b.n	8006f4c <_dtoa_r+0xa4>
 8006f90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f94:	aa12      	add	r2, sp, #72	; 0x48
 8006f96:	a913      	add	r1, sp, #76	; 0x4c
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 f8ad 	bl	80080f8 <__d2b>
 8006f9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fa2:	4683      	mov	fp, r0
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	d07c      	beq.n	80070a2 <_dtoa_r+0x1fa>
 8006fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006faa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006fb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006fba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006fbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fc2:	4b7d      	ldr	r3, [pc, #500]	; (80071b8 <_dtoa_r+0x310>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4639      	mov	r1, r7
 8006fca:	f7f9 f95d 	bl	8000288 <__aeabi_dsub>
 8006fce:	a36e      	add	r3, pc, #440	; (adr r3, 8007188 <_dtoa_r+0x2e0>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 fb10 	bl	80005f8 <__aeabi_dmul>
 8006fd8:	a36d      	add	r3, pc, #436	; (adr r3, 8007190 <_dtoa_r+0x2e8>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f7f9 f955 	bl	800028c <__adddf3>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	460f      	mov	r7, r1
 8006fe8:	f7f9 fa9c 	bl	8000524 <__aeabi_i2d>
 8006fec:	a36a      	add	r3, pc, #424	; (adr r3, 8007198 <_dtoa_r+0x2f0>)
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	f7f9 f945 	bl	800028c <__adddf3>
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	f7f9 fda7 	bl	8000b58 <__aeabi_d2iz>
 800700a:	2200      	movs	r2, #0
 800700c:	4682      	mov	sl, r0
 800700e:	2300      	movs	r3, #0
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fd62 	bl	8000adc <__aeabi_dcmplt>
 8007018:	b148      	cbz	r0, 800702e <_dtoa_r+0x186>
 800701a:	4650      	mov	r0, sl
 800701c:	f7f9 fa82 	bl	8000524 <__aeabi_i2d>
 8007020:	4632      	mov	r2, r6
 8007022:	463b      	mov	r3, r7
 8007024:	f7f9 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8007028:	b908      	cbnz	r0, 800702e <_dtoa_r+0x186>
 800702a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800702e:	f1ba 0f16 	cmp.w	sl, #22
 8007032:	d854      	bhi.n	80070de <_dtoa_r+0x236>
 8007034:	4b61      	ldr	r3, [pc, #388]	; (80071bc <_dtoa_r+0x314>)
 8007036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007042:	f7f9 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8007046:	2800      	cmp	r0, #0
 8007048:	d04b      	beq.n	80070e2 <_dtoa_r+0x23a>
 800704a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800704e:	2300      	movs	r3, #0
 8007050:	930e      	str	r3, [sp, #56]	; 0x38
 8007052:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007054:	1b5d      	subs	r5, r3, r5
 8007056:	1e6b      	subs	r3, r5, #1
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	bf43      	ittte	mi
 800705c:	2300      	movmi	r3, #0
 800705e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007062:	9304      	strmi	r3, [sp, #16]
 8007064:	f04f 0800 	movpl.w	r8, #0
 8007068:	f1ba 0f00 	cmp.w	sl, #0
 800706c:	db3b      	blt.n	80070e6 <_dtoa_r+0x23e>
 800706e:	9b04      	ldr	r3, [sp, #16]
 8007070:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007074:	4453      	add	r3, sl
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	2300      	movs	r3, #0
 800707a:	9306      	str	r3, [sp, #24]
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	2b09      	cmp	r3, #9
 8007080:	d869      	bhi.n	8007156 <_dtoa_r+0x2ae>
 8007082:	2b05      	cmp	r3, #5
 8007084:	bfc4      	itt	gt
 8007086:	3b04      	subgt	r3, #4
 8007088:	9305      	strgt	r3, [sp, #20]
 800708a:	9b05      	ldr	r3, [sp, #20]
 800708c:	f1a3 0302 	sub.w	r3, r3, #2
 8007090:	bfcc      	ite	gt
 8007092:	2500      	movgt	r5, #0
 8007094:	2501      	movle	r5, #1
 8007096:	2b03      	cmp	r3, #3
 8007098:	d869      	bhi.n	800716e <_dtoa_r+0x2c6>
 800709a:	e8df f003 	tbb	[pc, r3]
 800709e:	4e2c      	.short	0x4e2c
 80070a0:	5a4c      	.short	0x5a4c
 80070a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80070a6:	441d      	add	r5, r3
 80070a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	bfc1      	itttt	gt
 80070b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80070b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80070bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070c0:	bfda      	itte	le
 80070c2:	f1c3 0320 	rsble	r3, r3, #32
 80070c6:	fa06 f003 	lslle.w	r0, r6, r3
 80070ca:	4318      	orrgt	r0, r3
 80070cc:	f7f9 fa1a 	bl	8000504 <__aeabi_ui2d>
 80070d0:	2301      	movs	r3, #1
 80070d2:	4606      	mov	r6, r0
 80070d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070d8:	3d01      	subs	r5, #1
 80070da:	9310      	str	r3, [sp, #64]	; 0x40
 80070dc:	e771      	b.n	8006fc2 <_dtoa_r+0x11a>
 80070de:	2301      	movs	r3, #1
 80070e0:	e7b6      	b.n	8007050 <_dtoa_r+0x1a8>
 80070e2:	900e      	str	r0, [sp, #56]	; 0x38
 80070e4:	e7b5      	b.n	8007052 <_dtoa_r+0x1aa>
 80070e6:	f1ca 0300 	rsb	r3, sl, #0
 80070ea:	9306      	str	r3, [sp, #24]
 80070ec:	2300      	movs	r3, #0
 80070ee:	eba8 080a 	sub.w	r8, r8, sl
 80070f2:	930d      	str	r3, [sp, #52]	; 0x34
 80070f4:	e7c2      	b.n	800707c <_dtoa_r+0x1d4>
 80070f6:	2300      	movs	r3, #0
 80070f8:	9308      	str	r3, [sp, #32]
 80070fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dc39      	bgt.n	8007174 <_dtoa_r+0x2cc>
 8007100:	f04f 0901 	mov.w	r9, #1
 8007104:	f8cd 9004 	str.w	r9, [sp, #4]
 8007108:	464b      	mov	r3, r9
 800710a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800710e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007110:	2200      	movs	r2, #0
 8007112:	6042      	str	r2, [r0, #4]
 8007114:	2204      	movs	r2, #4
 8007116:	f102 0614 	add.w	r6, r2, #20
 800711a:	429e      	cmp	r6, r3
 800711c:	6841      	ldr	r1, [r0, #4]
 800711e:	d92f      	bls.n	8007180 <_dtoa_r+0x2d8>
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fcc7 	bl	8007ab4 <_Balloc>
 8007126:	9000      	str	r0, [sp, #0]
 8007128:	2800      	cmp	r0, #0
 800712a:	d14b      	bne.n	80071c4 <_dtoa_r+0x31c>
 800712c:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <_dtoa_r+0x318>)
 800712e:	4602      	mov	r2, r0
 8007130:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007134:	e6d1      	b.n	8006eda <_dtoa_r+0x32>
 8007136:	2301      	movs	r3, #1
 8007138:	e7de      	b.n	80070f8 <_dtoa_r+0x250>
 800713a:	2300      	movs	r3, #0
 800713c:	9308      	str	r3, [sp, #32]
 800713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007140:	eb0a 0903 	add.w	r9, sl, r3
 8007144:	f109 0301 	add.w	r3, r9, #1
 8007148:	2b01      	cmp	r3, #1
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	bfb8      	it	lt
 800714e:	2301      	movlt	r3, #1
 8007150:	e7dd      	b.n	800710e <_dtoa_r+0x266>
 8007152:	2301      	movs	r3, #1
 8007154:	e7f2      	b.n	800713c <_dtoa_r+0x294>
 8007156:	2501      	movs	r5, #1
 8007158:	2300      	movs	r3, #0
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	9508      	str	r5, [sp, #32]
 800715e:	f04f 39ff 	mov.w	r9, #4294967295
 8007162:	2200      	movs	r2, #0
 8007164:	f8cd 9004 	str.w	r9, [sp, #4]
 8007168:	2312      	movs	r3, #18
 800716a:	9209      	str	r2, [sp, #36]	; 0x24
 800716c:	e7cf      	b.n	800710e <_dtoa_r+0x266>
 800716e:	2301      	movs	r3, #1
 8007170:	9308      	str	r3, [sp, #32]
 8007172:	e7f4      	b.n	800715e <_dtoa_r+0x2b6>
 8007174:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007178:	f8cd 9004 	str.w	r9, [sp, #4]
 800717c:	464b      	mov	r3, r9
 800717e:	e7c6      	b.n	800710e <_dtoa_r+0x266>
 8007180:	3101      	adds	r1, #1
 8007182:	6041      	str	r1, [r0, #4]
 8007184:	0052      	lsls	r2, r2, #1
 8007186:	e7c6      	b.n	8007116 <_dtoa_r+0x26e>
 8007188:	636f4361 	.word	0x636f4361
 800718c:	3fd287a7 	.word	0x3fd287a7
 8007190:	8b60c8b3 	.word	0x8b60c8b3
 8007194:	3fc68a28 	.word	0x3fc68a28
 8007198:	509f79fb 	.word	0x509f79fb
 800719c:	3fd34413 	.word	0x3fd34413
 80071a0:	08009745 	.word	0x08009745
 80071a4:	0800975c 	.word	0x0800975c
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	08009741 	.word	0x08009741
 80071b0:	08009738 	.word	0x08009738
 80071b4:	08009715 	.word	0x08009715
 80071b8:	3ff80000 	.word	0x3ff80000
 80071bc:	08009858 	.word	0x08009858
 80071c0:	080097bb 	.word	0x080097bb
 80071c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c6:	9a00      	ldr	r2, [sp, #0]
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	2b0e      	cmp	r3, #14
 80071ce:	f200 80ad 	bhi.w	800732c <_dtoa_r+0x484>
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	f000 80aa 	beq.w	800732c <_dtoa_r+0x484>
 80071d8:	f1ba 0f00 	cmp.w	sl, #0
 80071dc:	dd36      	ble.n	800724c <_dtoa_r+0x3a4>
 80071de:	4ac3      	ldr	r2, [pc, #780]	; (80074ec <_dtoa_r+0x644>)
 80071e0:	f00a 030f 	and.w	r3, sl, #15
 80071e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071e8:	ed93 7b00 	vldr	d7, [r3]
 80071ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80071f4:	eeb0 8a47 	vmov.f32	s16, s14
 80071f8:	eef0 8a67 	vmov.f32	s17, s15
 80071fc:	d016      	beq.n	800722c <_dtoa_r+0x384>
 80071fe:	4bbc      	ldr	r3, [pc, #752]	; (80074f0 <_dtoa_r+0x648>)
 8007200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007208:	f7f9 fb20 	bl	800084c <__aeabi_ddiv>
 800720c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007210:	f007 070f 	and.w	r7, r7, #15
 8007214:	2503      	movs	r5, #3
 8007216:	4eb6      	ldr	r6, [pc, #728]	; (80074f0 <_dtoa_r+0x648>)
 8007218:	b957      	cbnz	r7, 8007230 <_dtoa_r+0x388>
 800721a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800721e:	ec53 2b18 	vmov	r2, r3, d8
 8007222:	f7f9 fb13 	bl	800084c <__aeabi_ddiv>
 8007226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800722a:	e029      	b.n	8007280 <_dtoa_r+0x3d8>
 800722c:	2502      	movs	r5, #2
 800722e:	e7f2      	b.n	8007216 <_dtoa_r+0x36e>
 8007230:	07f9      	lsls	r1, r7, #31
 8007232:	d508      	bpl.n	8007246 <_dtoa_r+0x39e>
 8007234:	ec51 0b18 	vmov	r0, r1, d8
 8007238:	e9d6 2300 	ldrd	r2, r3, [r6]
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	ec41 0b18 	vmov	d8, r0, r1
 8007244:	3501      	adds	r5, #1
 8007246:	107f      	asrs	r7, r7, #1
 8007248:	3608      	adds	r6, #8
 800724a:	e7e5      	b.n	8007218 <_dtoa_r+0x370>
 800724c:	f000 80a6 	beq.w	800739c <_dtoa_r+0x4f4>
 8007250:	f1ca 0600 	rsb	r6, sl, #0
 8007254:	4ba5      	ldr	r3, [pc, #660]	; (80074ec <_dtoa_r+0x644>)
 8007256:	4fa6      	ldr	r7, [pc, #664]	; (80074f0 <_dtoa_r+0x648>)
 8007258:	f006 020f 	and.w	r2, r6, #15
 800725c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007270:	1136      	asrs	r6, r6, #4
 8007272:	2300      	movs	r3, #0
 8007274:	2502      	movs	r5, #2
 8007276:	2e00      	cmp	r6, #0
 8007278:	f040 8085 	bne.w	8007386 <_dtoa_r+0x4de>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1d2      	bne.n	8007226 <_dtoa_r+0x37e>
 8007280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 808c 	beq.w	80073a0 <_dtoa_r+0x4f8>
 8007288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800728c:	4b99      	ldr	r3, [pc, #612]	; (80074f4 <_dtoa_r+0x64c>)
 800728e:	2200      	movs	r2, #0
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 fc22 	bl	8000adc <__aeabi_dcmplt>
 8007298:	2800      	cmp	r0, #0
 800729a:	f000 8081 	beq.w	80073a0 <_dtoa_r+0x4f8>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d07d      	beq.n	80073a0 <_dtoa_r+0x4f8>
 80072a4:	f1b9 0f00 	cmp.w	r9, #0
 80072a8:	dd3c      	ble.n	8007324 <_dtoa_r+0x47c>
 80072aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072ae:	9307      	str	r3, [sp, #28]
 80072b0:	2200      	movs	r2, #0
 80072b2:	4b91      	ldr	r3, [pc, #580]	; (80074f8 <_dtoa_r+0x650>)
 80072b4:	4630      	mov	r0, r6
 80072b6:	4639      	mov	r1, r7
 80072b8:	f7f9 f99e 	bl	80005f8 <__aeabi_dmul>
 80072bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c0:	3501      	adds	r5, #1
 80072c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80072c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072ca:	4628      	mov	r0, r5
 80072cc:	f7f9 f92a 	bl	8000524 <__aeabi_i2d>
 80072d0:	4632      	mov	r2, r6
 80072d2:	463b      	mov	r3, r7
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	4b88      	ldr	r3, [pc, #544]	; (80074fc <_dtoa_r+0x654>)
 80072da:	2200      	movs	r2, #0
 80072dc:	f7f8 ffd6 	bl	800028c <__adddf3>
 80072e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e8:	9303      	str	r3, [sp, #12]
 80072ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d15c      	bne.n	80073aa <_dtoa_r+0x502>
 80072f0:	4b83      	ldr	r3, [pc, #524]	; (8007500 <_dtoa_r+0x658>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f8 ffc6 	bl	8000288 <__aeabi_dsub>
 80072fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007300:	4606      	mov	r6, r0
 8007302:	460f      	mov	r7, r1
 8007304:	f7f9 fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8007308:	2800      	cmp	r0, #0
 800730a:	f040 8296 	bne.w	800783a <_dtoa_r+0x992>
 800730e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007312:	4630      	mov	r0, r6
 8007314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007318:	4639      	mov	r1, r7
 800731a:	f7f9 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800731e:	2800      	cmp	r0, #0
 8007320:	f040 8288 	bne.w	8007834 <_dtoa_r+0x98c>
 8007324:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007328:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800732c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800732e:	2b00      	cmp	r3, #0
 8007330:	f2c0 8158 	blt.w	80075e4 <_dtoa_r+0x73c>
 8007334:	f1ba 0f0e 	cmp.w	sl, #14
 8007338:	f300 8154 	bgt.w	80075e4 <_dtoa_r+0x73c>
 800733c:	4b6b      	ldr	r3, [pc, #428]	; (80074ec <_dtoa_r+0x644>)
 800733e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007342:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	f280 80e3 	bge.w	8007514 <_dtoa_r+0x66c>
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f300 80df 	bgt.w	8007514 <_dtoa_r+0x66c>
 8007356:	f040 826d 	bne.w	8007834 <_dtoa_r+0x98c>
 800735a:	4b69      	ldr	r3, [pc, #420]	; (8007500 <_dtoa_r+0x658>)
 800735c:	2200      	movs	r2, #0
 800735e:	4640      	mov	r0, r8
 8007360:	4649      	mov	r1, r9
 8007362:	f7f9 f949 	bl	80005f8 <__aeabi_dmul>
 8007366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800736a:	f7f9 fbcb 	bl	8000b04 <__aeabi_dcmpge>
 800736e:	9e01      	ldr	r6, [sp, #4]
 8007370:	4637      	mov	r7, r6
 8007372:	2800      	cmp	r0, #0
 8007374:	f040 8243 	bne.w	80077fe <_dtoa_r+0x956>
 8007378:	9d00      	ldr	r5, [sp, #0]
 800737a:	2331      	movs	r3, #49	; 0x31
 800737c:	f805 3b01 	strb.w	r3, [r5], #1
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	e23f      	b.n	8007806 <_dtoa_r+0x95e>
 8007386:	07f2      	lsls	r2, r6, #31
 8007388:	d505      	bpl.n	8007396 <_dtoa_r+0x4ee>
 800738a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738e:	f7f9 f933 	bl	80005f8 <__aeabi_dmul>
 8007392:	3501      	adds	r5, #1
 8007394:	2301      	movs	r3, #1
 8007396:	1076      	asrs	r6, r6, #1
 8007398:	3708      	adds	r7, #8
 800739a:	e76c      	b.n	8007276 <_dtoa_r+0x3ce>
 800739c:	2502      	movs	r5, #2
 800739e:	e76f      	b.n	8007280 <_dtoa_r+0x3d8>
 80073a0:	9b01      	ldr	r3, [sp, #4]
 80073a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80073a6:	930c      	str	r3, [sp, #48]	; 0x30
 80073a8:	e78d      	b.n	80072c6 <_dtoa_r+0x41e>
 80073aa:	9900      	ldr	r1, [sp, #0]
 80073ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b0:	4b4e      	ldr	r3, [pc, #312]	; (80074ec <_dtoa_r+0x644>)
 80073b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073b6:	4401      	add	r1, r0
 80073b8:	9102      	str	r1, [sp, #8]
 80073ba:	9908      	ldr	r1, [sp, #32]
 80073bc:	eeb0 8a47 	vmov.f32	s16, s14
 80073c0:	eef0 8a67 	vmov.f32	s17, s15
 80073c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073cc:	2900      	cmp	r1, #0
 80073ce:	d045      	beq.n	800745c <_dtoa_r+0x5b4>
 80073d0:	494c      	ldr	r1, [pc, #304]	; (8007504 <_dtoa_r+0x65c>)
 80073d2:	2000      	movs	r0, #0
 80073d4:	f7f9 fa3a 	bl	800084c <__aeabi_ddiv>
 80073d8:	ec53 2b18 	vmov	r2, r3, d8
 80073dc:	f7f8 ff54 	bl	8000288 <__aeabi_dsub>
 80073e0:	9d00      	ldr	r5, [sp, #0]
 80073e2:	ec41 0b18 	vmov	d8, r0, r1
 80073e6:	4639      	mov	r1, r7
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7f9 fbb5 	bl	8000b58 <__aeabi_d2iz>
 80073ee:	900c      	str	r0, [sp, #48]	; 0x30
 80073f0:	f7f9 f898 	bl	8000524 <__aeabi_i2d>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f8 ff44 	bl	8000288 <__aeabi_dsub>
 8007400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007402:	3330      	adds	r3, #48	; 0x30
 8007404:	f805 3b01 	strb.w	r3, [r5], #1
 8007408:	ec53 2b18 	vmov	r2, r3, d8
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	f7f9 fb64 	bl	8000adc <__aeabi_dcmplt>
 8007414:	2800      	cmp	r0, #0
 8007416:	d165      	bne.n	80074e4 <_dtoa_r+0x63c>
 8007418:	4632      	mov	r2, r6
 800741a:	463b      	mov	r3, r7
 800741c:	4935      	ldr	r1, [pc, #212]	; (80074f4 <_dtoa_r+0x64c>)
 800741e:	2000      	movs	r0, #0
 8007420:	f7f8 ff32 	bl	8000288 <__aeabi_dsub>
 8007424:	ec53 2b18 	vmov	r2, r3, d8
 8007428:	f7f9 fb58 	bl	8000adc <__aeabi_dcmplt>
 800742c:	2800      	cmp	r0, #0
 800742e:	f040 80b9 	bne.w	80075a4 <_dtoa_r+0x6fc>
 8007432:	9b02      	ldr	r3, [sp, #8]
 8007434:	429d      	cmp	r5, r3
 8007436:	f43f af75 	beq.w	8007324 <_dtoa_r+0x47c>
 800743a:	4b2f      	ldr	r3, [pc, #188]	; (80074f8 <_dtoa_r+0x650>)
 800743c:	ec51 0b18 	vmov	r0, r1, d8
 8007440:	2200      	movs	r2, #0
 8007442:	f7f9 f8d9 	bl	80005f8 <__aeabi_dmul>
 8007446:	4b2c      	ldr	r3, [pc, #176]	; (80074f8 <_dtoa_r+0x650>)
 8007448:	ec41 0b18 	vmov	d8, r0, r1
 800744c:	2200      	movs	r2, #0
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 f8d1 	bl	80005f8 <__aeabi_dmul>
 8007456:	4606      	mov	r6, r0
 8007458:	460f      	mov	r7, r1
 800745a:	e7c4      	b.n	80073e6 <_dtoa_r+0x53e>
 800745c:	ec51 0b17 	vmov	r0, r1, d7
 8007460:	f7f9 f8ca 	bl	80005f8 <__aeabi_dmul>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	9d00      	ldr	r5, [sp, #0]
 8007468:	930c      	str	r3, [sp, #48]	; 0x30
 800746a:	ec41 0b18 	vmov	d8, r0, r1
 800746e:	4639      	mov	r1, r7
 8007470:	4630      	mov	r0, r6
 8007472:	f7f9 fb71 	bl	8000b58 <__aeabi_d2iz>
 8007476:	9011      	str	r0, [sp, #68]	; 0x44
 8007478:	f7f9 f854 	bl	8000524 <__aeabi_i2d>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	f7f8 ff00 	bl	8000288 <__aeabi_dsub>
 8007488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800748a:	3330      	adds	r3, #48	; 0x30
 800748c:	f805 3b01 	strb.w	r3, [r5], #1
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	429d      	cmp	r5, r3
 8007494:	4606      	mov	r6, r0
 8007496:	460f      	mov	r7, r1
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	d134      	bne.n	8007508 <_dtoa_r+0x660>
 800749e:	4b19      	ldr	r3, [pc, #100]	; (8007504 <_dtoa_r+0x65c>)
 80074a0:	ec51 0b18 	vmov	r0, r1, d8
 80074a4:	f7f8 fef2 	bl	800028c <__adddf3>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4630      	mov	r0, r6
 80074ae:	4639      	mov	r1, r7
 80074b0:	f7f9 fb32 	bl	8000b18 <__aeabi_dcmpgt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d175      	bne.n	80075a4 <_dtoa_r+0x6fc>
 80074b8:	ec53 2b18 	vmov	r2, r3, d8
 80074bc:	4911      	ldr	r1, [pc, #68]	; (8007504 <_dtoa_r+0x65c>)
 80074be:	2000      	movs	r0, #0
 80074c0:	f7f8 fee2 	bl	8000288 <__aeabi_dsub>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 fb06 	bl	8000adc <__aeabi_dcmplt>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f43f af27 	beq.w	8007324 <_dtoa_r+0x47c>
 80074d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074d8:	1e6b      	subs	r3, r5, #1
 80074da:	930c      	str	r3, [sp, #48]	; 0x30
 80074dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d0f8      	beq.n	80074d6 <_dtoa_r+0x62e>
 80074e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074e8:	e04a      	b.n	8007580 <_dtoa_r+0x6d8>
 80074ea:	bf00      	nop
 80074ec:	08009858 	.word	0x08009858
 80074f0:	08009830 	.word	0x08009830
 80074f4:	3ff00000 	.word	0x3ff00000
 80074f8:	40240000 	.word	0x40240000
 80074fc:	401c0000 	.word	0x401c0000
 8007500:	40140000 	.word	0x40140000
 8007504:	3fe00000 	.word	0x3fe00000
 8007508:	4baf      	ldr	r3, [pc, #700]	; (80077c8 <_dtoa_r+0x920>)
 800750a:	f7f9 f875 	bl	80005f8 <__aeabi_dmul>
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	e7ac      	b.n	800746e <_dtoa_r+0x5c6>
 8007514:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007518:	9d00      	ldr	r5, [sp, #0]
 800751a:	4642      	mov	r2, r8
 800751c:	464b      	mov	r3, r9
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f9 f993 	bl	800084c <__aeabi_ddiv>
 8007526:	f7f9 fb17 	bl	8000b58 <__aeabi_d2iz>
 800752a:	9002      	str	r0, [sp, #8]
 800752c:	f7f8 fffa 	bl	8000524 <__aeabi_i2d>
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	f7f9 f860 	bl	80005f8 <__aeabi_dmul>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4630      	mov	r0, r6
 800753e:	4639      	mov	r1, r7
 8007540:	f7f8 fea2 	bl	8000288 <__aeabi_dsub>
 8007544:	9e02      	ldr	r6, [sp, #8]
 8007546:	9f01      	ldr	r7, [sp, #4]
 8007548:	3630      	adds	r6, #48	; 0x30
 800754a:	f805 6b01 	strb.w	r6, [r5], #1
 800754e:	9e00      	ldr	r6, [sp, #0]
 8007550:	1bae      	subs	r6, r5, r6
 8007552:	42b7      	cmp	r7, r6
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	d137      	bne.n	80075ca <_dtoa_r+0x722>
 800755a:	f7f8 fe97 	bl	800028c <__adddf3>
 800755e:	4642      	mov	r2, r8
 8007560:	464b      	mov	r3, r9
 8007562:	4606      	mov	r6, r0
 8007564:	460f      	mov	r7, r1
 8007566:	f7f9 fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800756a:	b9c8      	cbnz	r0, 80075a0 <_dtoa_r+0x6f8>
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007578:	b110      	cbz	r0, 8007580 <_dtoa_r+0x6d8>
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	07d9      	lsls	r1, r3, #31
 800757e:	d40f      	bmi.n	80075a0 <_dtoa_r+0x6f8>
 8007580:	4620      	mov	r0, r4
 8007582:	4659      	mov	r1, fp
 8007584:	f000 fad6 	bl	8007b34 <_Bfree>
 8007588:	2300      	movs	r3, #0
 800758a:	702b      	strb	r3, [r5, #0]
 800758c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800758e:	f10a 0001 	add.w	r0, sl, #1
 8007592:	6018      	str	r0, [r3, #0]
 8007594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007596:	2b00      	cmp	r3, #0
 8007598:	f43f acd8 	beq.w	8006f4c <_dtoa_r+0xa4>
 800759c:	601d      	str	r5, [r3, #0]
 800759e:	e4d5      	b.n	8006f4c <_dtoa_r+0xa4>
 80075a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80075a4:	462b      	mov	r3, r5
 80075a6:	461d      	mov	r5, r3
 80075a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ac:	2a39      	cmp	r2, #57	; 0x39
 80075ae:	d108      	bne.n	80075c2 <_dtoa_r+0x71a>
 80075b0:	9a00      	ldr	r2, [sp, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d1f7      	bne.n	80075a6 <_dtoa_r+0x6fe>
 80075b6:	9a07      	ldr	r2, [sp, #28]
 80075b8:	9900      	ldr	r1, [sp, #0]
 80075ba:	3201      	adds	r2, #1
 80075bc:	9207      	str	r2, [sp, #28]
 80075be:	2230      	movs	r2, #48	; 0x30
 80075c0:	700a      	strb	r2, [r1, #0]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	3201      	adds	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	e78c      	b.n	80074e4 <_dtoa_r+0x63c>
 80075ca:	4b7f      	ldr	r3, [pc, #508]	; (80077c8 <_dtoa_r+0x920>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	f7f9 f813 	bl	80005f8 <__aeabi_dmul>
 80075d2:	2200      	movs	r2, #0
 80075d4:	2300      	movs	r3, #0
 80075d6:	4606      	mov	r6, r0
 80075d8:	460f      	mov	r7, r1
 80075da:	f7f9 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d09b      	beq.n	800751a <_dtoa_r+0x672>
 80075e2:	e7cd      	b.n	8007580 <_dtoa_r+0x6d8>
 80075e4:	9a08      	ldr	r2, [sp, #32]
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	f000 80c4 	beq.w	8007774 <_dtoa_r+0x8cc>
 80075ec:	9a05      	ldr	r2, [sp, #20]
 80075ee:	2a01      	cmp	r2, #1
 80075f0:	f300 80a8 	bgt.w	8007744 <_dtoa_r+0x89c>
 80075f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	f000 80a0 	beq.w	800773c <_dtoa_r+0x894>
 80075fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007600:	9e06      	ldr	r6, [sp, #24]
 8007602:	4645      	mov	r5, r8
 8007604:	9a04      	ldr	r2, [sp, #16]
 8007606:	2101      	movs	r1, #1
 8007608:	441a      	add	r2, r3
 800760a:	4620      	mov	r0, r4
 800760c:	4498      	add	r8, r3
 800760e:	9204      	str	r2, [sp, #16]
 8007610:	f000 fb4c 	bl	8007cac <__i2b>
 8007614:	4607      	mov	r7, r0
 8007616:	2d00      	cmp	r5, #0
 8007618:	dd0b      	ble.n	8007632 <_dtoa_r+0x78a>
 800761a:	9b04      	ldr	r3, [sp, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	dd08      	ble.n	8007632 <_dtoa_r+0x78a>
 8007620:	42ab      	cmp	r3, r5
 8007622:	9a04      	ldr	r2, [sp, #16]
 8007624:	bfa8      	it	ge
 8007626:	462b      	movge	r3, r5
 8007628:	eba8 0803 	sub.w	r8, r8, r3
 800762c:	1aed      	subs	r5, r5, r3
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	9b06      	ldr	r3, [sp, #24]
 8007634:	b1fb      	cbz	r3, 8007676 <_dtoa_r+0x7ce>
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 809f 	beq.w	800777c <_dtoa_r+0x8d4>
 800763e:	2e00      	cmp	r6, #0
 8007640:	dd11      	ble.n	8007666 <_dtoa_r+0x7be>
 8007642:	4639      	mov	r1, r7
 8007644:	4632      	mov	r2, r6
 8007646:	4620      	mov	r0, r4
 8007648:	f000 fbec 	bl	8007e24 <__pow5mult>
 800764c:	465a      	mov	r2, fp
 800764e:	4601      	mov	r1, r0
 8007650:	4607      	mov	r7, r0
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fb40 	bl	8007cd8 <__multiply>
 8007658:	4659      	mov	r1, fp
 800765a:	9007      	str	r0, [sp, #28]
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fa69 	bl	8007b34 <_Bfree>
 8007662:	9b07      	ldr	r3, [sp, #28]
 8007664:	469b      	mov	fp, r3
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	1b9a      	subs	r2, r3, r6
 800766a:	d004      	beq.n	8007676 <_dtoa_r+0x7ce>
 800766c:	4659      	mov	r1, fp
 800766e:	4620      	mov	r0, r4
 8007670:	f000 fbd8 	bl	8007e24 <__pow5mult>
 8007674:	4683      	mov	fp, r0
 8007676:	2101      	movs	r1, #1
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fb17 	bl	8007cac <__i2b>
 800767e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007680:	2b00      	cmp	r3, #0
 8007682:	4606      	mov	r6, r0
 8007684:	dd7c      	ble.n	8007780 <_dtoa_r+0x8d8>
 8007686:	461a      	mov	r2, r3
 8007688:	4601      	mov	r1, r0
 800768a:	4620      	mov	r0, r4
 800768c:	f000 fbca 	bl	8007e24 <__pow5mult>
 8007690:	9b05      	ldr	r3, [sp, #20]
 8007692:	2b01      	cmp	r3, #1
 8007694:	4606      	mov	r6, r0
 8007696:	dd76      	ble.n	8007786 <_dtoa_r+0x8de>
 8007698:	2300      	movs	r3, #0
 800769a:	9306      	str	r3, [sp, #24]
 800769c:	6933      	ldr	r3, [r6, #16]
 800769e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076a2:	6918      	ldr	r0, [r3, #16]
 80076a4:	f000 fab2 	bl	8007c0c <__hi0bits>
 80076a8:	f1c0 0020 	rsb	r0, r0, #32
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	4418      	add	r0, r3
 80076b0:	f010 001f 	ands.w	r0, r0, #31
 80076b4:	f000 8086 	beq.w	80077c4 <_dtoa_r+0x91c>
 80076b8:	f1c0 0320 	rsb	r3, r0, #32
 80076bc:	2b04      	cmp	r3, #4
 80076be:	dd7f      	ble.n	80077c0 <_dtoa_r+0x918>
 80076c0:	f1c0 001c 	rsb	r0, r0, #28
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	4403      	add	r3, r0
 80076c8:	4480      	add	r8, r0
 80076ca:	4405      	add	r5, r0
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	f1b8 0f00 	cmp.w	r8, #0
 80076d2:	dd05      	ble.n	80076e0 <_dtoa_r+0x838>
 80076d4:	4659      	mov	r1, fp
 80076d6:	4642      	mov	r2, r8
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 fbfd 	bl	8007ed8 <__lshift>
 80076de:	4683      	mov	fp, r0
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dd05      	ble.n	80076f2 <_dtoa_r+0x84a>
 80076e6:	4631      	mov	r1, r6
 80076e8:	461a      	mov	r2, r3
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fbf4 	bl	8007ed8 <__lshift>
 80076f0:	4606      	mov	r6, r0
 80076f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d069      	beq.n	80077cc <_dtoa_r+0x924>
 80076f8:	4631      	mov	r1, r6
 80076fa:	4658      	mov	r0, fp
 80076fc:	f000 fc58 	bl	8007fb0 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	da63      	bge.n	80077cc <_dtoa_r+0x924>
 8007704:	2300      	movs	r3, #0
 8007706:	4659      	mov	r1, fp
 8007708:	220a      	movs	r2, #10
 800770a:	4620      	mov	r0, r4
 800770c:	f000 fa34 	bl	8007b78 <__multadd>
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007716:	4683      	mov	fp, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 818f 	beq.w	8007a3c <_dtoa_r+0xb94>
 800771e:	4639      	mov	r1, r7
 8007720:	2300      	movs	r3, #0
 8007722:	220a      	movs	r2, #10
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fa27 	bl	8007b78 <__multadd>
 800772a:	f1b9 0f00 	cmp.w	r9, #0
 800772e:	4607      	mov	r7, r0
 8007730:	f300 808e 	bgt.w	8007850 <_dtoa_r+0x9a8>
 8007734:	9b05      	ldr	r3, [sp, #20]
 8007736:	2b02      	cmp	r3, #2
 8007738:	dc50      	bgt.n	80077dc <_dtoa_r+0x934>
 800773a:	e089      	b.n	8007850 <_dtoa_r+0x9a8>
 800773c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800773e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007742:	e75d      	b.n	8007600 <_dtoa_r+0x758>
 8007744:	9b01      	ldr	r3, [sp, #4]
 8007746:	1e5e      	subs	r6, r3, #1
 8007748:	9b06      	ldr	r3, [sp, #24]
 800774a:	42b3      	cmp	r3, r6
 800774c:	bfbf      	itttt	lt
 800774e:	9b06      	ldrlt	r3, [sp, #24]
 8007750:	9606      	strlt	r6, [sp, #24]
 8007752:	1af2      	sublt	r2, r6, r3
 8007754:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007756:	bfb6      	itet	lt
 8007758:	189b      	addlt	r3, r3, r2
 800775a:	1b9e      	subge	r6, r3, r6
 800775c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	bfb8      	it	lt
 8007762:	2600      	movlt	r6, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	bfb5      	itete	lt
 8007768:	eba8 0503 	sublt.w	r5, r8, r3
 800776c:	9b01      	ldrge	r3, [sp, #4]
 800776e:	2300      	movlt	r3, #0
 8007770:	4645      	movge	r5, r8
 8007772:	e747      	b.n	8007604 <_dtoa_r+0x75c>
 8007774:	9e06      	ldr	r6, [sp, #24]
 8007776:	9f08      	ldr	r7, [sp, #32]
 8007778:	4645      	mov	r5, r8
 800777a:	e74c      	b.n	8007616 <_dtoa_r+0x76e>
 800777c:	9a06      	ldr	r2, [sp, #24]
 800777e:	e775      	b.n	800766c <_dtoa_r+0x7c4>
 8007780:	9b05      	ldr	r3, [sp, #20]
 8007782:	2b01      	cmp	r3, #1
 8007784:	dc18      	bgt.n	80077b8 <_dtoa_r+0x910>
 8007786:	9b02      	ldr	r3, [sp, #8]
 8007788:	b9b3      	cbnz	r3, 80077b8 <_dtoa_r+0x910>
 800778a:	9b03      	ldr	r3, [sp, #12]
 800778c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007790:	b9a3      	cbnz	r3, 80077bc <_dtoa_r+0x914>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007798:	0d1b      	lsrs	r3, r3, #20
 800779a:	051b      	lsls	r3, r3, #20
 800779c:	b12b      	cbz	r3, 80077aa <_dtoa_r+0x902>
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	3301      	adds	r3, #1
 80077a2:	9304      	str	r3, [sp, #16]
 80077a4:	f108 0801 	add.w	r8, r8, #1
 80077a8:	2301      	movs	r3, #1
 80077aa:	9306      	str	r3, [sp, #24]
 80077ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f47f af74 	bne.w	800769c <_dtoa_r+0x7f4>
 80077b4:	2001      	movs	r0, #1
 80077b6:	e779      	b.n	80076ac <_dtoa_r+0x804>
 80077b8:	2300      	movs	r3, #0
 80077ba:	e7f6      	b.n	80077aa <_dtoa_r+0x902>
 80077bc:	9b02      	ldr	r3, [sp, #8]
 80077be:	e7f4      	b.n	80077aa <_dtoa_r+0x902>
 80077c0:	d085      	beq.n	80076ce <_dtoa_r+0x826>
 80077c2:	4618      	mov	r0, r3
 80077c4:	301c      	adds	r0, #28
 80077c6:	e77d      	b.n	80076c4 <_dtoa_r+0x81c>
 80077c8:	40240000 	.word	0x40240000
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dc38      	bgt.n	8007844 <_dtoa_r+0x99c>
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	dd35      	ble.n	8007844 <_dtoa_r+0x99c>
 80077d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077dc:	f1b9 0f00 	cmp.w	r9, #0
 80077e0:	d10d      	bne.n	80077fe <_dtoa_r+0x956>
 80077e2:	4631      	mov	r1, r6
 80077e4:	464b      	mov	r3, r9
 80077e6:	2205      	movs	r2, #5
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 f9c5 	bl	8007b78 <__multadd>
 80077ee:	4601      	mov	r1, r0
 80077f0:	4606      	mov	r6, r0
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fbdc 	bl	8007fb0 <__mcmp>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f73f adbd 	bgt.w	8007378 <_dtoa_r+0x4d0>
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	9d00      	ldr	r5, [sp, #0]
 8007802:	ea6f 0a03 	mvn.w	sl, r3
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	4631      	mov	r1, r6
 800780c:	4620      	mov	r0, r4
 800780e:	f000 f991 	bl	8007b34 <_Bfree>
 8007812:	2f00      	cmp	r7, #0
 8007814:	f43f aeb4 	beq.w	8007580 <_dtoa_r+0x6d8>
 8007818:	f1b8 0f00 	cmp.w	r8, #0
 800781c:	d005      	beq.n	800782a <_dtoa_r+0x982>
 800781e:	45b8      	cmp	r8, r7
 8007820:	d003      	beq.n	800782a <_dtoa_r+0x982>
 8007822:	4641      	mov	r1, r8
 8007824:	4620      	mov	r0, r4
 8007826:	f000 f985 	bl	8007b34 <_Bfree>
 800782a:	4639      	mov	r1, r7
 800782c:	4620      	mov	r0, r4
 800782e:	f000 f981 	bl	8007b34 <_Bfree>
 8007832:	e6a5      	b.n	8007580 <_dtoa_r+0x6d8>
 8007834:	2600      	movs	r6, #0
 8007836:	4637      	mov	r7, r6
 8007838:	e7e1      	b.n	80077fe <_dtoa_r+0x956>
 800783a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800783c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007840:	4637      	mov	r7, r6
 8007842:	e599      	b.n	8007378 <_dtoa_r+0x4d0>
 8007844:	9b08      	ldr	r3, [sp, #32]
 8007846:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80fd 	beq.w	8007a4a <_dtoa_r+0xba2>
 8007850:	2d00      	cmp	r5, #0
 8007852:	dd05      	ble.n	8007860 <_dtoa_r+0x9b8>
 8007854:	4639      	mov	r1, r7
 8007856:	462a      	mov	r2, r5
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fb3d 	bl	8007ed8 <__lshift>
 800785e:	4607      	mov	r7, r0
 8007860:	9b06      	ldr	r3, [sp, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d05c      	beq.n	8007920 <_dtoa_r+0xa78>
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4620      	mov	r0, r4
 800786a:	f000 f923 	bl	8007ab4 <_Balloc>
 800786e:	4605      	mov	r5, r0
 8007870:	b928      	cbnz	r0, 800787e <_dtoa_r+0x9d6>
 8007872:	4b80      	ldr	r3, [pc, #512]	; (8007a74 <_dtoa_r+0xbcc>)
 8007874:	4602      	mov	r2, r0
 8007876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800787a:	f7ff bb2e 	b.w	8006eda <_dtoa_r+0x32>
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	3202      	adds	r2, #2
 8007882:	0092      	lsls	r2, r2, #2
 8007884:	f107 010c 	add.w	r1, r7, #12
 8007888:	300c      	adds	r0, #12
 800788a:	f000 f905 	bl	8007a98 <memcpy>
 800788e:	2201      	movs	r2, #1
 8007890:	4629      	mov	r1, r5
 8007892:	4620      	mov	r0, r4
 8007894:	f000 fb20 	bl	8007ed8 <__lshift>
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	444b      	add	r3, r9
 80078a2:	9307      	str	r3, [sp, #28]
 80078a4:	9b02      	ldr	r3, [sp, #8]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	46b8      	mov	r8, r7
 80078ac:	9306      	str	r3, [sp, #24]
 80078ae:	4607      	mov	r7, r0
 80078b0:	9b01      	ldr	r3, [sp, #4]
 80078b2:	4631      	mov	r1, r6
 80078b4:	3b01      	subs	r3, #1
 80078b6:	4658      	mov	r0, fp
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	f7ff fa67 	bl	8006d8c <quorem>
 80078be:	4603      	mov	r3, r0
 80078c0:	3330      	adds	r3, #48	; 0x30
 80078c2:	9004      	str	r0, [sp, #16]
 80078c4:	4641      	mov	r1, r8
 80078c6:	4658      	mov	r0, fp
 80078c8:	9308      	str	r3, [sp, #32]
 80078ca:	f000 fb71 	bl	8007fb0 <__mcmp>
 80078ce:	463a      	mov	r2, r7
 80078d0:	4681      	mov	r9, r0
 80078d2:	4631      	mov	r1, r6
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fb87 	bl	8007fe8 <__mdiff>
 80078da:	68c2      	ldr	r2, [r0, #12]
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	4605      	mov	r5, r0
 80078e0:	bb02      	cbnz	r2, 8007924 <_dtoa_r+0xa7c>
 80078e2:	4601      	mov	r1, r0
 80078e4:	4658      	mov	r0, fp
 80078e6:	f000 fb63 	bl	8007fb0 <__mcmp>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	4602      	mov	r2, r0
 80078ee:	4629      	mov	r1, r5
 80078f0:	4620      	mov	r0, r4
 80078f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80078f6:	f000 f91d 	bl	8007b34 <_Bfree>
 80078fa:	9b05      	ldr	r3, [sp, #20]
 80078fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078fe:	9d01      	ldr	r5, [sp, #4]
 8007900:	ea43 0102 	orr.w	r1, r3, r2
 8007904:	9b06      	ldr	r3, [sp, #24]
 8007906:	430b      	orrs	r3, r1
 8007908:	9b08      	ldr	r3, [sp, #32]
 800790a:	d10d      	bne.n	8007928 <_dtoa_r+0xa80>
 800790c:	2b39      	cmp	r3, #57	; 0x39
 800790e:	d029      	beq.n	8007964 <_dtoa_r+0xabc>
 8007910:	f1b9 0f00 	cmp.w	r9, #0
 8007914:	dd01      	ble.n	800791a <_dtoa_r+0xa72>
 8007916:	9b04      	ldr	r3, [sp, #16]
 8007918:	3331      	adds	r3, #49	; 0x31
 800791a:	9a02      	ldr	r2, [sp, #8]
 800791c:	7013      	strb	r3, [r2, #0]
 800791e:	e774      	b.n	800780a <_dtoa_r+0x962>
 8007920:	4638      	mov	r0, r7
 8007922:	e7b9      	b.n	8007898 <_dtoa_r+0x9f0>
 8007924:	2201      	movs	r2, #1
 8007926:	e7e2      	b.n	80078ee <_dtoa_r+0xa46>
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	db06      	blt.n	800793c <_dtoa_r+0xa94>
 800792e:	9905      	ldr	r1, [sp, #20]
 8007930:	ea41 0909 	orr.w	r9, r1, r9
 8007934:	9906      	ldr	r1, [sp, #24]
 8007936:	ea59 0101 	orrs.w	r1, r9, r1
 800793a:	d120      	bne.n	800797e <_dtoa_r+0xad6>
 800793c:	2a00      	cmp	r2, #0
 800793e:	ddec      	ble.n	800791a <_dtoa_r+0xa72>
 8007940:	4659      	mov	r1, fp
 8007942:	2201      	movs	r2, #1
 8007944:	4620      	mov	r0, r4
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	f000 fac6 	bl	8007ed8 <__lshift>
 800794c:	4631      	mov	r1, r6
 800794e:	4683      	mov	fp, r0
 8007950:	f000 fb2e 	bl	8007fb0 <__mcmp>
 8007954:	2800      	cmp	r0, #0
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	dc02      	bgt.n	8007960 <_dtoa_r+0xab8>
 800795a:	d1de      	bne.n	800791a <_dtoa_r+0xa72>
 800795c:	07da      	lsls	r2, r3, #31
 800795e:	d5dc      	bpl.n	800791a <_dtoa_r+0xa72>
 8007960:	2b39      	cmp	r3, #57	; 0x39
 8007962:	d1d8      	bne.n	8007916 <_dtoa_r+0xa6e>
 8007964:	9a02      	ldr	r2, [sp, #8]
 8007966:	2339      	movs	r3, #57	; 0x39
 8007968:	7013      	strb	r3, [r2, #0]
 800796a:	462b      	mov	r3, r5
 800796c:	461d      	mov	r5, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007974:	2a39      	cmp	r2, #57	; 0x39
 8007976:	d050      	beq.n	8007a1a <_dtoa_r+0xb72>
 8007978:	3201      	adds	r2, #1
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e745      	b.n	800780a <_dtoa_r+0x962>
 800797e:	2a00      	cmp	r2, #0
 8007980:	dd03      	ble.n	800798a <_dtoa_r+0xae2>
 8007982:	2b39      	cmp	r3, #57	; 0x39
 8007984:	d0ee      	beq.n	8007964 <_dtoa_r+0xabc>
 8007986:	3301      	adds	r3, #1
 8007988:	e7c7      	b.n	800791a <_dtoa_r+0xa72>
 800798a:	9a01      	ldr	r2, [sp, #4]
 800798c:	9907      	ldr	r1, [sp, #28]
 800798e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007992:	428a      	cmp	r2, r1
 8007994:	d02a      	beq.n	80079ec <_dtoa_r+0xb44>
 8007996:	4659      	mov	r1, fp
 8007998:	2300      	movs	r3, #0
 800799a:	220a      	movs	r2, #10
 800799c:	4620      	mov	r0, r4
 800799e:	f000 f8eb 	bl	8007b78 <__multadd>
 80079a2:	45b8      	cmp	r8, r7
 80079a4:	4683      	mov	fp, r0
 80079a6:	f04f 0300 	mov.w	r3, #0
 80079aa:	f04f 020a 	mov.w	r2, #10
 80079ae:	4641      	mov	r1, r8
 80079b0:	4620      	mov	r0, r4
 80079b2:	d107      	bne.n	80079c4 <_dtoa_r+0xb1c>
 80079b4:	f000 f8e0 	bl	8007b78 <__multadd>
 80079b8:	4680      	mov	r8, r0
 80079ba:	4607      	mov	r7, r0
 80079bc:	9b01      	ldr	r3, [sp, #4]
 80079be:	3301      	adds	r3, #1
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	e775      	b.n	80078b0 <_dtoa_r+0xa08>
 80079c4:	f000 f8d8 	bl	8007b78 <__multadd>
 80079c8:	4639      	mov	r1, r7
 80079ca:	4680      	mov	r8, r0
 80079cc:	2300      	movs	r3, #0
 80079ce:	220a      	movs	r2, #10
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f8d1 	bl	8007b78 <__multadd>
 80079d6:	4607      	mov	r7, r0
 80079d8:	e7f0      	b.n	80079bc <_dtoa_r+0xb14>
 80079da:	f1b9 0f00 	cmp.w	r9, #0
 80079de:	9a00      	ldr	r2, [sp, #0]
 80079e0:	bfcc      	ite	gt
 80079e2:	464d      	movgt	r5, r9
 80079e4:	2501      	movle	r5, #1
 80079e6:	4415      	add	r5, r2
 80079e8:	f04f 0800 	mov.w	r8, #0
 80079ec:	4659      	mov	r1, fp
 80079ee:	2201      	movs	r2, #1
 80079f0:	4620      	mov	r0, r4
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	f000 fa70 	bl	8007ed8 <__lshift>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4683      	mov	fp, r0
 80079fc:	f000 fad8 	bl	8007fb0 <__mcmp>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	dcb2      	bgt.n	800796a <_dtoa_r+0xac2>
 8007a04:	d102      	bne.n	8007a0c <_dtoa_r+0xb64>
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	07db      	lsls	r3, r3, #31
 8007a0a:	d4ae      	bmi.n	800796a <_dtoa_r+0xac2>
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	461d      	mov	r5, r3
 8007a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a14:	2a30      	cmp	r2, #48	; 0x30
 8007a16:	d0fa      	beq.n	8007a0e <_dtoa_r+0xb66>
 8007a18:	e6f7      	b.n	800780a <_dtoa_r+0x962>
 8007a1a:	9a00      	ldr	r2, [sp, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d1a5      	bne.n	800796c <_dtoa_r+0xac4>
 8007a20:	f10a 0a01 	add.w	sl, sl, #1
 8007a24:	2331      	movs	r3, #49	; 0x31
 8007a26:	e779      	b.n	800791c <_dtoa_r+0xa74>
 8007a28:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <_dtoa_r+0xbd0>)
 8007a2a:	f7ff baaf 	b.w	8006f8c <_dtoa_r+0xe4>
 8007a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f47f aa86 	bne.w	8006f42 <_dtoa_r+0x9a>
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <_dtoa_r+0xbd4>)
 8007a38:	f7ff baa8 	b.w	8006f8c <_dtoa_r+0xe4>
 8007a3c:	f1b9 0f00 	cmp.w	r9, #0
 8007a40:	dc03      	bgt.n	8007a4a <_dtoa_r+0xba2>
 8007a42:	9b05      	ldr	r3, [sp, #20]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	f73f aec9 	bgt.w	80077dc <_dtoa_r+0x934>
 8007a4a:	9d00      	ldr	r5, [sp, #0]
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4658      	mov	r0, fp
 8007a50:	f7ff f99c 	bl	8006d8c <quorem>
 8007a54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a58:	f805 3b01 	strb.w	r3, [r5], #1
 8007a5c:	9a00      	ldr	r2, [sp, #0]
 8007a5e:	1aaa      	subs	r2, r5, r2
 8007a60:	4591      	cmp	r9, r2
 8007a62:	ddba      	ble.n	80079da <_dtoa_r+0xb32>
 8007a64:	4659      	mov	r1, fp
 8007a66:	2300      	movs	r3, #0
 8007a68:	220a      	movs	r2, #10
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f884 	bl	8007b78 <__multadd>
 8007a70:	4683      	mov	fp, r0
 8007a72:	e7eb      	b.n	8007a4c <_dtoa_r+0xba4>
 8007a74:	080097bb 	.word	0x080097bb
 8007a78:	08009714 	.word	0x08009714
 8007a7c:	08009738 	.word	0x08009738

08007a80 <_localeconv_r>:
 8007a80:	4800      	ldr	r0, [pc, #0]	; (8007a84 <_localeconv_r+0x4>)
 8007a82:	4770      	bx	lr
 8007a84:	20000164 	.word	0x20000164

08007a88 <malloc>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <malloc+0xc>)
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f000 bbef 	b.w	8008270 <_malloc_r>
 8007a92:	bf00      	nop
 8007a94:	20000010 	.word	0x20000010

08007a98 <memcpy>:
 8007a98:	440a      	add	r2, r1
 8007a9a:	4291      	cmp	r1, r2
 8007a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa0:	d100      	bne.n	8007aa4 <memcpy+0xc>
 8007aa2:	4770      	bx	lr
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	d1f9      	bne.n	8007aa6 <memcpy+0xe>
 8007ab2:	bd10      	pop	{r4, pc}

08007ab4 <_Balloc>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ab8:	4604      	mov	r4, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	b976      	cbnz	r6, 8007adc <_Balloc+0x28>
 8007abe:	2010      	movs	r0, #16
 8007ac0:	f7ff ffe2 	bl	8007a88 <malloc>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ac8:	b920      	cbnz	r0, 8007ad4 <_Balloc+0x20>
 8007aca:	4b18      	ldr	r3, [pc, #96]	; (8007b2c <_Balloc+0x78>)
 8007acc:	4818      	ldr	r0, [pc, #96]	; (8007b30 <_Balloc+0x7c>)
 8007ace:	2166      	movs	r1, #102	; 0x66
 8007ad0:	f000 fd94 	bl	80085fc <__assert_func>
 8007ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad8:	6006      	str	r6, [r0, #0]
 8007ada:	60c6      	str	r6, [r0, #12]
 8007adc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ade:	68f3      	ldr	r3, [r6, #12]
 8007ae0:	b183      	cbz	r3, 8007b04 <_Balloc+0x50>
 8007ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007aea:	b9b8      	cbnz	r0, 8007b1c <_Balloc+0x68>
 8007aec:	2101      	movs	r1, #1
 8007aee:	fa01 f605 	lsl.w	r6, r1, r5
 8007af2:	1d72      	adds	r2, r6, #5
 8007af4:	0092      	lsls	r2, r2, #2
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 fb5a 	bl	80081b0 <_calloc_r>
 8007afc:	b160      	cbz	r0, 8007b18 <_Balloc+0x64>
 8007afe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b02:	e00e      	b.n	8007b22 <_Balloc+0x6e>
 8007b04:	2221      	movs	r2, #33	; 0x21
 8007b06:	2104      	movs	r1, #4
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fb51 	bl	80081b0 <_calloc_r>
 8007b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b10:	60f0      	str	r0, [r6, #12]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e4      	bne.n	8007ae2 <_Balloc+0x2e>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	6802      	ldr	r2, [r0, #0]
 8007b1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b22:	2300      	movs	r3, #0
 8007b24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b28:	e7f7      	b.n	8007b1a <_Balloc+0x66>
 8007b2a:	bf00      	nop
 8007b2c:	08009745 	.word	0x08009745
 8007b30:	080097cc 	.word	0x080097cc

08007b34 <_Bfree>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b38:	4605      	mov	r5, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	b976      	cbnz	r6, 8007b5c <_Bfree+0x28>
 8007b3e:	2010      	movs	r0, #16
 8007b40:	f7ff ffa2 	bl	8007a88 <malloc>
 8007b44:	4602      	mov	r2, r0
 8007b46:	6268      	str	r0, [r5, #36]	; 0x24
 8007b48:	b920      	cbnz	r0, 8007b54 <_Bfree+0x20>
 8007b4a:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <_Bfree+0x3c>)
 8007b4c:	4809      	ldr	r0, [pc, #36]	; (8007b74 <_Bfree+0x40>)
 8007b4e:	218a      	movs	r1, #138	; 0x8a
 8007b50:	f000 fd54 	bl	80085fc <__assert_func>
 8007b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b58:	6006      	str	r6, [r0, #0]
 8007b5a:	60c6      	str	r6, [r0, #12]
 8007b5c:	b13c      	cbz	r4, 8007b6e <_Bfree+0x3a>
 8007b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b60:	6862      	ldr	r2, [r4, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b68:	6021      	str	r1, [r4, #0]
 8007b6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	08009745 	.word	0x08009745
 8007b74:	080097cc 	.word	0x080097cc

08007b78 <__multadd>:
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	690e      	ldr	r6, [r1, #16]
 8007b7e:	4607      	mov	r7, r0
 8007b80:	4698      	mov	r8, r3
 8007b82:	460c      	mov	r4, r1
 8007b84:	f101 0014 	add.w	r0, r1, #20
 8007b88:	2300      	movs	r3, #0
 8007b8a:	6805      	ldr	r5, [r0, #0]
 8007b8c:	b2a9      	uxth	r1, r5
 8007b8e:	fb02 8101 	mla	r1, r2, r1, r8
 8007b92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b96:	0c2d      	lsrs	r5, r5, #16
 8007b98:	fb02 c505 	mla	r5, r2, r5, ip
 8007b9c:	b289      	uxth	r1, r1
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007ba4:	429e      	cmp	r6, r3
 8007ba6:	f840 1b04 	str.w	r1, [r0], #4
 8007baa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007bae:	dcec      	bgt.n	8007b8a <__multadd+0x12>
 8007bb0:	f1b8 0f00 	cmp.w	r8, #0
 8007bb4:	d022      	beq.n	8007bfc <__multadd+0x84>
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	42b3      	cmp	r3, r6
 8007bba:	dc19      	bgt.n	8007bf0 <__multadd+0x78>
 8007bbc:	6861      	ldr	r1, [r4, #4]
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	3101      	adds	r1, #1
 8007bc2:	f7ff ff77 	bl	8007ab4 <_Balloc>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b928      	cbnz	r0, 8007bd6 <__multadd+0x5e>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <__multadd+0x8c>)
 8007bce:	480e      	ldr	r0, [pc, #56]	; (8007c08 <__multadd+0x90>)
 8007bd0:	21b5      	movs	r1, #181	; 0xb5
 8007bd2:	f000 fd13 	bl	80085fc <__assert_func>
 8007bd6:	6922      	ldr	r2, [r4, #16]
 8007bd8:	3202      	adds	r2, #2
 8007bda:	f104 010c 	add.w	r1, r4, #12
 8007bde:	0092      	lsls	r2, r2, #2
 8007be0:	300c      	adds	r0, #12
 8007be2:	f7ff ff59 	bl	8007a98 <memcpy>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff ffa3 	bl	8007b34 <_Bfree>
 8007bee:	462c      	mov	r4, r5
 8007bf0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007bf4:	3601      	adds	r6, #1
 8007bf6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007bfa:	6126      	str	r6, [r4, #16]
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c02:	bf00      	nop
 8007c04:	080097bb 	.word	0x080097bb
 8007c08:	080097cc 	.word	0x080097cc

08007c0c <__hi0bits>:
 8007c0c:	0c03      	lsrs	r3, r0, #16
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	b9d3      	cbnz	r3, 8007c48 <__hi0bits+0x3c>
 8007c12:	0400      	lsls	r0, r0, #16
 8007c14:	2310      	movs	r3, #16
 8007c16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c1a:	bf04      	itt	eq
 8007c1c:	0200      	lsleq	r0, r0, #8
 8007c1e:	3308      	addeq	r3, #8
 8007c20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c24:	bf04      	itt	eq
 8007c26:	0100      	lsleq	r0, r0, #4
 8007c28:	3304      	addeq	r3, #4
 8007c2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c2e:	bf04      	itt	eq
 8007c30:	0080      	lsleq	r0, r0, #2
 8007c32:	3302      	addeq	r3, #2
 8007c34:	2800      	cmp	r0, #0
 8007c36:	db05      	blt.n	8007c44 <__hi0bits+0x38>
 8007c38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c3c:	f103 0301 	add.w	r3, r3, #1
 8007c40:	bf08      	it	eq
 8007c42:	2320      	moveq	r3, #32
 8007c44:	4618      	mov	r0, r3
 8007c46:	4770      	bx	lr
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e7e4      	b.n	8007c16 <__hi0bits+0xa>

08007c4c <__lo0bits>:
 8007c4c:	6803      	ldr	r3, [r0, #0]
 8007c4e:	f013 0207 	ands.w	r2, r3, #7
 8007c52:	4601      	mov	r1, r0
 8007c54:	d00b      	beq.n	8007c6e <__lo0bits+0x22>
 8007c56:	07da      	lsls	r2, r3, #31
 8007c58:	d424      	bmi.n	8007ca4 <__lo0bits+0x58>
 8007c5a:	0798      	lsls	r0, r3, #30
 8007c5c:	bf49      	itett	mi
 8007c5e:	085b      	lsrmi	r3, r3, #1
 8007c60:	089b      	lsrpl	r3, r3, #2
 8007c62:	2001      	movmi	r0, #1
 8007c64:	600b      	strmi	r3, [r1, #0]
 8007c66:	bf5c      	itt	pl
 8007c68:	600b      	strpl	r3, [r1, #0]
 8007c6a:	2002      	movpl	r0, #2
 8007c6c:	4770      	bx	lr
 8007c6e:	b298      	uxth	r0, r3
 8007c70:	b9b0      	cbnz	r0, 8007ca0 <__lo0bits+0x54>
 8007c72:	0c1b      	lsrs	r3, r3, #16
 8007c74:	2010      	movs	r0, #16
 8007c76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c7a:	bf04      	itt	eq
 8007c7c:	0a1b      	lsreq	r3, r3, #8
 8007c7e:	3008      	addeq	r0, #8
 8007c80:	071a      	lsls	r2, r3, #28
 8007c82:	bf04      	itt	eq
 8007c84:	091b      	lsreq	r3, r3, #4
 8007c86:	3004      	addeq	r0, #4
 8007c88:	079a      	lsls	r2, r3, #30
 8007c8a:	bf04      	itt	eq
 8007c8c:	089b      	lsreq	r3, r3, #2
 8007c8e:	3002      	addeq	r0, #2
 8007c90:	07da      	lsls	r2, r3, #31
 8007c92:	d403      	bmi.n	8007c9c <__lo0bits+0x50>
 8007c94:	085b      	lsrs	r3, r3, #1
 8007c96:	f100 0001 	add.w	r0, r0, #1
 8007c9a:	d005      	beq.n	8007ca8 <__lo0bits+0x5c>
 8007c9c:	600b      	str	r3, [r1, #0]
 8007c9e:	4770      	bx	lr
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	e7e8      	b.n	8007c76 <__lo0bits+0x2a>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	4770      	bx	lr
 8007ca8:	2020      	movs	r0, #32
 8007caa:	4770      	bx	lr

08007cac <__i2b>:
 8007cac:	b510      	push	{r4, lr}
 8007cae:	460c      	mov	r4, r1
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	f7ff feff 	bl	8007ab4 <_Balloc>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	b928      	cbnz	r0, 8007cc6 <__i2b+0x1a>
 8007cba:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <__i2b+0x24>)
 8007cbc:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <__i2b+0x28>)
 8007cbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cc2:	f000 fc9b 	bl	80085fc <__assert_func>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	6144      	str	r4, [r0, #20]
 8007cca:	6103      	str	r3, [r0, #16]
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	bf00      	nop
 8007cd0:	080097bb 	.word	0x080097bb
 8007cd4:	080097cc 	.word	0x080097cc

08007cd8 <__multiply>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4614      	mov	r4, r2
 8007cde:	690a      	ldr	r2, [r1, #16]
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	bfb8      	it	lt
 8007ce6:	460b      	movlt	r3, r1
 8007ce8:	460d      	mov	r5, r1
 8007cea:	bfbc      	itt	lt
 8007cec:	4625      	movlt	r5, r4
 8007cee:	461c      	movlt	r4, r3
 8007cf0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007cf4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cf8:	68ab      	ldr	r3, [r5, #8]
 8007cfa:	6869      	ldr	r1, [r5, #4]
 8007cfc:	eb0a 0709 	add.w	r7, sl, r9
 8007d00:	42bb      	cmp	r3, r7
 8007d02:	b085      	sub	sp, #20
 8007d04:	bfb8      	it	lt
 8007d06:	3101      	addlt	r1, #1
 8007d08:	f7ff fed4 	bl	8007ab4 <_Balloc>
 8007d0c:	b930      	cbnz	r0, 8007d1c <__multiply+0x44>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	4b42      	ldr	r3, [pc, #264]	; (8007e1c <__multiply+0x144>)
 8007d12:	4843      	ldr	r0, [pc, #268]	; (8007e20 <__multiply+0x148>)
 8007d14:	f240 115d 	movw	r1, #349	; 0x15d
 8007d18:	f000 fc70 	bl	80085fc <__assert_func>
 8007d1c:	f100 0614 	add.w	r6, r0, #20
 8007d20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d24:	4633      	mov	r3, r6
 8007d26:	2200      	movs	r2, #0
 8007d28:	4543      	cmp	r3, r8
 8007d2a:	d31e      	bcc.n	8007d6a <__multiply+0x92>
 8007d2c:	f105 0c14 	add.w	ip, r5, #20
 8007d30:	f104 0314 	add.w	r3, r4, #20
 8007d34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d3c:	9202      	str	r2, [sp, #8]
 8007d3e:	ebac 0205 	sub.w	r2, ip, r5
 8007d42:	3a15      	subs	r2, #21
 8007d44:	f022 0203 	bic.w	r2, r2, #3
 8007d48:	3204      	adds	r2, #4
 8007d4a:	f105 0115 	add.w	r1, r5, #21
 8007d4e:	458c      	cmp	ip, r1
 8007d50:	bf38      	it	cc
 8007d52:	2204      	movcc	r2, #4
 8007d54:	9201      	str	r2, [sp, #4]
 8007d56:	9a02      	ldr	r2, [sp, #8]
 8007d58:	9303      	str	r3, [sp, #12]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d808      	bhi.n	8007d70 <__multiply+0x98>
 8007d5e:	2f00      	cmp	r7, #0
 8007d60:	dc55      	bgt.n	8007e0e <__multiply+0x136>
 8007d62:	6107      	str	r7, [r0, #16]
 8007d64:	b005      	add	sp, #20
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	f843 2b04 	str.w	r2, [r3], #4
 8007d6e:	e7db      	b.n	8007d28 <__multiply+0x50>
 8007d70:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d74:	f1ba 0f00 	cmp.w	sl, #0
 8007d78:	d020      	beq.n	8007dbc <__multiply+0xe4>
 8007d7a:	f105 0e14 	add.w	lr, r5, #20
 8007d7e:	46b1      	mov	r9, r6
 8007d80:	2200      	movs	r2, #0
 8007d82:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d86:	f8d9 b000 	ldr.w	fp, [r9]
 8007d8a:	b2a1      	uxth	r1, r4
 8007d8c:	fa1f fb8b 	uxth.w	fp, fp
 8007d90:	fb0a b101 	mla	r1, sl, r1, fp
 8007d94:	4411      	add	r1, r2
 8007d96:	f8d9 2000 	ldr.w	r2, [r9]
 8007d9a:	0c24      	lsrs	r4, r4, #16
 8007d9c:	0c12      	lsrs	r2, r2, #16
 8007d9e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007da2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007da6:	b289      	uxth	r1, r1
 8007da8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007dac:	45f4      	cmp	ip, lr
 8007dae:	f849 1b04 	str.w	r1, [r9], #4
 8007db2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007db6:	d8e4      	bhi.n	8007d82 <__multiply+0xaa>
 8007db8:	9901      	ldr	r1, [sp, #4]
 8007dba:	5072      	str	r2, [r6, r1]
 8007dbc:	9a03      	ldr	r2, [sp, #12]
 8007dbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	f1b9 0f00 	cmp.w	r9, #0
 8007dc8:	d01f      	beq.n	8007e0a <__multiply+0x132>
 8007dca:	6834      	ldr	r4, [r6, #0]
 8007dcc:	f105 0114 	add.w	r1, r5, #20
 8007dd0:	46b6      	mov	lr, r6
 8007dd2:	f04f 0a00 	mov.w	sl, #0
 8007dd6:	880a      	ldrh	r2, [r1, #0]
 8007dd8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ddc:	fb09 b202 	mla	r2, r9, r2, fp
 8007de0:	4492      	add	sl, r2
 8007de2:	b2a4      	uxth	r4, r4
 8007de4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007de8:	f84e 4b04 	str.w	r4, [lr], #4
 8007dec:	f851 4b04 	ldr.w	r4, [r1], #4
 8007df0:	f8be 2000 	ldrh.w	r2, [lr]
 8007df4:	0c24      	lsrs	r4, r4, #16
 8007df6:	fb09 2404 	mla	r4, r9, r4, r2
 8007dfa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007dfe:	458c      	cmp	ip, r1
 8007e00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e04:	d8e7      	bhi.n	8007dd6 <__multiply+0xfe>
 8007e06:	9a01      	ldr	r2, [sp, #4]
 8007e08:	50b4      	str	r4, [r6, r2]
 8007e0a:	3604      	adds	r6, #4
 8007e0c:	e7a3      	b.n	8007d56 <__multiply+0x7e>
 8007e0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1a5      	bne.n	8007d62 <__multiply+0x8a>
 8007e16:	3f01      	subs	r7, #1
 8007e18:	e7a1      	b.n	8007d5e <__multiply+0x86>
 8007e1a:	bf00      	nop
 8007e1c:	080097bb 	.word	0x080097bb
 8007e20:	080097cc 	.word	0x080097cc

08007e24 <__pow5mult>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4615      	mov	r5, r2
 8007e2a:	f012 0203 	ands.w	r2, r2, #3
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	d007      	beq.n	8007e44 <__pow5mult+0x20>
 8007e34:	4c25      	ldr	r4, [pc, #148]	; (8007ecc <__pow5mult+0xa8>)
 8007e36:	3a01      	subs	r2, #1
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3e:	f7ff fe9b 	bl	8007b78 <__multadd>
 8007e42:	4607      	mov	r7, r0
 8007e44:	10ad      	asrs	r5, r5, #2
 8007e46:	d03d      	beq.n	8007ec4 <__pow5mult+0xa0>
 8007e48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e4a:	b97c      	cbnz	r4, 8007e6c <__pow5mult+0x48>
 8007e4c:	2010      	movs	r0, #16
 8007e4e:	f7ff fe1b 	bl	8007a88 <malloc>
 8007e52:	4602      	mov	r2, r0
 8007e54:	6270      	str	r0, [r6, #36]	; 0x24
 8007e56:	b928      	cbnz	r0, 8007e64 <__pow5mult+0x40>
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <__pow5mult+0xac>)
 8007e5a:	481e      	ldr	r0, [pc, #120]	; (8007ed4 <__pow5mult+0xb0>)
 8007e5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e60:	f000 fbcc 	bl	80085fc <__assert_func>
 8007e64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e68:	6004      	str	r4, [r0, #0]
 8007e6a:	60c4      	str	r4, [r0, #12]
 8007e6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e74:	b94c      	cbnz	r4, 8007e8a <__pow5mult+0x66>
 8007e76:	f240 2171 	movw	r1, #625	; 0x271
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ff16 	bl	8007cac <__i2b>
 8007e80:	2300      	movs	r3, #0
 8007e82:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e86:	4604      	mov	r4, r0
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	07eb      	lsls	r3, r5, #31
 8007e90:	d50a      	bpl.n	8007ea8 <__pow5mult+0x84>
 8007e92:	4639      	mov	r1, r7
 8007e94:	4622      	mov	r2, r4
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ff1e 	bl	8007cd8 <__multiply>
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff fe47 	bl	8007b34 <_Bfree>
 8007ea6:	4647      	mov	r7, r8
 8007ea8:	106d      	asrs	r5, r5, #1
 8007eaa:	d00b      	beq.n	8007ec4 <__pow5mult+0xa0>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	b938      	cbnz	r0, 8007ec0 <__pow5mult+0x9c>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f7ff ff0f 	bl	8007cd8 <__multiply>
 8007eba:	6020      	str	r0, [r4, #0]
 8007ebc:	f8c0 9000 	str.w	r9, [r0]
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	e7e4      	b.n	8007e8e <__pow5mult+0x6a>
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eca:	bf00      	nop
 8007ecc:	08009920 	.word	0x08009920
 8007ed0:	08009745 	.word	0x08009745
 8007ed4:	080097cc 	.word	0x080097cc

08007ed8 <__lshift>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	6849      	ldr	r1, [r1, #4]
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ee6:	68a3      	ldr	r3, [r4, #8]
 8007ee8:	4607      	mov	r7, r0
 8007eea:	4691      	mov	r9, r2
 8007eec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ef0:	f108 0601 	add.w	r6, r8, #1
 8007ef4:	42b3      	cmp	r3, r6
 8007ef6:	db0b      	blt.n	8007f10 <__lshift+0x38>
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff fddb 	bl	8007ab4 <_Balloc>
 8007efe:	4605      	mov	r5, r0
 8007f00:	b948      	cbnz	r0, 8007f16 <__lshift+0x3e>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b28      	ldr	r3, [pc, #160]	; (8007fa8 <__lshift+0xd0>)
 8007f06:	4829      	ldr	r0, [pc, #164]	; (8007fac <__lshift+0xd4>)
 8007f08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f0c:	f000 fb76 	bl	80085fc <__assert_func>
 8007f10:	3101      	adds	r1, #1
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	e7ee      	b.n	8007ef4 <__lshift+0x1c>
 8007f16:	2300      	movs	r3, #0
 8007f18:	f100 0114 	add.w	r1, r0, #20
 8007f1c:	f100 0210 	add.w	r2, r0, #16
 8007f20:	4618      	mov	r0, r3
 8007f22:	4553      	cmp	r3, sl
 8007f24:	db33      	blt.n	8007f8e <__lshift+0xb6>
 8007f26:	6920      	ldr	r0, [r4, #16]
 8007f28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f2c:	f104 0314 	add.w	r3, r4, #20
 8007f30:	f019 091f 	ands.w	r9, r9, #31
 8007f34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f3c:	d02b      	beq.n	8007f96 <__lshift+0xbe>
 8007f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f42:	468a      	mov	sl, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	fa00 f009 	lsl.w	r0, r0, r9
 8007f4c:	4302      	orrs	r2, r0
 8007f4e:	f84a 2b04 	str.w	r2, [sl], #4
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	459c      	cmp	ip, r3
 8007f58:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f5c:	d8f3      	bhi.n	8007f46 <__lshift+0x6e>
 8007f5e:	ebac 0304 	sub.w	r3, ip, r4
 8007f62:	3b15      	subs	r3, #21
 8007f64:	f023 0303 	bic.w	r3, r3, #3
 8007f68:	3304      	adds	r3, #4
 8007f6a:	f104 0015 	add.w	r0, r4, #21
 8007f6e:	4584      	cmp	ip, r0
 8007f70:	bf38      	it	cc
 8007f72:	2304      	movcc	r3, #4
 8007f74:	50ca      	str	r2, [r1, r3]
 8007f76:	b10a      	cbz	r2, 8007f7c <__lshift+0xa4>
 8007f78:	f108 0602 	add.w	r6, r8, #2
 8007f7c:	3e01      	subs	r6, #1
 8007f7e:	4638      	mov	r0, r7
 8007f80:	612e      	str	r6, [r5, #16]
 8007f82:	4621      	mov	r1, r4
 8007f84:	f7ff fdd6 	bl	8007b34 <_Bfree>
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f92:	3301      	adds	r3, #1
 8007f94:	e7c5      	b.n	8007f22 <__lshift+0x4a>
 8007f96:	3904      	subs	r1, #4
 8007f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fa0:	459c      	cmp	ip, r3
 8007fa2:	d8f9      	bhi.n	8007f98 <__lshift+0xc0>
 8007fa4:	e7ea      	b.n	8007f7c <__lshift+0xa4>
 8007fa6:	bf00      	nop
 8007fa8:	080097bb 	.word	0x080097bb
 8007fac:	080097cc 	.word	0x080097cc

08007fb0 <__mcmp>:
 8007fb0:	b530      	push	{r4, r5, lr}
 8007fb2:	6902      	ldr	r2, [r0, #16]
 8007fb4:	690c      	ldr	r4, [r1, #16]
 8007fb6:	1b12      	subs	r2, r2, r4
 8007fb8:	d10e      	bne.n	8007fd8 <__mcmp+0x28>
 8007fba:	f100 0314 	add.w	r3, r0, #20
 8007fbe:	3114      	adds	r1, #20
 8007fc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fd0:	42a5      	cmp	r5, r4
 8007fd2:	d003      	beq.n	8007fdc <__mcmp+0x2c>
 8007fd4:	d305      	bcc.n	8007fe2 <__mcmp+0x32>
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4610      	mov	r0, r2
 8007fda:	bd30      	pop	{r4, r5, pc}
 8007fdc:	4283      	cmp	r3, r0
 8007fde:	d3f3      	bcc.n	8007fc8 <__mcmp+0x18>
 8007fe0:	e7fa      	b.n	8007fd8 <__mcmp+0x28>
 8007fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe6:	e7f7      	b.n	8007fd8 <__mcmp+0x28>

08007fe8 <__mdiff>:
 8007fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	460c      	mov	r4, r1
 8007fee:	4606      	mov	r6, r0
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	4617      	mov	r7, r2
 8007ff6:	f7ff ffdb 	bl	8007fb0 <__mcmp>
 8007ffa:	1e05      	subs	r5, r0, #0
 8007ffc:	d110      	bne.n	8008020 <__mdiff+0x38>
 8007ffe:	4629      	mov	r1, r5
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff fd57 	bl	8007ab4 <_Balloc>
 8008006:	b930      	cbnz	r0, 8008016 <__mdiff+0x2e>
 8008008:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <__mdiff+0x108>)
 800800a:	4602      	mov	r2, r0
 800800c:	f240 2132 	movw	r1, #562	; 0x232
 8008010:	4838      	ldr	r0, [pc, #224]	; (80080f4 <__mdiff+0x10c>)
 8008012:	f000 faf3 	bl	80085fc <__assert_func>
 8008016:	2301      	movs	r3, #1
 8008018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800801c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008020:	bfa4      	itt	ge
 8008022:	463b      	movge	r3, r7
 8008024:	4627      	movge	r7, r4
 8008026:	4630      	mov	r0, r6
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	bfa6      	itte	ge
 800802c:	461c      	movge	r4, r3
 800802e:	2500      	movge	r5, #0
 8008030:	2501      	movlt	r5, #1
 8008032:	f7ff fd3f 	bl	8007ab4 <_Balloc>
 8008036:	b920      	cbnz	r0, 8008042 <__mdiff+0x5a>
 8008038:	4b2d      	ldr	r3, [pc, #180]	; (80080f0 <__mdiff+0x108>)
 800803a:	4602      	mov	r2, r0
 800803c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008040:	e7e6      	b.n	8008010 <__mdiff+0x28>
 8008042:	693e      	ldr	r6, [r7, #16]
 8008044:	60c5      	str	r5, [r0, #12]
 8008046:	6925      	ldr	r5, [r4, #16]
 8008048:	f107 0114 	add.w	r1, r7, #20
 800804c:	f104 0914 	add.w	r9, r4, #20
 8008050:	f100 0e14 	add.w	lr, r0, #20
 8008054:	f107 0210 	add.w	r2, r7, #16
 8008058:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800805c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008060:	46f2      	mov	sl, lr
 8008062:	2700      	movs	r7, #0
 8008064:	f859 3b04 	ldr.w	r3, [r9], #4
 8008068:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800806c:	fa1f f883 	uxth.w	r8, r3
 8008070:	fa17 f78b 	uxtah	r7, r7, fp
 8008074:	0c1b      	lsrs	r3, r3, #16
 8008076:	eba7 0808 	sub.w	r8, r7, r8
 800807a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800807e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008082:	fa1f f888 	uxth.w	r8, r8
 8008086:	141f      	asrs	r7, r3, #16
 8008088:	454d      	cmp	r5, r9
 800808a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800808e:	f84a 3b04 	str.w	r3, [sl], #4
 8008092:	d8e7      	bhi.n	8008064 <__mdiff+0x7c>
 8008094:	1b2b      	subs	r3, r5, r4
 8008096:	3b15      	subs	r3, #21
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	3304      	adds	r3, #4
 800809e:	3415      	adds	r4, #21
 80080a0:	42a5      	cmp	r5, r4
 80080a2:	bf38      	it	cc
 80080a4:	2304      	movcc	r3, #4
 80080a6:	4419      	add	r1, r3
 80080a8:	4473      	add	r3, lr
 80080aa:	469e      	mov	lr, r3
 80080ac:	460d      	mov	r5, r1
 80080ae:	4565      	cmp	r5, ip
 80080b0:	d30e      	bcc.n	80080d0 <__mdiff+0xe8>
 80080b2:	f10c 0203 	add.w	r2, ip, #3
 80080b6:	1a52      	subs	r2, r2, r1
 80080b8:	f022 0203 	bic.w	r2, r2, #3
 80080bc:	3903      	subs	r1, #3
 80080be:	458c      	cmp	ip, r1
 80080c0:	bf38      	it	cc
 80080c2:	2200      	movcc	r2, #0
 80080c4:	441a      	add	r2, r3
 80080c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080ca:	b17b      	cbz	r3, 80080ec <__mdiff+0x104>
 80080cc:	6106      	str	r6, [r0, #16]
 80080ce:	e7a5      	b.n	800801c <__mdiff+0x34>
 80080d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80080d4:	fa17 f488 	uxtah	r4, r7, r8
 80080d8:	1422      	asrs	r2, r4, #16
 80080da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80080de:	b2a4      	uxth	r4, r4
 80080e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080e4:	f84e 4b04 	str.w	r4, [lr], #4
 80080e8:	1417      	asrs	r7, r2, #16
 80080ea:	e7e0      	b.n	80080ae <__mdiff+0xc6>
 80080ec:	3e01      	subs	r6, #1
 80080ee:	e7ea      	b.n	80080c6 <__mdiff+0xde>
 80080f0:	080097bb 	.word	0x080097bb
 80080f4:	080097cc 	.word	0x080097cc

080080f8 <__d2b>:
 80080f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	4689      	mov	r9, r1
 80080fe:	2101      	movs	r1, #1
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	4690      	mov	r8, r2
 8008106:	f7ff fcd5 	bl	8007ab4 <_Balloc>
 800810a:	4604      	mov	r4, r0
 800810c:	b930      	cbnz	r0, 800811c <__d2b+0x24>
 800810e:	4602      	mov	r2, r0
 8008110:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <__d2b+0xb0>)
 8008112:	4826      	ldr	r0, [pc, #152]	; (80081ac <__d2b+0xb4>)
 8008114:	f240 310a 	movw	r1, #778	; 0x30a
 8008118:	f000 fa70 	bl	80085fc <__assert_func>
 800811c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008124:	bb35      	cbnz	r5, 8008174 <__d2b+0x7c>
 8008126:	2e00      	cmp	r6, #0
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	d028      	beq.n	800817e <__d2b+0x86>
 800812c:	4668      	mov	r0, sp
 800812e:	9600      	str	r6, [sp, #0]
 8008130:	f7ff fd8c 	bl	8007c4c <__lo0bits>
 8008134:	9900      	ldr	r1, [sp, #0]
 8008136:	b300      	cbz	r0, 800817a <__d2b+0x82>
 8008138:	9a01      	ldr	r2, [sp, #4]
 800813a:	f1c0 0320 	rsb	r3, r0, #32
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	430b      	orrs	r3, r1
 8008144:	40c2      	lsrs	r2, r0
 8008146:	6163      	str	r3, [r4, #20]
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	61a3      	str	r3, [r4, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bf14      	ite	ne
 8008152:	2202      	movne	r2, #2
 8008154:	2201      	moveq	r2, #1
 8008156:	6122      	str	r2, [r4, #16]
 8008158:	b1d5      	cbz	r5, 8008190 <__d2b+0x98>
 800815a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800815e:	4405      	add	r5, r0
 8008160:	f8c9 5000 	str.w	r5, [r9]
 8008164:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008168:	f8c8 0000 	str.w	r0, [r8]
 800816c:	4620      	mov	r0, r4
 800816e:	b003      	add	sp, #12
 8008170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008178:	e7d5      	b.n	8008126 <__d2b+0x2e>
 800817a:	6161      	str	r1, [r4, #20]
 800817c:	e7e5      	b.n	800814a <__d2b+0x52>
 800817e:	a801      	add	r0, sp, #4
 8008180:	f7ff fd64 	bl	8007c4c <__lo0bits>
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	6163      	str	r3, [r4, #20]
 8008188:	2201      	movs	r2, #1
 800818a:	6122      	str	r2, [r4, #16]
 800818c:	3020      	adds	r0, #32
 800818e:	e7e3      	b.n	8008158 <__d2b+0x60>
 8008190:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008194:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008198:	f8c9 0000 	str.w	r0, [r9]
 800819c:	6918      	ldr	r0, [r3, #16]
 800819e:	f7ff fd35 	bl	8007c0c <__hi0bits>
 80081a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081a6:	e7df      	b.n	8008168 <__d2b+0x70>
 80081a8:	080097bb 	.word	0x080097bb
 80081ac:	080097cc 	.word	0x080097cc

080081b0 <_calloc_r>:
 80081b0:	b513      	push	{r0, r1, r4, lr}
 80081b2:	434a      	muls	r2, r1
 80081b4:	4611      	mov	r1, r2
 80081b6:	9201      	str	r2, [sp, #4]
 80081b8:	f000 f85a 	bl	8008270 <_malloc_r>
 80081bc:	4604      	mov	r4, r0
 80081be:	b118      	cbz	r0, 80081c8 <_calloc_r+0x18>
 80081c0:	9a01      	ldr	r2, [sp, #4]
 80081c2:	2100      	movs	r1, #0
 80081c4:	f7fe f950 	bl	8006468 <memset>
 80081c8:	4620      	mov	r0, r4
 80081ca:	b002      	add	sp, #8
 80081cc:	bd10      	pop	{r4, pc}
	...

080081d0 <_free_r>:
 80081d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081d2:	2900      	cmp	r1, #0
 80081d4:	d048      	beq.n	8008268 <_free_r+0x98>
 80081d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081da:	9001      	str	r0, [sp, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f1a1 0404 	sub.w	r4, r1, #4
 80081e2:	bfb8      	it	lt
 80081e4:	18e4      	addlt	r4, r4, r3
 80081e6:	f000 fa65 	bl	80086b4 <__malloc_lock>
 80081ea:	4a20      	ldr	r2, [pc, #128]	; (800826c <_free_r+0x9c>)
 80081ec:	9801      	ldr	r0, [sp, #4]
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	4615      	mov	r5, r2
 80081f2:	b933      	cbnz	r3, 8008202 <_free_r+0x32>
 80081f4:	6063      	str	r3, [r4, #4]
 80081f6:	6014      	str	r4, [r2, #0]
 80081f8:	b003      	add	sp, #12
 80081fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081fe:	f000 ba5f 	b.w	80086c0 <__malloc_unlock>
 8008202:	42a3      	cmp	r3, r4
 8008204:	d90b      	bls.n	800821e <_free_r+0x4e>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	1862      	adds	r2, r4, r1
 800820a:	4293      	cmp	r3, r2
 800820c:	bf04      	itt	eq
 800820e:	681a      	ldreq	r2, [r3, #0]
 8008210:	685b      	ldreq	r3, [r3, #4]
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	bf04      	itt	eq
 8008216:	1852      	addeq	r2, r2, r1
 8008218:	6022      	streq	r2, [r4, #0]
 800821a:	602c      	str	r4, [r5, #0]
 800821c:	e7ec      	b.n	80081f8 <_free_r+0x28>
 800821e:	461a      	mov	r2, r3
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	b10b      	cbz	r3, 8008228 <_free_r+0x58>
 8008224:	42a3      	cmp	r3, r4
 8008226:	d9fa      	bls.n	800821e <_free_r+0x4e>
 8008228:	6811      	ldr	r1, [r2, #0]
 800822a:	1855      	adds	r5, r2, r1
 800822c:	42a5      	cmp	r5, r4
 800822e:	d10b      	bne.n	8008248 <_free_r+0x78>
 8008230:	6824      	ldr	r4, [r4, #0]
 8008232:	4421      	add	r1, r4
 8008234:	1854      	adds	r4, r2, r1
 8008236:	42a3      	cmp	r3, r4
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	d1dd      	bne.n	80081f8 <_free_r+0x28>
 800823c:	681c      	ldr	r4, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	6053      	str	r3, [r2, #4]
 8008242:	4421      	add	r1, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	e7d7      	b.n	80081f8 <_free_r+0x28>
 8008248:	d902      	bls.n	8008250 <_free_r+0x80>
 800824a:	230c      	movs	r3, #12
 800824c:	6003      	str	r3, [r0, #0]
 800824e:	e7d3      	b.n	80081f8 <_free_r+0x28>
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	1961      	adds	r1, r4, r5
 8008254:	428b      	cmp	r3, r1
 8008256:	bf04      	itt	eq
 8008258:	6819      	ldreq	r1, [r3, #0]
 800825a:	685b      	ldreq	r3, [r3, #4]
 800825c:	6063      	str	r3, [r4, #4]
 800825e:	bf04      	itt	eq
 8008260:	1949      	addeq	r1, r1, r5
 8008262:	6021      	streq	r1, [r4, #0]
 8008264:	6054      	str	r4, [r2, #4]
 8008266:	e7c7      	b.n	80081f8 <_free_r+0x28>
 8008268:	b003      	add	sp, #12
 800826a:	bd30      	pop	{r4, r5, pc}
 800826c:	20000204 	.word	0x20000204

08008270 <_malloc_r>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	1ccd      	adds	r5, r1, #3
 8008274:	f025 0503 	bic.w	r5, r5, #3
 8008278:	3508      	adds	r5, #8
 800827a:	2d0c      	cmp	r5, #12
 800827c:	bf38      	it	cc
 800827e:	250c      	movcc	r5, #12
 8008280:	2d00      	cmp	r5, #0
 8008282:	4606      	mov	r6, r0
 8008284:	db01      	blt.n	800828a <_malloc_r+0x1a>
 8008286:	42a9      	cmp	r1, r5
 8008288:	d903      	bls.n	8008292 <_malloc_r+0x22>
 800828a:	230c      	movs	r3, #12
 800828c:	6033      	str	r3, [r6, #0]
 800828e:	2000      	movs	r0, #0
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008292:	f000 fa0f 	bl	80086b4 <__malloc_lock>
 8008296:	4921      	ldr	r1, [pc, #132]	; (800831c <_malloc_r+0xac>)
 8008298:	680a      	ldr	r2, [r1, #0]
 800829a:	4614      	mov	r4, r2
 800829c:	b99c      	cbnz	r4, 80082c6 <_malloc_r+0x56>
 800829e:	4f20      	ldr	r7, [pc, #128]	; (8008320 <_malloc_r+0xb0>)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	b923      	cbnz	r3, 80082ae <_malloc_r+0x3e>
 80082a4:	4621      	mov	r1, r4
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 f998 	bl	80085dc <_sbrk_r>
 80082ac:	6038      	str	r0, [r7, #0]
 80082ae:	4629      	mov	r1, r5
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 f993 	bl	80085dc <_sbrk_r>
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	d123      	bne.n	8008302 <_malloc_r+0x92>
 80082ba:	230c      	movs	r3, #12
 80082bc:	6033      	str	r3, [r6, #0]
 80082be:	4630      	mov	r0, r6
 80082c0:	f000 f9fe 	bl	80086c0 <__malloc_unlock>
 80082c4:	e7e3      	b.n	800828e <_malloc_r+0x1e>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	1b5b      	subs	r3, r3, r5
 80082ca:	d417      	bmi.n	80082fc <_malloc_r+0x8c>
 80082cc:	2b0b      	cmp	r3, #11
 80082ce:	d903      	bls.n	80082d8 <_malloc_r+0x68>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	441c      	add	r4, r3
 80082d4:	6025      	str	r5, [r4, #0]
 80082d6:	e004      	b.n	80082e2 <_malloc_r+0x72>
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	42a2      	cmp	r2, r4
 80082dc:	bf0c      	ite	eq
 80082de:	600b      	streq	r3, [r1, #0]
 80082e0:	6053      	strne	r3, [r2, #4]
 80082e2:	4630      	mov	r0, r6
 80082e4:	f000 f9ec 	bl	80086c0 <__malloc_unlock>
 80082e8:	f104 000b 	add.w	r0, r4, #11
 80082ec:	1d23      	adds	r3, r4, #4
 80082ee:	f020 0007 	bic.w	r0, r0, #7
 80082f2:	1ac2      	subs	r2, r0, r3
 80082f4:	d0cc      	beq.n	8008290 <_malloc_r+0x20>
 80082f6:	1a1b      	subs	r3, r3, r0
 80082f8:	50a3      	str	r3, [r4, r2]
 80082fa:	e7c9      	b.n	8008290 <_malloc_r+0x20>
 80082fc:	4622      	mov	r2, r4
 80082fe:	6864      	ldr	r4, [r4, #4]
 8008300:	e7cc      	b.n	800829c <_malloc_r+0x2c>
 8008302:	1cc4      	adds	r4, r0, #3
 8008304:	f024 0403 	bic.w	r4, r4, #3
 8008308:	42a0      	cmp	r0, r4
 800830a:	d0e3      	beq.n	80082d4 <_malloc_r+0x64>
 800830c:	1a21      	subs	r1, r4, r0
 800830e:	4630      	mov	r0, r6
 8008310:	f000 f964 	bl	80085dc <_sbrk_r>
 8008314:	3001      	adds	r0, #1
 8008316:	d1dd      	bne.n	80082d4 <_malloc_r+0x64>
 8008318:	e7cf      	b.n	80082ba <_malloc_r+0x4a>
 800831a:	bf00      	nop
 800831c:	20000204 	.word	0x20000204
 8008320:	20000208 	.word	0x20000208

08008324 <__ssputs_r>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	688e      	ldr	r6, [r1, #8]
 800832a:	429e      	cmp	r6, r3
 800832c:	4682      	mov	sl, r0
 800832e:	460c      	mov	r4, r1
 8008330:	4690      	mov	r8, r2
 8008332:	461f      	mov	r7, r3
 8008334:	d838      	bhi.n	80083a8 <__ssputs_r+0x84>
 8008336:	898a      	ldrh	r2, [r1, #12]
 8008338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800833c:	d032      	beq.n	80083a4 <__ssputs_r+0x80>
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	6909      	ldr	r1, [r1, #16]
 8008342:	eba5 0901 	sub.w	r9, r5, r1
 8008346:	6965      	ldr	r5, [r4, #20]
 8008348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800834c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008350:	3301      	adds	r3, #1
 8008352:	444b      	add	r3, r9
 8008354:	106d      	asrs	r5, r5, #1
 8008356:	429d      	cmp	r5, r3
 8008358:	bf38      	it	cc
 800835a:	461d      	movcc	r5, r3
 800835c:	0553      	lsls	r3, r2, #21
 800835e:	d531      	bpl.n	80083c4 <__ssputs_r+0xa0>
 8008360:	4629      	mov	r1, r5
 8008362:	f7ff ff85 	bl	8008270 <_malloc_r>
 8008366:	4606      	mov	r6, r0
 8008368:	b950      	cbnz	r0, 8008380 <__ssputs_r+0x5c>
 800836a:	230c      	movs	r3, #12
 800836c:	f8ca 3000 	str.w	r3, [sl]
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008376:	81a3      	strh	r3, [r4, #12]
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008380:	6921      	ldr	r1, [r4, #16]
 8008382:	464a      	mov	r2, r9
 8008384:	f7ff fb88 	bl	8007a98 <memcpy>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800838e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	6126      	str	r6, [r4, #16]
 8008396:	6165      	str	r5, [r4, #20]
 8008398:	444e      	add	r6, r9
 800839a:	eba5 0509 	sub.w	r5, r5, r9
 800839e:	6026      	str	r6, [r4, #0]
 80083a0:	60a5      	str	r5, [r4, #8]
 80083a2:	463e      	mov	r6, r7
 80083a4:	42be      	cmp	r6, r7
 80083a6:	d900      	bls.n	80083aa <__ssputs_r+0x86>
 80083a8:	463e      	mov	r6, r7
 80083aa:	4632      	mov	r2, r6
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	4641      	mov	r1, r8
 80083b0:	f000 f966 	bl	8008680 <memmove>
 80083b4:	68a3      	ldr	r3, [r4, #8]
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	1b9b      	subs	r3, r3, r6
 80083ba:	4432      	add	r2, r6
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	6022      	str	r2, [r4, #0]
 80083c0:	2000      	movs	r0, #0
 80083c2:	e7db      	b.n	800837c <__ssputs_r+0x58>
 80083c4:	462a      	mov	r2, r5
 80083c6:	f000 f981 	bl	80086cc <_realloc_r>
 80083ca:	4606      	mov	r6, r0
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d1e1      	bne.n	8008394 <__ssputs_r+0x70>
 80083d0:	6921      	ldr	r1, [r4, #16]
 80083d2:	4650      	mov	r0, sl
 80083d4:	f7ff fefc 	bl	80081d0 <_free_r>
 80083d8:	e7c7      	b.n	800836a <__ssputs_r+0x46>
	...

080083dc <_svfiprintf_r>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	4698      	mov	r8, r3
 80083e2:	898b      	ldrh	r3, [r1, #12]
 80083e4:	061b      	lsls	r3, r3, #24
 80083e6:	b09d      	sub	sp, #116	; 0x74
 80083e8:	4607      	mov	r7, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	d50e      	bpl.n	800840e <_svfiprintf_r+0x32>
 80083f0:	690b      	ldr	r3, [r1, #16]
 80083f2:	b963      	cbnz	r3, 800840e <_svfiprintf_r+0x32>
 80083f4:	2140      	movs	r1, #64	; 0x40
 80083f6:	f7ff ff3b 	bl	8008270 <_malloc_r>
 80083fa:	6028      	str	r0, [r5, #0]
 80083fc:	6128      	str	r0, [r5, #16]
 80083fe:	b920      	cbnz	r0, 800840a <_svfiprintf_r+0x2e>
 8008400:	230c      	movs	r3, #12
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e0d1      	b.n	80085ae <_svfiprintf_r+0x1d2>
 800840a:	2340      	movs	r3, #64	; 0x40
 800840c:	616b      	str	r3, [r5, #20]
 800840e:	2300      	movs	r3, #0
 8008410:	9309      	str	r3, [sp, #36]	; 0x24
 8008412:	2320      	movs	r3, #32
 8008414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008418:	f8cd 800c 	str.w	r8, [sp, #12]
 800841c:	2330      	movs	r3, #48	; 0x30
 800841e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085c8 <_svfiprintf_r+0x1ec>
 8008422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008426:	f04f 0901 	mov.w	r9, #1
 800842a:	4623      	mov	r3, r4
 800842c:	469a      	mov	sl, r3
 800842e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008432:	b10a      	cbz	r2, 8008438 <_svfiprintf_r+0x5c>
 8008434:	2a25      	cmp	r2, #37	; 0x25
 8008436:	d1f9      	bne.n	800842c <_svfiprintf_r+0x50>
 8008438:	ebba 0b04 	subs.w	fp, sl, r4
 800843c:	d00b      	beq.n	8008456 <_svfiprintf_r+0x7a>
 800843e:	465b      	mov	r3, fp
 8008440:	4622      	mov	r2, r4
 8008442:	4629      	mov	r1, r5
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff ff6d 	bl	8008324 <__ssputs_r>
 800844a:	3001      	adds	r0, #1
 800844c:	f000 80aa 	beq.w	80085a4 <_svfiprintf_r+0x1c8>
 8008450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008452:	445a      	add	r2, fp
 8008454:	9209      	str	r2, [sp, #36]	; 0x24
 8008456:	f89a 3000 	ldrb.w	r3, [sl]
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 80a2 	beq.w	80085a4 <_svfiprintf_r+0x1c8>
 8008460:	2300      	movs	r3, #0
 8008462:	f04f 32ff 	mov.w	r2, #4294967295
 8008466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800846a:	f10a 0a01 	add.w	sl, sl, #1
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	9307      	str	r3, [sp, #28]
 8008472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008476:	931a      	str	r3, [sp, #104]	; 0x68
 8008478:	4654      	mov	r4, sl
 800847a:	2205      	movs	r2, #5
 800847c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008480:	4851      	ldr	r0, [pc, #324]	; (80085c8 <_svfiprintf_r+0x1ec>)
 8008482:	f7f7 fead 	bl	80001e0 <memchr>
 8008486:	9a04      	ldr	r2, [sp, #16]
 8008488:	b9d8      	cbnz	r0, 80084c2 <_svfiprintf_r+0xe6>
 800848a:	06d0      	lsls	r0, r2, #27
 800848c:	bf44      	itt	mi
 800848e:	2320      	movmi	r3, #32
 8008490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008494:	0711      	lsls	r1, r2, #28
 8008496:	bf44      	itt	mi
 8008498:	232b      	movmi	r3, #43	; 0x2b
 800849a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800849e:	f89a 3000 	ldrb.w	r3, [sl]
 80084a2:	2b2a      	cmp	r3, #42	; 0x2a
 80084a4:	d015      	beq.n	80084d2 <_svfiprintf_r+0xf6>
 80084a6:	9a07      	ldr	r2, [sp, #28]
 80084a8:	4654      	mov	r4, sl
 80084aa:	2000      	movs	r0, #0
 80084ac:	f04f 0c0a 	mov.w	ip, #10
 80084b0:	4621      	mov	r1, r4
 80084b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084b6:	3b30      	subs	r3, #48	; 0x30
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	d94e      	bls.n	800855a <_svfiprintf_r+0x17e>
 80084bc:	b1b0      	cbz	r0, 80084ec <_svfiprintf_r+0x110>
 80084be:	9207      	str	r2, [sp, #28]
 80084c0:	e014      	b.n	80084ec <_svfiprintf_r+0x110>
 80084c2:	eba0 0308 	sub.w	r3, r0, r8
 80084c6:	fa09 f303 	lsl.w	r3, r9, r3
 80084ca:	4313      	orrs	r3, r2
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	46a2      	mov	sl, r4
 80084d0:	e7d2      	b.n	8008478 <_svfiprintf_r+0x9c>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	1d19      	adds	r1, r3, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	9103      	str	r1, [sp, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bfbb      	ittet	lt
 80084de:	425b      	neglt	r3, r3
 80084e0:	f042 0202 	orrlt.w	r2, r2, #2
 80084e4:	9307      	strge	r3, [sp, #28]
 80084e6:	9307      	strlt	r3, [sp, #28]
 80084e8:	bfb8      	it	lt
 80084ea:	9204      	strlt	r2, [sp, #16]
 80084ec:	7823      	ldrb	r3, [r4, #0]
 80084ee:	2b2e      	cmp	r3, #46	; 0x2e
 80084f0:	d10c      	bne.n	800850c <_svfiprintf_r+0x130>
 80084f2:	7863      	ldrb	r3, [r4, #1]
 80084f4:	2b2a      	cmp	r3, #42	; 0x2a
 80084f6:	d135      	bne.n	8008564 <_svfiprintf_r+0x188>
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	1d1a      	adds	r2, r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	9203      	str	r2, [sp, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	bfb8      	it	lt
 8008504:	f04f 33ff 	movlt.w	r3, #4294967295
 8008508:	3402      	adds	r4, #2
 800850a:	9305      	str	r3, [sp, #20]
 800850c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085d8 <_svfiprintf_r+0x1fc>
 8008510:	7821      	ldrb	r1, [r4, #0]
 8008512:	2203      	movs	r2, #3
 8008514:	4650      	mov	r0, sl
 8008516:	f7f7 fe63 	bl	80001e0 <memchr>
 800851a:	b140      	cbz	r0, 800852e <_svfiprintf_r+0x152>
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	eba0 000a 	sub.w	r0, r0, sl
 8008522:	fa03 f000 	lsl.w	r0, r3, r0
 8008526:	9b04      	ldr	r3, [sp, #16]
 8008528:	4303      	orrs	r3, r0
 800852a:	3401      	adds	r4, #1
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008532:	4826      	ldr	r0, [pc, #152]	; (80085cc <_svfiprintf_r+0x1f0>)
 8008534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008538:	2206      	movs	r2, #6
 800853a:	f7f7 fe51 	bl	80001e0 <memchr>
 800853e:	2800      	cmp	r0, #0
 8008540:	d038      	beq.n	80085b4 <_svfiprintf_r+0x1d8>
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <_svfiprintf_r+0x1f4>)
 8008544:	bb1b      	cbnz	r3, 800858e <_svfiprintf_r+0x1b2>
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	3307      	adds	r3, #7
 800854a:	f023 0307 	bic.w	r3, r3, #7
 800854e:	3308      	adds	r3, #8
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008554:	4433      	add	r3, r6
 8008556:	9309      	str	r3, [sp, #36]	; 0x24
 8008558:	e767      	b.n	800842a <_svfiprintf_r+0x4e>
 800855a:	fb0c 3202 	mla	r2, ip, r2, r3
 800855e:	460c      	mov	r4, r1
 8008560:	2001      	movs	r0, #1
 8008562:	e7a5      	b.n	80084b0 <_svfiprintf_r+0xd4>
 8008564:	2300      	movs	r3, #0
 8008566:	3401      	adds	r4, #1
 8008568:	9305      	str	r3, [sp, #20]
 800856a:	4619      	mov	r1, r3
 800856c:	f04f 0c0a 	mov.w	ip, #10
 8008570:	4620      	mov	r0, r4
 8008572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008576:	3a30      	subs	r2, #48	; 0x30
 8008578:	2a09      	cmp	r2, #9
 800857a:	d903      	bls.n	8008584 <_svfiprintf_r+0x1a8>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0c5      	beq.n	800850c <_svfiprintf_r+0x130>
 8008580:	9105      	str	r1, [sp, #20]
 8008582:	e7c3      	b.n	800850c <_svfiprintf_r+0x130>
 8008584:	fb0c 2101 	mla	r1, ip, r1, r2
 8008588:	4604      	mov	r4, r0
 800858a:	2301      	movs	r3, #1
 800858c:	e7f0      	b.n	8008570 <_svfiprintf_r+0x194>
 800858e:	ab03      	add	r3, sp, #12
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	462a      	mov	r2, r5
 8008594:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <_svfiprintf_r+0x1f8>)
 8008596:	a904      	add	r1, sp, #16
 8008598:	4638      	mov	r0, r7
 800859a:	f7fe f80d 	bl	80065b8 <_printf_float>
 800859e:	1c42      	adds	r2, r0, #1
 80085a0:	4606      	mov	r6, r0
 80085a2:	d1d6      	bne.n	8008552 <_svfiprintf_r+0x176>
 80085a4:	89ab      	ldrh	r3, [r5, #12]
 80085a6:	065b      	lsls	r3, r3, #25
 80085a8:	f53f af2c 	bmi.w	8008404 <_svfiprintf_r+0x28>
 80085ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ae:	b01d      	add	sp, #116	; 0x74
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	ab03      	add	r3, sp, #12
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	462a      	mov	r2, r5
 80085ba:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <_svfiprintf_r+0x1f8>)
 80085bc:	a904      	add	r1, sp, #16
 80085be:	4638      	mov	r0, r7
 80085c0:	f7fe fa9e 	bl	8006b00 <_printf_i>
 80085c4:	e7eb      	b.n	800859e <_svfiprintf_r+0x1c2>
 80085c6:	bf00      	nop
 80085c8:	0800992c 	.word	0x0800992c
 80085cc:	08009936 	.word	0x08009936
 80085d0:	080065b9 	.word	0x080065b9
 80085d4:	08008325 	.word	0x08008325
 80085d8:	08009932 	.word	0x08009932

080085dc <_sbrk_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d06      	ldr	r5, [pc, #24]	; (80085f8 <_sbrk_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	602b      	str	r3, [r5, #0]
 80085e8:	f7f9 f8de 	bl	80017a8 <_sbrk>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_sbrk_r+0x1a>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_sbrk_r+0x1a>
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20000384 	.word	0x20000384

080085fc <__assert_func>:
 80085fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085fe:	4614      	mov	r4, r2
 8008600:	461a      	mov	r2, r3
 8008602:	4b09      	ldr	r3, [pc, #36]	; (8008628 <__assert_func+0x2c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4605      	mov	r5, r0
 8008608:	68d8      	ldr	r0, [r3, #12]
 800860a:	b14c      	cbz	r4, 8008620 <__assert_func+0x24>
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <__assert_func+0x30>)
 800860e:	9100      	str	r1, [sp, #0]
 8008610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008614:	4906      	ldr	r1, [pc, #24]	; (8008630 <__assert_func+0x34>)
 8008616:	462b      	mov	r3, r5
 8008618:	f000 f80e 	bl	8008638 <fiprintf>
 800861c:	f000 faa4 	bl	8008b68 <abort>
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <__assert_func+0x38>)
 8008622:	461c      	mov	r4, r3
 8008624:	e7f3      	b.n	800860e <__assert_func+0x12>
 8008626:	bf00      	nop
 8008628:	20000010 	.word	0x20000010
 800862c:	0800993d 	.word	0x0800993d
 8008630:	0800994a 	.word	0x0800994a
 8008634:	08009978 	.word	0x08009978

08008638 <fiprintf>:
 8008638:	b40e      	push	{r1, r2, r3}
 800863a:	b503      	push	{r0, r1, lr}
 800863c:	4601      	mov	r1, r0
 800863e:	ab03      	add	r3, sp, #12
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <fiprintf+0x20>)
 8008642:	f853 2b04 	ldr.w	r2, [r3], #4
 8008646:	6800      	ldr	r0, [r0, #0]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	f000 f88f 	bl	800876c <_vfiprintf_r>
 800864e:	b002      	add	sp, #8
 8008650:	f85d eb04 	ldr.w	lr, [sp], #4
 8008654:	b003      	add	sp, #12
 8008656:	4770      	bx	lr
 8008658:	20000010 	.word	0x20000010

0800865c <__ascii_mbtowc>:
 800865c:	b082      	sub	sp, #8
 800865e:	b901      	cbnz	r1, 8008662 <__ascii_mbtowc+0x6>
 8008660:	a901      	add	r1, sp, #4
 8008662:	b142      	cbz	r2, 8008676 <__ascii_mbtowc+0x1a>
 8008664:	b14b      	cbz	r3, 800867a <__ascii_mbtowc+0x1e>
 8008666:	7813      	ldrb	r3, [r2, #0]
 8008668:	600b      	str	r3, [r1, #0]
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	1e10      	subs	r0, r2, #0
 800866e:	bf18      	it	ne
 8008670:	2001      	movne	r0, #1
 8008672:	b002      	add	sp, #8
 8008674:	4770      	bx	lr
 8008676:	4610      	mov	r0, r2
 8008678:	e7fb      	b.n	8008672 <__ascii_mbtowc+0x16>
 800867a:	f06f 0001 	mvn.w	r0, #1
 800867e:	e7f8      	b.n	8008672 <__ascii_mbtowc+0x16>

08008680 <memmove>:
 8008680:	4288      	cmp	r0, r1
 8008682:	b510      	push	{r4, lr}
 8008684:	eb01 0402 	add.w	r4, r1, r2
 8008688:	d902      	bls.n	8008690 <memmove+0x10>
 800868a:	4284      	cmp	r4, r0
 800868c:	4623      	mov	r3, r4
 800868e:	d807      	bhi.n	80086a0 <memmove+0x20>
 8008690:	1e43      	subs	r3, r0, #1
 8008692:	42a1      	cmp	r1, r4
 8008694:	d008      	beq.n	80086a8 <memmove+0x28>
 8008696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800869a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800869e:	e7f8      	b.n	8008692 <memmove+0x12>
 80086a0:	4402      	add	r2, r0
 80086a2:	4601      	mov	r1, r0
 80086a4:	428a      	cmp	r2, r1
 80086a6:	d100      	bne.n	80086aa <memmove+0x2a>
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086b2:	e7f7      	b.n	80086a4 <memmove+0x24>

080086b4 <__malloc_lock>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__malloc_lock+0x8>)
 80086b6:	f000 bc17 	b.w	8008ee8 <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	2000038c 	.word	0x2000038c

080086c0 <__malloc_unlock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__malloc_unlock+0x8>)
 80086c2:	f000 bc12 	b.w	8008eea <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	2000038c 	.word	0x2000038c

080086cc <_realloc_r>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	4607      	mov	r7, r0
 80086d0:	4614      	mov	r4, r2
 80086d2:	460e      	mov	r6, r1
 80086d4:	b921      	cbnz	r1, 80086e0 <_realloc_r+0x14>
 80086d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086da:	4611      	mov	r1, r2
 80086dc:	f7ff bdc8 	b.w	8008270 <_malloc_r>
 80086e0:	b922      	cbnz	r2, 80086ec <_realloc_r+0x20>
 80086e2:	f7ff fd75 	bl	80081d0 <_free_r>
 80086e6:	4625      	mov	r5, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ec:	f000 fc62 	bl	8008fb4 <_malloc_usable_size_r>
 80086f0:	42a0      	cmp	r0, r4
 80086f2:	d20f      	bcs.n	8008714 <_realloc_r+0x48>
 80086f4:	4621      	mov	r1, r4
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7ff fdba 	bl	8008270 <_malloc_r>
 80086fc:	4605      	mov	r5, r0
 80086fe:	2800      	cmp	r0, #0
 8008700:	d0f2      	beq.n	80086e8 <_realloc_r+0x1c>
 8008702:	4631      	mov	r1, r6
 8008704:	4622      	mov	r2, r4
 8008706:	f7ff f9c7 	bl	8007a98 <memcpy>
 800870a:	4631      	mov	r1, r6
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff fd5f 	bl	80081d0 <_free_r>
 8008712:	e7e9      	b.n	80086e8 <_realloc_r+0x1c>
 8008714:	4635      	mov	r5, r6
 8008716:	e7e7      	b.n	80086e8 <_realloc_r+0x1c>

08008718 <__sfputc_r>:
 8008718:	6893      	ldr	r3, [r2, #8]
 800871a:	3b01      	subs	r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	b410      	push	{r4}
 8008720:	6093      	str	r3, [r2, #8]
 8008722:	da08      	bge.n	8008736 <__sfputc_r+0x1e>
 8008724:	6994      	ldr	r4, [r2, #24]
 8008726:	42a3      	cmp	r3, r4
 8008728:	db01      	blt.n	800872e <__sfputc_r+0x16>
 800872a:	290a      	cmp	r1, #10
 800872c:	d103      	bne.n	8008736 <__sfputc_r+0x1e>
 800872e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008732:	f000 b94b 	b.w	80089cc <__swbuf_r>
 8008736:	6813      	ldr	r3, [r2, #0]
 8008738:	1c58      	adds	r0, r3, #1
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	7019      	strb	r1, [r3, #0]
 800873e:	4608      	mov	r0, r1
 8008740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008744:	4770      	bx	lr

08008746 <__sfputs_r>:
 8008746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008748:	4606      	mov	r6, r0
 800874a:	460f      	mov	r7, r1
 800874c:	4614      	mov	r4, r2
 800874e:	18d5      	adds	r5, r2, r3
 8008750:	42ac      	cmp	r4, r5
 8008752:	d101      	bne.n	8008758 <__sfputs_r+0x12>
 8008754:	2000      	movs	r0, #0
 8008756:	e007      	b.n	8008768 <__sfputs_r+0x22>
 8008758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875c:	463a      	mov	r2, r7
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff ffda 	bl	8008718 <__sfputc_r>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d1f3      	bne.n	8008750 <__sfputs_r+0xa>
 8008768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800876c <_vfiprintf_r>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	460d      	mov	r5, r1
 8008772:	b09d      	sub	sp, #116	; 0x74
 8008774:	4614      	mov	r4, r2
 8008776:	4698      	mov	r8, r3
 8008778:	4606      	mov	r6, r0
 800877a:	b118      	cbz	r0, 8008784 <_vfiprintf_r+0x18>
 800877c:	6983      	ldr	r3, [r0, #24]
 800877e:	b90b      	cbnz	r3, 8008784 <_vfiprintf_r+0x18>
 8008780:	f000 fb14 	bl	8008dac <__sinit>
 8008784:	4b89      	ldr	r3, [pc, #548]	; (80089ac <_vfiprintf_r+0x240>)
 8008786:	429d      	cmp	r5, r3
 8008788:	d11b      	bne.n	80087c2 <_vfiprintf_r+0x56>
 800878a:	6875      	ldr	r5, [r6, #4]
 800878c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878e:	07d9      	lsls	r1, r3, #31
 8008790:	d405      	bmi.n	800879e <_vfiprintf_r+0x32>
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	059a      	lsls	r2, r3, #22
 8008796:	d402      	bmi.n	800879e <_vfiprintf_r+0x32>
 8008798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800879a:	f000 fba5 	bl	8008ee8 <__retarget_lock_acquire_recursive>
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	071b      	lsls	r3, r3, #28
 80087a2:	d501      	bpl.n	80087a8 <_vfiprintf_r+0x3c>
 80087a4:	692b      	ldr	r3, [r5, #16]
 80087a6:	b9eb      	cbnz	r3, 80087e4 <_vfiprintf_r+0x78>
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f000 f96e 	bl	8008a8c <__swsetup_r>
 80087b0:	b1c0      	cbz	r0, 80087e4 <_vfiprintf_r+0x78>
 80087b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b4:	07dc      	lsls	r4, r3, #31
 80087b6:	d50e      	bpl.n	80087d6 <_vfiprintf_r+0x6a>
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	b01d      	add	sp, #116	; 0x74
 80087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c2:	4b7b      	ldr	r3, [pc, #492]	; (80089b0 <_vfiprintf_r+0x244>)
 80087c4:	429d      	cmp	r5, r3
 80087c6:	d101      	bne.n	80087cc <_vfiprintf_r+0x60>
 80087c8:	68b5      	ldr	r5, [r6, #8]
 80087ca:	e7df      	b.n	800878c <_vfiprintf_r+0x20>
 80087cc:	4b79      	ldr	r3, [pc, #484]	; (80089b4 <_vfiprintf_r+0x248>)
 80087ce:	429d      	cmp	r5, r3
 80087d0:	bf08      	it	eq
 80087d2:	68f5      	ldreq	r5, [r6, #12]
 80087d4:	e7da      	b.n	800878c <_vfiprintf_r+0x20>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	0598      	lsls	r0, r3, #22
 80087da:	d4ed      	bmi.n	80087b8 <_vfiprintf_r+0x4c>
 80087dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087de:	f000 fb84 	bl	8008eea <__retarget_lock_release_recursive>
 80087e2:	e7e9      	b.n	80087b8 <_vfiprintf_r+0x4c>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9309      	str	r3, [sp, #36]	; 0x24
 80087e8:	2320      	movs	r3, #32
 80087ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f2:	2330      	movs	r3, #48	; 0x30
 80087f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089b8 <_vfiprintf_r+0x24c>
 80087f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087fc:	f04f 0901 	mov.w	r9, #1
 8008800:	4623      	mov	r3, r4
 8008802:	469a      	mov	sl, r3
 8008804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008808:	b10a      	cbz	r2, 800880e <_vfiprintf_r+0xa2>
 800880a:	2a25      	cmp	r2, #37	; 0x25
 800880c:	d1f9      	bne.n	8008802 <_vfiprintf_r+0x96>
 800880e:	ebba 0b04 	subs.w	fp, sl, r4
 8008812:	d00b      	beq.n	800882c <_vfiprintf_r+0xc0>
 8008814:	465b      	mov	r3, fp
 8008816:	4622      	mov	r2, r4
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ff93 	bl	8008746 <__sfputs_r>
 8008820:	3001      	adds	r0, #1
 8008822:	f000 80aa 	beq.w	800897a <_vfiprintf_r+0x20e>
 8008826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008828:	445a      	add	r2, fp
 800882a:	9209      	str	r2, [sp, #36]	; 0x24
 800882c:	f89a 3000 	ldrb.w	r3, [sl]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80a2 	beq.w	800897a <_vfiprintf_r+0x20e>
 8008836:	2300      	movs	r3, #0
 8008838:	f04f 32ff 	mov.w	r2, #4294967295
 800883c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800884c:	931a      	str	r3, [sp, #104]	; 0x68
 800884e:	4654      	mov	r4, sl
 8008850:	2205      	movs	r2, #5
 8008852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008856:	4858      	ldr	r0, [pc, #352]	; (80089b8 <_vfiprintf_r+0x24c>)
 8008858:	f7f7 fcc2 	bl	80001e0 <memchr>
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	b9d8      	cbnz	r0, 8008898 <_vfiprintf_r+0x12c>
 8008860:	06d1      	lsls	r1, r2, #27
 8008862:	bf44      	itt	mi
 8008864:	2320      	movmi	r3, #32
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886a:	0713      	lsls	r3, r2, #28
 800886c:	bf44      	itt	mi
 800886e:	232b      	movmi	r3, #43	; 0x2b
 8008870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b2a      	cmp	r3, #42	; 0x2a
 800887a:	d015      	beq.n	80088a8 <_vfiprintf_r+0x13c>
 800887c:	9a07      	ldr	r2, [sp, #28]
 800887e:	4654      	mov	r4, sl
 8008880:	2000      	movs	r0, #0
 8008882:	f04f 0c0a 	mov.w	ip, #10
 8008886:	4621      	mov	r1, r4
 8008888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888c:	3b30      	subs	r3, #48	; 0x30
 800888e:	2b09      	cmp	r3, #9
 8008890:	d94e      	bls.n	8008930 <_vfiprintf_r+0x1c4>
 8008892:	b1b0      	cbz	r0, 80088c2 <_vfiprintf_r+0x156>
 8008894:	9207      	str	r2, [sp, #28]
 8008896:	e014      	b.n	80088c2 <_vfiprintf_r+0x156>
 8008898:	eba0 0308 	sub.w	r3, r0, r8
 800889c:	fa09 f303 	lsl.w	r3, r9, r3
 80088a0:	4313      	orrs	r3, r2
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	46a2      	mov	sl, r4
 80088a6:	e7d2      	b.n	800884e <_vfiprintf_r+0xe2>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	1d19      	adds	r1, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	9103      	str	r1, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfbb      	ittet	lt
 80088b4:	425b      	neglt	r3, r3
 80088b6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ba:	9307      	strge	r3, [sp, #28]
 80088bc:	9307      	strlt	r3, [sp, #28]
 80088be:	bfb8      	it	lt
 80088c0:	9204      	strlt	r2, [sp, #16]
 80088c2:	7823      	ldrb	r3, [r4, #0]
 80088c4:	2b2e      	cmp	r3, #46	; 0x2e
 80088c6:	d10c      	bne.n	80088e2 <_vfiprintf_r+0x176>
 80088c8:	7863      	ldrb	r3, [r4, #1]
 80088ca:	2b2a      	cmp	r3, #42	; 0x2a
 80088cc:	d135      	bne.n	800893a <_vfiprintf_r+0x1ce>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	1d1a      	adds	r2, r3, #4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	9203      	str	r2, [sp, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bfb8      	it	lt
 80088da:	f04f 33ff 	movlt.w	r3, #4294967295
 80088de:	3402      	adds	r4, #2
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089c8 <_vfiprintf_r+0x25c>
 80088e6:	7821      	ldrb	r1, [r4, #0]
 80088e8:	2203      	movs	r2, #3
 80088ea:	4650      	mov	r0, sl
 80088ec:	f7f7 fc78 	bl	80001e0 <memchr>
 80088f0:	b140      	cbz	r0, 8008904 <_vfiprintf_r+0x198>
 80088f2:	2340      	movs	r3, #64	; 0x40
 80088f4:	eba0 000a 	sub.w	r0, r0, sl
 80088f8:	fa03 f000 	lsl.w	r0, r3, r0
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	4303      	orrs	r3, r0
 8008900:	3401      	adds	r4, #1
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008908:	482c      	ldr	r0, [pc, #176]	; (80089bc <_vfiprintf_r+0x250>)
 800890a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800890e:	2206      	movs	r2, #6
 8008910:	f7f7 fc66 	bl	80001e0 <memchr>
 8008914:	2800      	cmp	r0, #0
 8008916:	d03f      	beq.n	8008998 <_vfiprintf_r+0x22c>
 8008918:	4b29      	ldr	r3, [pc, #164]	; (80089c0 <_vfiprintf_r+0x254>)
 800891a:	bb1b      	cbnz	r3, 8008964 <_vfiprintf_r+0x1f8>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	3307      	adds	r3, #7
 8008920:	f023 0307 	bic.w	r3, r3, #7
 8008924:	3308      	adds	r3, #8
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892a:	443b      	add	r3, r7
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
 800892e:	e767      	b.n	8008800 <_vfiprintf_r+0x94>
 8008930:	fb0c 3202 	mla	r2, ip, r2, r3
 8008934:	460c      	mov	r4, r1
 8008936:	2001      	movs	r0, #1
 8008938:	e7a5      	b.n	8008886 <_vfiprintf_r+0x11a>
 800893a:	2300      	movs	r3, #0
 800893c:	3401      	adds	r4, #1
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	4619      	mov	r1, r3
 8008942:	f04f 0c0a 	mov.w	ip, #10
 8008946:	4620      	mov	r0, r4
 8008948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800894c:	3a30      	subs	r2, #48	; 0x30
 800894e:	2a09      	cmp	r2, #9
 8008950:	d903      	bls.n	800895a <_vfiprintf_r+0x1ee>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0c5      	beq.n	80088e2 <_vfiprintf_r+0x176>
 8008956:	9105      	str	r1, [sp, #20]
 8008958:	e7c3      	b.n	80088e2 <_vfiprintf_r+0x176>
 800895a:	fb0c 2101 	mla	r1, ip, r1, r2
 800895e:	4604      	mov	r4, r0
 8008960:	2301      	movs	r3, #1
 8008962:	e7f0      	b.n	8008946 <_vfiprintf_r+0x1da>
 8008964:	ab03      	add	r3, sp, #12
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	462a      	mov	r2, r5
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <_vfiprintf_r+0x258>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	4630      	mov	r0, r6
 8008970:	f7fd fe22 	bl	80065b8 <_printf_float>
 8008974:	4607      	mov	r7, r0
 8008976:	1c78      	adds	r0, r7, #1
 8008978:	d1d6      	bne.n	8008928 <_vfiprintf_r+0x1bc>
 800897a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800897c:	07d9      	lsls	r1, r3, #31
 800897e:	d405      	bmi.n	800898c <_vfiprintf_r+0x220>
 8008980:	89ab      	ldrh	r3, [r5, #12]
 8008982:	059a      	lsls	r2, r3, #22
 8008984:	d402      	bmi.n	800898c <_vfiprintf_r+0x220>
 8008986:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008988:	f000 faaf 	bl	8008eea <__retarget_lock_release_recursive>
 800898c:	89ab      	ldrh	r3, [r5, #12]
 800898e:	065b      	lsls	r3, r3, #25
 8008990:	f53f af12 	bmi.w	80087b8 <_vfiprintf_r+0x4c>
 8008994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008996:	e711      	b.n	80087bc <_vfiprintf_r+0x50>
 8008998:	ab03      	add	r3, sp, #12
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	462a      	mov	r2, r5
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <_vfiprintf_r+0x258>)
 80089a0:	a904      	add	r1, sp, #16
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7fe f8ac 	bl	8006b00 <_printf_i>
 80089a8:	e7e4      	b.n	8008974 <_vfiprintf_r+0x208>
 80089aa:	bf00      	nop
 80089ac:	08009aa4 	.word	0x08009aa4
 80089b0:	08009ac4 	.word	0x08009ac4
 80089b4:	08009a84 	.word	0x08009a84
 80089b8:	0800992c 	.word	0x0800992c
 80089bc:	08009936 	.word	0x08009936
 80089c0:	080065b9 	.word	0x080065b9
 80089c4:	08008747 	.word	0x08008747
 80089c8:	08009932 	.word	0x08009932

080089cc <__swbuf_r>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	460e      	mov	r6, r1
 80089d0:	4614      	mov	r4, r2
 80089d2:	4605      	mov	r5, r0
 80089d4:	b118      	cbz	r0, 80089de <__swbuf_r+0x12>
 80089d6:	6983      	ldr	r3, [r0, #24]
 80089d8:	b90b      	cbnz	r3, 80089de <__swbuf_r+0x12>
 80089da:	f000 f9e7 	bl	8008dac <__sinit>
 80089de:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <__swbuf_r+0x98>)
 80089e0:	429c      	cmp	r4, r3
 80089e2:	d12b      	bne.n	8008a3c <__swbuf_r+0x70>
 80089e4:	686c      	ldr	r4, [r5, #4]
 80089e6:	69a3      	ldr	r3, [r4, #24]
 80089e8:	60a3      	str	r3, [r4, #8]
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	071a      	lsls	r2, r3, #28
 80089ee:	d52f      	bpl.n	8008a50 <__swbuf_r+0x84>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	b36b      	cbz	r3, 8008a50 <__swbuf_r+0x84>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	6820      	ldr	r0, [r4, #0]
 80089f8:	1ac0      	subs	r0, r0, r3
 80089fa:	6963      	ldr	r3, [r4, #20]
 80089fc:	b2f6      	uxtb	r6, r6
 80089fe:	4283      	cmp	r3, r0
 8008a00:	4637      	mov	r7, r6
 8008a02:	dc04      	bgt.n	8008a0e <__swbuf_r+0x42>
 8008a04:	4621      	mov	r1, r4
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 f93c 	bl	8008c84 <_fflush_r>
 8008a0c:	bb30      	cbnz	r0, 8008a5c <__swbuf_r+0x90>
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	60a3      	str	r3, [r4, #8]
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	6022      	str	r2, [r4, #0]
 8008a1a:	701e      	strb	r6, [r3, #0]
 8008a1c:	6963      	ldr	r3, [r4, #20]
 8008a1e:	3001      	adds	r0, #1
 8008a20:	4283      	cmp	r3, r0
 8008a22:	d004      	beq.n	8008a2e <__swbuf_r+0x62>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	07db      	lsls	r3, r3, #31
 8008a28:	d506      	bpl.n	8008a38 <__swbuf_r+0x6c>
 8008a2a:	2e0a      	cmp	r6, #10
 8008a2c:	d104      	bne.n	8008a38 <__swbuf_r+0x6c>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	f000 f927 	bl	8008c84 <_fflush_r>
 8008a36:	b988      	cbnz	r0, 8008a5c <__swbuf_r+0x90>
 8008a38:	4638      	mov	r0, r7
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <__swbuf_r+0x9c>)
 8008a3e:	429c      	cmp	r4, r3
 8008a40:	d101      	bne.n	8008a46 <__swbuf_r+0x7a>
 8008a42:	68ac      	ldr	r4, [r5, #8]
 8008a44:	e7cf      	b.n	80089e6 <__swbuf_r+0x1a>
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <__swbuf_r+0xa0>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	bf08      	it	eq
 8008a4c:	68ec      	ldreq	r4, [r5, #12]
 8008a4e:	e7ca      	b.n	80089e6 <__swbuf_r+0x1a>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 f81a 	bl	8008a8c <__swsetup_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d0cb      	beq.n	80089f4 <__swbuf_r+0x28>
 8008a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a60:	e7ea      	b.n	8008a38 <__swbuf_r+0x6c>
 8008a62:	bf00      	nop
 8008a64:	08009aa4 	.word	0x08009aa4
 8008a68:	08009ac4 	.word	0x08009ac4
 8008a6c:	08009a84 	.word	0x08009a84

08008a70 <__ascii_wctomb>:
 8008a70:	b149      	cbz	r1, 8008a86 <__ascii_wctomb+0x16>
 8008a72:	2aff      	cmp	r2, #255	; 0xff
 8008a74:	bf85      	ittet	hi
 8008a76:	238a      	movhi	r3, #138	; 0x8a
 8008a78:	6003      	strhi	r3, [r0, #0]
 8008a7a:	700a      	strbls	r2, [r1, #0]
 8008a7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a80:	bf98      	it	ls
 8008a82:	2001      	movls	r0, #1
 8008a84:	4770      	bx	lr
 8008a86:	4608      	mov	r0, r1
 8008a88:	4770      	bx	lr
	...

08008a8c <__swsetup_r>:
 8008a8c:	4b32      	ldr	r3, [pc, #200]	; (8008b58 <__swsetup_r+0xcc>)
 8008a8e:	b570      	push	{r4, r5, r6, lr}
 8008a90:	681d      	ldr	r5, [r3, #0]
 8008a92:	4606      	mov	r6, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	b125      	cbz	r5, 8008aa2 <__swsetup_r+0x16>
 8008a98:	69ab      	ldr	r3, [r5, #24]
 8008a9a:	b913      	cbnz	r3, 8008aa2 <__swsetup_r+0x16>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 f985 	bl	8008dac <__sinit>
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <__swsetup_r+0xd0>)
 8008aa4:	429c      	cmp	r4, r3
 8008aa6:	d10f      	bne.n	8008ac8 <__swsetup_r+0x3c>
 8008aa8:	686c      	ldr	r4, [r5, #4]
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ab0:	0719      	lsls	r1, r3, #28
 8008ab2:	d42c      	bmi.n	8008b0e <__swsetup_r+0x82>
 8008ab4:	06dd      	lsls	r5, r3, #27
 8008ab6:	d411      	bmi.n	8008adc <__swsetup_r+0x50>
 8008ab8:	2309      	movs	r3, #9
 8008aba:	6033      	str	r3, [r6, #0]
 8008abc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	e03e      	b.n	8008b46 <__swsetup_r+0xba>
 8008ac8:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <__swsetup_r+0xd4>)
 8008aca:	429c      	cmp	r4, r3
 8008acc:	d101      	bne.n	8008ad2 <__swsetup_r+0x46>
 8008ace:	68ac      	ldr	r4, [r5, #8]
 8008ad0:	e7eb      	b.n	8008aaa <__swsetup_r+0x1e>
 8008ad2:	4b24      	ldr	r3, [pc, #144]	; (8008b64 <__swsetup_r+0xd8>)
 8008ad4:	429c      	cmp	r4, r3
 8008ad6:	bf08      	it	eq
 8008ad8:	68ec      	ldreq	r4, [r5, #12]
 8008ada:	e7e6      	b.n	8008aaa <__swsetup_r+0x1e>
 8008adc:	0758      	lsls	r0, r3, #29
 8008ade:	d512      	bpl.n	8008b06 <__swsetup_r+0x7a>
 8008ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae2:	b141      	cbz	r1, 8008af6 <__swsetup_r+0x6a>
 8008ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae8:	4299      	cmp	r1, r3
 8008aea:	d002      	beq.n	8008af2 <__swsetup_r+0x66>
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff fb6f 	bl	80081d0 <_free_r>
 8008af2:	2300      	movs	r3, #0
 8008af4:	6363      	str	r3, [r4, #52]	; 0x34
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008afc:	81a3      	strh	r3, [r4, #12]
 8008afe:	2300      	movs	r3, #0
 8008b00:	6063      	str	r3, [r4, #4]
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	f043 0308 	orr.w	r3, r3, #8
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	b94b      	cbnz	r3, 8008b26 <__swsetup_r+0x9a>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b1c:	d003      	beq.n	8008b26 <__swsetup_r+0x9a>
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4630      	mov	r0, r6
 8008b22:	f000 fa07 	bl	8008f34 <__smakebuf_r>
 8008b26:	89a0      	ldrh	r0, [r4, #12]
 8008b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b2c:	f010 0301 	ands.w	r3, r0, #1
 8008b30:	d00a      	beq.n	8008b48 <__swsetup_r+0xbc>
 8008b32:	2300      	movs	r3, #0
 8008b34:	60a3      	str	r3, [r4, #8]
 8008b36:	6963      	ldr	r3, [r4, #20]
 8008b38:	425b      	negs	r3, r3
 8008b3a:	61a3      	str	r3, [r4, #24]
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	b943      	cbnz	r3, 8008b52 <__swsetup_r+0xc6>
 8008b40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b44:	d1ba      	bne.n	8008abc <__swsetup_r+0x30>
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	0781      	lsls	r1, r0, #30
 8008b4a:	bf58      	it	pl
 8008b4c:	6963      	ldrpl	r3, [r4, #20]
 8008b4e:	60a3      	str	r3, [r4, #8]
 8008b50:	e7f4      	b.n	8008b3c <__swsetup_r+0xb0>
 8008b52:	2000      	movs	r0, #0
 8008b54:	e7f7      	b.n	8008b46 <__swsetup_r+0xba>
 8008b56:	bf00      	nop
 8008b58:	20000010 	.word	0x20000010
 8008b5c:	08009aa4 	.word	0x08009aa4
 8008b60:	08009ac4 	.word	0x08009ac4
 8008b64:	08009a84 	.word	0x08009a84

08008b68 <abort>:
 8008b68:	b508      	push	{r3, lr}
 8008b6a:	2006      	movs	r0, #6
 8008b6c:	f000 fa52 	bl	8009014 <raise>
 8008b70:	2001      	movs	r0, #1
 8008b72:	f7f8 fda1 	bl	80016b8 <_exit>
	...

08008b78 <__sflush_r>:
 8008b78:	898a      	ldrh	r2, [r1, #12]
 8008b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	0710      	lsls	r0, r2, #28
 8008b82:	460c      	mov	r4, r1
 8008b84:	d458      	bmi.n	8008c38 <__sflush_r+0xc0>
 8008b86:	684b      	ldr	r3, [r1, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc05      	bgt.n	8008b98 <__sflush_r+0x20>
 8008b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dc02      	bgt.n	8008b98 <__sflush_r+0x20>
 8008b92:	2000      	movs	r0, #0
 8008b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9a:	2e00      	cmp	r6, #0
 8008b9c:	d0f9      	beq.n	8008b92 <__sflush_r+0x1a>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba4:	682f      	ldr	r7, [r5, #0]
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	d032      	beq.n	8008c10 <__sflush_r+0x98>
 8008baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	075a      	lsls	r2, r3, #29
 8008bb0:	d505      	bpl.n	8008bbe <__sflush_r+0x46>
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	1ac0      	subs	r0, r0, r3
 8008bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bb8:	b10b      	cbz	r3, 8008bbe <__sflush_r+0x46>
 8008bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bbc:	1ac0      	subs	r0, r0, r3
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc4:	6a21      	ldr	r1, [r4, #32]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b0      	blx	r6
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	d106      	bne.n	8008bde <__sflush_r+0x66>
 8008bd0:	6829      	ldr	r1, [r5, #0]
 8008bd2:	291d      	cmp	r1, #29
 8008bd4:	d82c      	bhi.n	8008c30 <__sflush_r+0xb8>
 8008bd6:	4a2a      	ldr	r2, [pc, #168]	; (8008c80 <__sflush_r+0x108>)
 8008bd8:	40ca      	lsrs	r2, r1
 8008bda:	07d6      	lsls	r6, r2, #31
 8008bdc:	d528      	bpl.n	8008c30 <__sflush_r+0xb8>
 8008bde:	2200      	movs	r2, #0
 8008be0:	6062      	str	r2, [r4, #4]
 8008be2:	04d9      	lsls	r1, r3, #19
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	6022      	str	r2, [r4, #0]
 8008be8:	d504      	bpl.n	8008bf4 <__sflush_r+0x7c>
 8008bea:	1c42      	adds	r2, r0, #1
 8008bec:	d101      	bne.n	8008bf2 <__sflush_r+0x7a>
 8008bee:	682b      	ldr	r3, [r5, #0]
 8008bf0:	b903      	cbnz	r3, 8008bf4 <__sflush_r+0x7c>
 8008bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf6:	602f      	str	r7, [r5, #0]
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	d0ca      	beq.n	8008b92 <__sflush_r+0x1a>
 8008bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c00:	4299      	cmp	r1, r3
 8008c02:	d002      	beq.n	8008c0a <__sflush_r+0x92>
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7ff fae3 	bl	80081d0 <_free_r>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c0e:	e7c1      	b.n	8008b94 <__sflush_r+0x1c>
 8008c10:	6a21      	ldr	r1, [r4, #32]
 8008c12:	2301      	movs	r3, #1
 8008c14:	4628      	mov	r0, r5
 8008c16:	47b0      	blx	r6
 8008c18:	1c41      	adds	r1, r0, #1
 8008c1a:	d1c7      	bne.n	8008bac <__sflush_r+0x34>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0c4      	beq.n	8008bac <__sflush_r+0x34>
 8008c22:	2b1d      	cmp	r3, #29
 8008c24:	d001      	beq.n	8008c2a <__sflush_r+0xb2>
 8008c26:	2b16      	cmp	r3, #22
 8008c28:	d101      	bne.n	8008c2e <__sflush_r+0xb6>
 8008c2a:	602f      	str	r7, [r5, #0]
 8008c2c:	e7b1      	b.n	8008b92 <__sflush_r+0x1a>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	e7ad      	b.n	8008b94 <__sflush_r+0x1c>
 8008c38:	690f      	ldr	r7, [r1, #16]
 8008c3a:	2f00      	cmp	r7, #0
 8008c3c:	d0a9      	beq.n	8008b92 <__sflush_r+0x1a>
 8008c3e:	0793      	lsls	r3, r2, #30
 8008c40:	680e      	ldr	r6, [r1, #0]
 8008c42:	bf08      	it	eq
 8008c44:	694b      	ldreq	r3, [r1, #20]
 8008c46:	600f      	str	r7, [r1, #0]
 8008c48:	bf18      	it	ne
 8008c4a:	2300      	movne	r3, #0
 8008c4c:	eba6 0807 	sub.w	r8, r6, r7
 8008c50:	608b      	str	r3, [r1, #8]
 8008c52:	f1b8 0f00 	cmp.w	r8, #0
 8008c56:	dd9c      	ble.n	8008b92 <__sflush_r+0x1a>
 8008c58:	6a21      	ldr	r1, [r4, #32]
 8008c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c5c:	4643      	mov	r3, r8
 8008c5e:	463a      	mov	r2, r7
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b0      	blx	r6
 8008c64:	2800      	cmp	r0, #0
 8008c66:	dc06      	bgt.n	8008c76 <__sflush_r+0xfe>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e78e      	b.n	8008b94 <__sflush_r+0x1c>
 8008c76:	4407      	add	r7, r0
 8008c78:	eba8 0800 	sub.w	r8, r8, r0
 8008c7c:	e7e9      	b.n	8008c52 <__sflush_r+0xda>
 8008c7e:	bf00      	nop
 8008c80:	20400001 	.word	0x20400001

08008c84 <_fflush_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	690b      	ldr	r3, [r1, #16]
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	b913      	cbnz	r3, 8008c94 <_fflush_r+0x10>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	4628      	mov	r0, r5
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	b118      	cbz	r0, 8008c9e <_fflush_r+0x1a>
 8008c96:	6983      	ldr	r3, [r0, #24]
 8008c98:	b90b      	cbnz	r3, 8008c9e <_fflush_r+0x1a>
 8008c9a:	f000 f887 	bl	8008dac <__sinit>
 8008c9e:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <_fflush_r+0x6c>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d11b      	bne.n	8008cdc <_fflush_r+0x58>
 8008ca4:	686c      	ldr	r4, [r5, #4]
 8008ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0ef      	beq.n	8008c8e <_fflush_r+0xa>
 8008cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cb0:	07d0      	lsls	r0, r2, #31
 8008cb2:	d404      	bmi.n	8008cbe <_fflush_r+0x3a>
 8008cb4:	0599      	lsls	r1, r3, #22
 8008cb6:	d402      	bmi.n	8008cbe <_fflush_r+0x3a>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cba:	f000 f915 	bl	8008ee8 <__retarget_lock_acquire_recursive>
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7ff ff59 	bl	8008b78 <__sflush_r>
 8008cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc8:	07da      	lsls	r2, r3, #31
 8008cca:	4605      	mov	r5, r0
 8008ccc:	d4e0      	bmi.n	8008c90 <_fflush_r+0xc>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	059b      	lsls	r3, r3, #22
 8008cd2:	d4dd      	bmi.n	8008c90 <_fflush_r+0xc>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd6:	f000 f908 	bl	8008eea <__retarget_lock_release_recursive>
 8008cda:	e7d9      	b.n	8008c90 <_fflush_r+0xc>
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <_fflush_r+0x70>)
 8008cde:	429c      	cmp	r4, r3
 8008ce0:	d101      	bne.n	8008ce6 <_fflush_r+0x62>
 8008ce2:	68ac      	ldr	r4, [r5, #8]
 8008ce4:	e7df      	b.n	8008ca6 <_fflush_r+0x22>
 8008ce6:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <_fflush_r+0x74>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	bf08      	it	eq
 8008cec:	68ec      	ldreq	r4, [r5, #12]
 8008cee:	e7da      	b.n	8008ca6 <_fflush_r+0x22>
 8008cf0:	08009aa4 	.word	0x08009aa4
 8008cf4:	08009ac4 	.word	0x08009ac4
 8008cf8:	08009a84 	.word	0x08009a84

08008cfc <std>:
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	4604      	mov	r4, r0
 8008d02:	e9c0 3300 	strd	r3, r3, [r0]
 8008d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d0a:	6083      	str	r3, [r0, #8]
 8008d0c:	8181      	strh	r1, [r0, #12]
 8008d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d10:	81c2      	strh	r2, [r0, #14]
 8008d12:	6183      	str	r3, [r0, #24]
 8008d14:	4619      	mov	r1, r3
 8008d16:	2208      	movs	r2, #8
 8008d18:	305c      	adds	r0, #92	; 0x5c
 8008d1a:	f7fd fba5 	bl	8006468 <memset>
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <std+0x38>)
 8008d20:	6263      	str	r3, [r4, #36]	; 0x24
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x3c>)
 8008d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x40>)
 8008d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <std+0x44>)
 8008d2c:	6224      	str	r4, [r4, #32]
 8008d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	bf00      	nop
 8008d34:	0800904d 	.word	0x0800904d
 8008d38:	0800906f 	.word	0x0800906f
 8008d3c:	080090a7 	.word	0x080090a7
 8008d40:	080090cb 	.word	0x080090cb

08008d44 <_cleanup_r>:
 8008d44:	4901      	ldr	r1, [pc, #4]	; (8008d4c <_cleanup_r+0x8>)
 8008d46:	f000 b8af 	b.w	8008ea8 <_fwalk_reent>
 8008d4a:	bf00      	nop
 8008d4c:	08008c85 	.word	0x08008c85

08008d50 <__sfmoreglue>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	1e4a      	subs	r2, r1, #1
 8008d54:	2568      	movs	r5, #104	; 0x68
 8008d56:	4355      	muls	r5, r2
 8008d58:	460e      	mov	r6, r1
 8008d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d5e:	f7ff fa87 	bl	8008270 <_malloc_r>
 8008d62:	4604      	mov	r4, r0
 8008d64:	b140      	cbz	r0, 8008d78 <__sfmoreglue+0x28>
 8008d66:	2100      	movs	r1, #0
 8008d68:	e9c0 1600 	strd	r1, r6, [r0]
 8008d6c:	300c      	adds	r0, #12
 8008d6e:	60a0      	str	r0, [r4, #8]
 8008d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d74:	f7fd fb78 	bl	8006468 <memset>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}

08008d7c <__sfp_lock_acquire>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__sfp_lock_acquire+0x8>)
 8008d7e:	f000 b8b3 	b.w	8008ee8 <__retarget_lock_acquire_recursive>
 8008d82:	bf00      	nop
 8008d84:	20000390 	.word	0x20000390

08008d88 <__sfp_lock_release>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__sfp_lock_release+0x8>)
 8008d8a:	f000 b8ae 	b.w	8008eea <__retarget_lock_release_recursive>
 8008d8e:	bf00      	nop
 8008d90:	20000390 	.word	0x20000390

08008d94 <__sinit_lock_acquire>:
 8008d94:	4801      	ldr	r0, [pc, #4]	; (8008d9c <__sinit_lock_acquire+0x8>)
 8008d96:	f000 b8a7 	b.w	8008ee8 <__retarget_lock_acquire_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	2000038b 	.word	0x2000038b

08008da0 <__sinit_lock_release>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__sinit_lock_release+0x8>)
 8008da2:	f000 b8a2 	b.w	8008eea <__retarget_lock_release_recursive>
 8008da6:	bf00      	nop
 8008da8:	2000038b 	.word	0x2000038b

08008dac <__sinit>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	4604      	mov	r4, r0
 8008db0:	f7ff fff0 	bl	8008d94 <__sinit_lock_acquire>
 8008db4:	69a3      	ldr	r3, [r4, #24]
 8008db6:	b11b      	cbz	r3, 8008dc0 <__sinit+0x14>
 8008db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dbc:	f7ff bff0 	b.w	8008da0 <__sinit_lock_release>
 8008dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8008dc6:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <__sinit+0x68>)
 8008dc8:	4a13      	ldr	r2, [pc, #76]	; (8008e18 <__sinit+0x6c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	bf04      	itt	eq
 8008dd2:	2301      	moveq	r3, #1
 8008dd4:	61a3      	streq	r3, [r4, #24]
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 f820 	bl	8008e1c <__sfp>
 8008ddc:	6060      	str	r0, [r4, #4]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f81c 	bl	8008e1c <__sfp>
 8008de4:	60a0      	str	r0, [r4, #8]
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 f818 	bl	8008e1c <__sfp>
 8008dec:	2200      	movs	r2, #0
 8008dee:	60e0      	str	r0, [r4, #12]
 8008df0:	2104      	movs	r1, #4
 8008df2:	6860      	ldr	r0, [r4, #4]
 8008df4:	f7ff ff82 	bl	8008cfc <std>
 8008df8:	68a0      	ldr	r0, [r4, #8]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	2109      	movs	r1, #9
 8008dfe:	f7ff ff7d 	bl	8008cfc <std>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	2202      	movs	r2, #2
 8008e06:	2112      	movs	r1, #18
 8008e08:	f7ff ff78 	bl	8008cfc <std>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	61a3      	str	r3, [r4, #24]
 8008e10:	e7d2      	b.n	8008db8 <__sinit+0xc>
 8008e12:	bf00      	nop
 8008e14:	08009700 	.word	0x08009700
 8008e18:	08008d45 	.word	0x08008d45

08008e1c <__sfp>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	4607      	mov	r7, r0
 8008e20:	f7ff ffac 	bl	8008d7c <__sfp_lock_acquire>
 8008e24:	4b1e      	ldr	r3, [pc, #120]	; (8008ea0 <__sfp+0x84>)
 8008e26:	681e      	ldr	r6, [r3, #0]
 8008e28:	69b3      	ldr	r3, [r6, #24]
 8008e2a:	b913      	cbnz	r3, 8008e32 <__sfp+0x16>
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff ffbd 	bl	8008dac <__sinit>
 8008e32:	3648      	adds	r6, #72	; 0x48
 8008e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	d503      	bpl.n	8008e44 <__sfp+0x28>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	b30b      	cbz	r3, 8008e84 <__sfp+0x68>
 8008e40:	6836      	ldr	r6, [r6, #0]
 8008e42:	e7f7      	b.n	8008e34 <__sfp+0x18>
 8008e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e48:	b9d5      	cbnz	r5, 8008e80 <__sfp+0x64>
 8008e4a:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <__sfp+0x88>)
 8008e4c:	60e3      	str	r3, [r4, #12]
 8008e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e52:	6665      	str	r5, [r4, #100]	; 0x64
 8008e54:	f000 f847 	bl	8008ee6 <__retarget_lock_init_recursive>
 8008e58:	f7ff ff96 	bl	8008d88 <__sfp_lock_release>
 8008e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e64:	6025      	str	r5, [r4, #0]
 8008e66:	61a5      	str	r5, [r4, #24]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e70:	f7fd fafa 	bl	8006468 <memset>
 8008e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e80:	3468      	adds	r4, #104	; 0x68
 8008e82:	e7d9      	b.n	8008e38 <__sfp+0x1c>
 8008e84:	2104      	movs	r1, #4
 8008e86:	4638      	mov	r0, r7
 8008e88:	f7ff ff62 	bl	8008d50 <__sfmoreglue>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	6030      	str	r0, [r6, #0]
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d1d5      	bne.n	8008e40 <__sfp+0x24>
 8008e94:	f7ff ff78 	bl	8008d88 <__sfp_lock_release>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	e7ee      	b.n	8008e7c <__sfp+0x60>
 8008e9e:	bf00      	nop
 8008ea0:	08009700 	.word	0x08009700
 8008ea4:	ffff0001 	.word	0xffff0001

08008ea8 <_fwalk_reent>:
 8008ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eac:	4606      	mov	r6, r0
 8008eae:	4688      	mov	r8, r1
 8008eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eb4:	2700      	movs	r7, #0
 8008eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eba:	f1b9 0901 	subs.w	r9, r9, #1
 8008ebe:	d505      	bpl.n	8008ecc <_fwalk_reent+0x24>
 8008ec0:	6824      	ldr	r4, [r4, #0]
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	d1f7      	bne.n	8008eb6 <_fwalk_reent+0xe>
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ecc:	89ab      	ldrh	r3, [r5, #12]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d907      	bls.n	8008ee2 <_fwalk_reent+0x3a>
 8008ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	d003      	beq.n	8008ee2 <_fwalk_reent+0x3a>
 8008eda:	4629      	mov	r1, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	47c0      	blx	r8
 8008ee0:	4307      	orrs	r7, r0
 8008ee2:	3568      	adds	r5, #104	; 0x68
 8008ee4:	e7e9      	b.n	8008eba <_fwalk_reent+0x12>

08008ee6 <__retarget_lock_init_recursive>:
 8008ee6:	4770      	bx	lr

08008ee8 <__retarget_lock_acquire_recursive>:
 8008ee8:	4770      	bx	lr

08008eea <__retarget_lock_release_recursive>:
 8008eea:	4770      	bx	lr

08008eec <__swhatbuf_r>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	460e      	mov	r6, r1
 8008ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	b096      	sub	sp, #88	; 0x58
 8008ef8:	4614      	mov	r4, r2
 8008efa:	461d      	mov	r5, r3
 8008efc:	da07      	bge.n	8008f0e <__swhatbuf_r+0x22>
 8008efe:	2300      	movs	r3, #0
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	89b3      	ldrh	r3, [r6, #12]
 8008f04:	061a      	lsls	r2, r3, #24
 8008f06:	d410      	bmi.n	8008f2a <__swhatbuf_r+0x3e>
 8008f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f0c:	e00e      	b.n	8008f2c <__swhatbuf_r+0x40>
 8008f0e:	466a      	mov	r2, sp
 8008f10:	f000 f902 	bl	8009118 <_fstat_r>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	dbf2      	blt.n	8008efe <__swhatbuf_r+0x12>
 8008f18:	9a01      	ldr	r2, [sp, #4]
 8008f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f22:	425a      	negs	r2, r3
 8008f24:	415a      	adcs	r2, r3
 8008f26:	602a      	str	r2, [r5, #0]
 8008f28:	e7ee      	b.n	8008f08 <__swhatbuf_r+0x1c>
 8008f2a:	2340      	movs	r3, #64	; 0x40
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	b016      	add	sp, #88	; 0x58
 8008f32:	bd70      	pop	{r4, r5, r6, pc}

08008f34 <__smakebuf_r>:
 8008f34:	898b      	ldrh	r3, [r1, #12]
 8008f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f38:	079d      	lsls	r5, r3, #30
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	d507      	bpl.n	8008f50 <__smakebuf_r+0x1c>
 8008f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6163      	str	r3, [r4, #20]
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	ab01      	add	r3, sp, #4
 8008f52:	466a      	mov	r2, sp
 8008f54:	f7ff ffca 	bl	8008eec <__swhatbuf_r>
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7ff f987 	bl	8008270 <_malloc_r>
 8008f62:	b948      	cbnz	r0, 8008f78 <__smakebuf_r+0x44>
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	059a      	lsls	r2, r3, #22
 8008f6a:	d4ef      	bmi.n	8008f4c <__smakebuf_r+0x18>
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	f043 0302 	orr.w	r3, r3, #2
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	e7e3      	b.n	8008f40 <__smakebuf_r+0xc>
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <__smakebuf_r+0x7c>)
 8008f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	6020      	str	r0, [r4, #0]
 8008f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	6163      	str	r3, [r4, #20]
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	6120      	str	r0, [r4, #16]
 8008f8e:	b15b      	cbz	r3, 8008fa8 <__smakebuf_r+0x74>
 8008f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f94:	4630      	mov	r0, r6
 8008f96:	f000 f8d1 	bl	800913c <_isatty_r>
 8008f9a:	b128      	cbz	r0, 8008fa8 <__smakebuf_r+0x74>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	89a0      	ldrh	r0, [r4, #12]
 8008faa:	4305      	orrs	r5, r0
 8008fac:	81a5      	strh	r5, [r4, #12]
 8008fae:	e7cd      	b.n	8008f4c <__smakebuf_r+0x18>
 8008fb0:	08008d45 	.word	0x08008d45

08008fb4 <_malloc_usable_size_r>:
 8008fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb8:	1f18      	subs	r0, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfbc      	itt	lt
 8008fbe:	580b      	ldrlt	r3, [r1, r0]
 8008fc0:	18c0      	addlt	r0, r0, r3
 8008fc2:	4770      	bx	lr

08008fc4 <_raise_r>:
 8008fc4:	291f      	cmp	r1, #31
 8008fc6:	b538      	push	{r3, r4, r5, lr}
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	d904      	bls.n	8008fd8 <_raise_r+0x14>
 8008fce:	2316      	movs	r3, #22
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fda:	b112      	cbz	r2, 8008fe2 <_raise_r+0x1e>
 8008fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe0:	b94b      	cbnz	r3, 8008ff6 <_raise_r+0x32>
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 f830 	bl	8009048 <_getpid_r>
 8008fe8:	462a      	mov	r2, r5
 8008fea:	4601      	mov	r1, r0
 8008fec:	4620      	mov	r0, r4
 8008fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff2:	f000 b817 	b.w	8009024 <_kill_r>
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d00a      	beq.n	8009010 <_raise_r+0x4c>
 8008ffa:	1c59      	adds	r1, r3, #1
 8008ffc:	d103      	bne.n	8009006 <_raise_r+0x42>
 8008ffe:	2316      	movs	r3, #22
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	2001      	movs	r0, #1
 8009004:	e7e7      	b.n	8008fd6 <_raise_r+0x12>
 8009006:	2400      	movs	r4, #0
 8009008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800900c:	4628      	mov	r0, r5
 800900e:	4798      	blx	r3
 8009010:	2000      	movs	r0, #0
 8009012:	e7e0      	b.n	8008fd6 <_raise_r+0x12>

08009014 <raise>:
 8009014:	4b02      	ldr	r3, [pc, #8]	; (8009020 <raise+0xc>)
 8009016:	4601      	mov	r1, r0
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	f7ff bfd3 	b.w	8008fc4 <_raise_r>
 800901e:	bf00      	nop
 8009020:	20000010 	.word	0x20000010

08009024 <_kill_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d07      	ldr	r5, [pc, #28]	; (8009044 <_kill_r+0x20>)
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	4611      	mov	r1, r2
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	f7f8 fb31 	bl	8001698 <_kill>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d102      	bne.n	8009040 <_kill_r+0x1c>
 800903a:	682b      	ldr	r3, [r5, #0]
 800903c:	b103      	cbz	r3, 8009040 <_kill_r+0x1c>
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	bf00      	nop
 8009044:	20000384 	.word	0x20000384

08009048 <_getpid_r>:
 8009048:	f7f8 bb1e 	b.w	8001688 <_getpid>

0800904c <__sread>:
 800904c:	b510      	push	{r4, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f894 	bl	8009180 <_read_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	bfab      	itete	ge
 800905c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800905e:	89a3      	ldrhlt	r3, [r4, #12]
 8009060:	181b      	addge	r3, r3, r0
 8009062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009066:	bfac      	ite	ge
 8009068:	6563      	strge	r3, [r4, #84]	; 0x54
 800906a:	81a3      	strhlt	r3, [r4, #12]
 800906c:	bd10      	pop	{r4, pc}

0800906e <__swrite>:
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	461f      	mov	r7, r3
 8009074:	898b      	ldrh	r3, [r1, #12]
 8009076:	05db      	lsls	r3, r3, #23
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	4616      	mov	r6, r2
 800907e:	d505      	bpl.n	800908c <__swrite+0x1e>
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	2302      	movs	r3, #2
 8009086:	2200      	movs	r2, #0
 8009088:	f000 f868 	bl	800915c <_lseek_r>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	4632      	mov	r2, r6
 800909a:	463b      	mov	r3, r7
 800909c:	4628      	mov	r0, r5
 800909e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	f000 b817 	b.w	80090d4 <_write_r>

080090a6 <__sseek>:
 80090a6:	b510      	push	{r4, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ae:	f000 f855 	bl	800915c <_lseek_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	bf15      	itete	ne
 80090b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090c2:	81a3      	strheq	r3, [r4, #12]
 80090c4:	bf18      	it	ne
 80090c6:	81a3      	strhne	r3, [r4, #12]
 80090c8:	bd10      	pop	{r4, pc}

080090ca <__sclose>:
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 b813 	b.w	80090f8 <_close_r>
	...

080090d4 <_write_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	; (80090f4 <_write_r+0x20>)
 80090d8:	4604      	mov	r4, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	4611      	mov	r1, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f7f8 fb0f 	bl	8001706 <_write>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_write_r+0x1e>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_write_r+0x1e>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	20000384 	.word	0x20000384

080090f8 <_close_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	; (8009114 <_close_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f8 fb1b 	bl	800173e <_close>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_close_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_close_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20000384 	.word	0x20000384

08009118 <_fstat_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	; (8009138 <_fstat_r+0x20>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	f7f8 fb16 	bl	8001756 <_fstat>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d102      	bne.n	8009134 <_fstat_r+0x1c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b103      	cbz	r3, 8009134 <_fstat_r+0x1c>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	bf00      	nop
 8009138:	20000384 	.word	0x20000384

0800913c <_isatty_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d06      	ldr	r5, [pc, #24]	; (8009158 <_isatty_r+0x1c>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7f8 fb15 	bl	8001776 <_isatty>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_isatty_r+0x1a>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_isatty_r+0x1a>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	20000384 	.word	0x20000384

0800915c <_lseek_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d07      	ldr	r5, [pc, #28]	; (800917c <_lseek_r+0x20>)
 8009160:	4604      	mov	r4, r0
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	2200      	movs	r2, #0
 8009168:	602a      	str	r2, [r5, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f7f8 fb0e 	bl	800178c <_lseek>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_lseek_r+0x1e>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_lseek_r+0x1e>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20000384 	.word	0x20000384

08009180 <_read_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	; (80091a0 <_read_r+0x20>)
 8009184:	4604      	mov	r4, r0
 8009186:	4608      	mov	r0, r1
 8009188:	4611      	mov	r1, r2
 800918a:	2200      	movs	r2, #0
 800918c:	602a      	str	r2, [r5, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f7f8 fa9c 	bl	80016cc <_read>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_read_r+0x1e>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_read_r+0x1e>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20000384 	.word	0x20000384

080091a4 <atan2>:
 80091a4:	f000 b800 	b.w	80091a8 <__ieee754_atan2>

080091a8 <__ieee754_atan2>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	ec57 6b11 	vmov	r6, r7, d1
 80091b0:	4273      	negs	r3, r6
 80091b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009338 <__ieee754_atan2+0x190>
 80091b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80091ba:	4333      	orrs	r3, r6
 80091bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80091c0:	4573      	cmp	r3, lr
 80091c2:	ec51 0b10 	vmov	r0, r1, d0
 80091c6:	ee11 8a10 	vmov	r8, s2
 80091ca:	d80a      	bhi.n	80091e2 <__ieee754_atan2+0x3a>
 80091cc:	4244      	negs	r4, r0
 80091ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091d2:	4304      	orrs	r4, r0
 80091d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80091d8:	4574      	cmp	r4, lr
 80091da:	ee10 9a10 	vmov	r9, s0
 80091de:	468c      	mov	ip, r1
 80091e0:	d907      	bls.n	80091f2 <__ieee754_atan2+0x4a>
 80091e2:	4632      	mov	r2, r6
 80091e4:	463b      	mov	r3, r7
 80091e6:	f7f7 f851 	bl	800028c <__adddf3>
 80091ea:	ec41 0b10 	vmov	d0, r0, r1
 80091ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80091f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091fa:	4334      	orrs	r4, r6
 80091fc:	d103      	bne.n	8009206 <__ieee754_atan2+0x5e>
 80091fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009202:	f000 b89d 	b.w	8009340 <atan>
 8009206:	17bc      	asrs	r4, r7, #30
 8009208:	f004 0402 	and.w	r4, r4, #2
 800920c:	ea53 0909 	orrs.w	r9, r3, r9
 8009210:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009214:	d107      	bne.n	8009226 <__ieee754_atan2+0x7e>
 8009216:	2c02      	cmp	r4, #2
 8009218:	d060      	beq.n	80092dc <__ieee754_atan2+0x134>
 800921a:	2c03      	cmp	r4, #3
 800921c:	d1e5      	bne.n	80091ea <__ieee754_atan2+0x42>
 800921e:	a142      	add	r1, pc, #264	; (adr r1, 8009328 <__ieee754_atan2+0x180>)
 8009220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009224:	e7e1      	b.n	80091ea <__ieee754_atan2+0x42>
 8009226:	ea52 0808 	orrs.w	r8, r2, r8
 800922a:	d106      	bne.n	800923a <__ieee754_atan2+0x92>
 800922c:	f1bc 0f00 	cmp.w	ip, #0
 8009230:	da5f      	bge.n	80092f2 <__ieee754_atan2+0x14a>
 8009232:	a13f      	add	r1, pc, #252	; (adr r1, 8009330 <__ieee754_atan2+0x188>)
 8009234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009238:	e7d7      	b.n	80091ea <__ieee754_atan2+0x42>
 800923a:	4572      	cmp	r2, lr
 800923c:	d10f      	bne.n	800925e <__ieee754_atan2+0xb6>
 800923e:	4293      	cmp	r3, r2
 8009240:	f104 34ff 	add.w	r4, r4, #4294967295
 8009244:	d107      	bne.n	8009256 <__ieee754_atan2+0xae>
 8009246:	2c02      	cmp	r4, #2
 8009248:	d84c      	bhi.n	80092e4 <__ieee754_atan2+0x13c>
 800924a:	4b35      	ldr	r3, [pc, #212]	; (8009320 <__ieee754_atan2+0x178>)
 800924c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009250:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009254:	e7c9      	b.n	80091ea <__ieee754_atan2+0x42>
 8009256:	2c02      	cmp	r4, #2
 8009258:	d848      	bhi.n	80092ec <__ieee754_atan2+0x144>
 800925a:	4b32      	ldr	r3, [pc, #200]	; (8009324 <__ieee754_atan2+0x17c>)
 800925c:	e7f6      	b.n	800924c <__ieee754_atan2+0xa4>
 800925e:	4573      	cmp	r3, lr
 8009260:	d0e4      	beq.n	800922c <__ieee754_atan2+0x84>
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009268:	ea4f 5223 	mov.w	r2, r3, asr #20
 800926c:	da1e      	bge.n	80092ac <__ieee754_atan2+0x104>
 800926e:	2f00      	cmp	r7, #0
 8009270:	da01      	bge.n	8009276 <__ieee754_atan2+0xce>
 8009272:	323c      	adds	r2, #60	; 0x3c
 8009274:	db1e      	blt.n	80092b4 <__ieee754_atan2+0x10c>
 8009276:	4632      	mov	r2, r6
 8009278:	463b      	mov	r3, r7
 800927a:	f7f7 fae7 	bl	800084c <__aeabi_ddiv>
 800927e:	ec41 0b10 	vmov	d0, r0, r1
 8009282:	f000 f9fd 	bl	8009680 <fabs>
 8009286:	f000 f85b 	bl	8009340 <atan>
 800928a:	ec51 0b10 	vmov	r0, r1, d0
 800928e:	2c01      	cmp	r4, #1
 8009290:	d013      	beq.n	80092ba <__ieee754_atan2+0x112>
 8009292:	2c02      	cmp	r4, #2
 8009294:	d015      	beq.n	80092c2 <__ieee754_atan2+0x11a>
 8009296:	2c00      	cmp	r4, #0
 8009298:	d0a7      	beq.n	80091ea <__ieee754_atan2+0x42>
 800929a:	a319      	add	r3, pc, #100	; (adr r3, 8009300 <__ieee754_atan2+0x158>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f7f6 fff2 	bl	8000288 <__aeabi_dsub>
 80092a4:	a318      	add	r3, pc, #96	; (adr r3, 8009308 <__ieee754_atan2+0x160>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	e014      	b.n	80092d6 <__ieee754_atan2+0x12e>
 80092ac:	a118      	add	r1, pc, #96	; (adr r1, 8009310 <__ieee754_atan2+0x168>)
 80092ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092b2:	e7ec      	b.n	800928e <__ieee754_atan2+0xe6>
 80092b4:	2000      	movs	r0, #0
 80092b6:	2100      	movs	r1, #0
 80092b8:	e7e9      	b.n	800928e <__ieee754_atan2+0xe6>
 80092ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092be:	4619      	mov	r1, r3
 80092c0:	e793      	b.n	80091ea <__ieee754_atan2+0x42>
 80092c2:	a30f      	add	r3, pc, #60	; (adr r3, 8009300 <__ieee754_atan2+0x158>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	a10d      	add	r1, pc, #52	; (adr r1, 8009308 <__ieee754_atan2+0x160>)
 80092d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d6:	f7f6 ffd7 	bl	8000288 <__aeabi_dsub>
 80092da:	e786      	b.n	80091ea <__ieee754_atan2+0x42>
 80092dc:	a10a      	add	r1, pc, #40	; (adr r1, 8009308 <__ieee754_atan2+0x160>)
 80092de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092e2:	e782      	b.n	80091ea <__ieee754_atan2+0x42>
 80092e4:	a10c      	add	r1, pc, #48	; (adr r1, 8009318 <__ieee754_atan2+0x170>)
 80092e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ea:	e77e      	b.n	80091ea <__ieee754_atan2+0x42>
 80092ec:	2000      	movs	r0, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	e77b      	b.n	80091ea <__ieee754_atan2+0x42>
 80092f2:	a107      	add	r1, pc, #28	; (adr r1, 8009310 <__ieee754_atan2+0x168>)
 80092f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f8:	e777      	b.n	80091ea <__ieee754_atan2+0x42>
 80092fa:	bf00      	nop
 80092fc:	f3af 8000 	nop.w
 8009300:	33145c07 	.word	0x33145c07
 8009304:	3ca1a626 	.word	0x3ca1a626
 8009308:	54442d18 	.word	0x54442d18
 800930c:	400921fb 	.word	0x400921fb
 8009310:	54442d18 	.word	0x54442d18
 8009314:	3ff921fb 	.word	0x3ff921fb
 8009318:	54442d18 	.word	0x54442d18
 800931c:	3fe921fb 	.word	0x3fe921fb
 8009320:	08009ae8 	.word	0x08009ae8
 8009324:	08009b00 	.word	0x08009b00
 8009328:	54442d18 	.word	0x54442d18
 800932c:	c00921fb 	.word	0xc00921fb
 8009330:	54442d18 	.word	0x54442d18
 8009334:	bff921fb 	.word	0xbff921fb
 8009338:	7ff00000 	.word	0x7ff00000
 800933c:	00000000 	.word	0x00000000

08009340 <atan>:
 8009340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	ec55 4b10 	vmov	r4, r5, d0
 8009348:	4bc3      	ldr	r3, [pc, #780]	; (8009658 <atan+0x318>)
 800934a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800934e:	429e      	cmp	r6, r3
 8009350:	46ab      	mov	fp, r5
 8009352:	dd18      	ble.n	8009386 <atan+0x46>
 8009354:	4bc1      	ldr	r3, [pc, #772]	; (800965c <atan+0x31c>)
 8009356:	429e      	cmp	r6, r3
 8009358:	dc01      	bgt.n	800935e <atan+0x1e>
 800935a:	d109      	bne.n	8009370 <atan+0x30>
 800935c:	b144      	cbz	r4, 8009370 <atan+0x30>
 800935e:	4622      	mov	r2, r4
 8009360:	462b      	mov	r3, r5
 8009362:	4620      	mov	r0, r4
 8009364:	4629      	mov	r1, r5
 8009366:	f7f6 ff91 	bl	800028c <__adddf3>
 800936a:	4604      	mov	r4, r0
 800936c:	460d      	mov	r5, r1
 800936e:	e006      	b.n	800937e <atan+0x3e>
 8009370:	f1bb 0f00 	cmp.w	fp, #0
 8009374:	f300 8131 	bgt.w	80095da <atan+0x29a>
 8009378:	a59b      	add	r5, pc, #620	; (adr r5, 80095e8 <atan+0x2a8>)
 800937a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800937e:	ec45 4b10 	vmov	d0, r4, r5
 8009382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009386:	4bb6      	ldr	r3, [pc, #728]	; (8009660 <atan+0x320>)
 8009388:	429e      	cmp	r6, r3
 800938a:	dc14      	bgt.n	80093b6 <atan+0x76>
 800938c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009390:	429e      	cmp	r6, r3
 8009392:	dc0d      	bgt.n	80093b0 <atan+0x70>
 8009394:	a396      	add	r3, pc, #600	; (adr r3, 80095f0 <atan+0x2b0>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	ee10 0a10 	vmov	r0, s0
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f6 ff74 	bl	800028c <__adddf3>
 80093a4:	4baf      	ldr	r3, [pc, #700]	; (8009664 <atan+0x324>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	f7f7 fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1e6      	bne.n	800937e <atan+0x3e>
 80093b0:	f04f 3aff 	mov.w	sl, #4294967295
 80093b4:	e02b      	b.n	800940e <atan+0xce>
 80093b6:	f000 f963 	bl	8009680 <fabs>
 80093ba:	4bab      	ldr	r3, [pc, #684]	; (8009668 <atan+0x328>)
 80093bc:	429e      	cmp	r6, r3
 80093be:	ec55 4b10 	vmov	r4, r5, d0
 80093c2:	f300 80bf 	bgt.w	8009544 <atan+0x204>
 80093c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80093ca:	429e      	cmp	r6, r3
 80093cc:	f300 80a0 	bgt.w	8009510 <atan+0x1d0>
 80093d0:	ee10 2a10 	vmov	r2, s0
 80093d4:	ee10 0a10 	vmov	r0, s0
 80093d8:	462b      	mov	r3, r5
 80093da:	4629      	mov	r1, r5
 80093dc:	f7f6 ff56 	bl	800028c <__adddf3>
 80093e0:	4ba0      	ldr	r3, [pc, #640]	; (8009664 <atan+0x324>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	f7f6 ff50 	bl	8000288 <__aeabi_dsub>
 80093e8:	2200      	movs	r2, #0
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7f6 ff49 	bl	800028c <__adddf3>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4630      	mov	r0, r6
 8009400:	4639      	mov	r1, r7
 8009402:	f7f7 fa23 	bl	800084c <__aeabi_ddiv>
 8009406:	f04f 0a00 	mov.w	sl, #0
 800940a:	4604      	mov	r4, r0
 800940c:	460d      	mov	r5, r1
 800940e:	4622      	mov	r2, r4
 8009410:	462b      	mov	r3, r5
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4680      	mov	r8, r0
 8009420:	4689      	mov	r9, r1
 8009422:	f7f7 f8e9 	bl	80005f8 <__aeabi_dmul>
 8009426:	a374      	add	r3, pc, #464	; (adr r3, 80095f8 <atan+0x2b8>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	4606      	mov	r6, r0
 800942e:	460f      	mov	r7, r1
 8009430:	f7f7 f8e2 	bl	80005f8 <__aeabi_dmul>
 8009434:	a372      	add	r3, pc, #456	; (adr r3, 8009600 <atan+0x2c0>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f6 ff27 	bl	800028c <__adddf3>
 800943e:	4632      	mov	r2, r6
 8009440:	463b      	mov	r3, r7
 8009442:	f7f7 f8d9 	bl	80005f8 <__aeabi_dmul>
 8009446:	a370      	add	r3, pc, #448	; (adr r3, 8009608 <atan+0x2c8>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 ff1e 	bl	800028c <__adddf3>
 8009450:	4632      	mov	r2, r6
 8009452:	463b      	mov	r3, r7
 8009454:	f7f7 f8d0 	bl	80005f8 <__aeabi_dmul>
 8009458:	a36d      	add	r3, pc, #436	; (adr r3, 8009610 <atan+0x2d0>)
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f7f6 ff15 	bl	800028c <__adddf3>
 8009462:	4632      	mov	r2, r6
 8009464:	463b      	mov	r3, r7
 8009466:	f7f7 f8c7 	bl	80005f8 <__aeabi_dmul>
 800946a:	a36b      	add	r3, pc, #428	; (adr r3, 8009618 <atan+0x2d8>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff0c 	bl	800028c <__adddf3>
 8009474:	4632      	mov	r2, r6
 8009476:	463b      	mov	r3, r7
 8009478:	f7f7 f8be 	bl	80005f8 <__aeabi_dmul>
 800947c:	a368      	add	r3, pc, #416	; (adr r3, 8009620 <atan+0x2e0>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f7f6 ff03 	bl	800028c <__adddf3>
 8009486:	4642      	mov	r2, r8
 8009488:	464b      	mov	r3, r9
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	a366      	add	r3, pc, #408	; (adr r3, 8009628 <atan+0x2e8>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f7 f8ac 	bl	80005f8 <__aeabi_dmul>
 80094a0:	a363      	add	r3, pc, #396	; (adr r3, 8009630 <atan+0x2f0>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f6 feef 	bl	8000288 <__aeabi_dsub>
 80094aa:	4632      	mov	r2, r6
 80094ac:	463b      	mov	r3, r7
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	a361      	add	r3, pc, #388	; (adr r3, 8009638 <atan+0x2f8>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f6 fee6 	bl	8000288 <__aeabi_dsub>
 80094bc:	4632      	mov	r2, r6
 80094be:	463b      	mov	r3, r7
 80094c0:	f7f7 f89a 	bl	80005f8 <__aeabi_dmul>
 80094c4:	a35e      	add	r3, pc, #376	; (adr r3, 8009640 <atan+0x300>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 fedd 	bl	8000288 <__aeabi_dsub>
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	f7f7 f891 	bl	80005f8 <__aeabi_dmul>
 80094d6:	a35c      	add	r3, pc, #368	; (adr r3, 8009648 <atan+0x308>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f6 fed4 	bl	8000288 <__aeabi_dsub>
 80094e0:	4632      	mov	r2, r6
 80094e2:	463b      	mov	r3, r7
 80094e4:	f7f7 f888 	bl	80005f8 <__aeabi_dmul>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4640      	mov	r0, r8
 80094ee:	4649      	mov	r1, r9
 80094f0:	f7f6 fecc 	bl	800028c <__adddf3>
 80094f4:	4622      	mov	r2, r4
 80094f6:	462b      	mov	r3, r5
 80094f8:	f7f7 f87e 	bl	80005f8 <__aeabi_dmul>
 80094fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	d14b      	bne.n	800959e <atan+0x25e>
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f6 febd 	bl	8000288 <__aeabi_dsub>
 800950e:	e72c      	b.n	800936a <atan+0x2a>
 8009510:	ee10 0a10 	vmov	r0, s0
 8009514:	4b53      	ldr	r3, [pc, #332]	; (8009664 <atan+0x324>)
 8009516:	2200      	movs	r2, #0
 8009518:	4629      	mov	r1, r5
 800951a:	f7f6 feb5 	bl	8000288 <__aeabi_dsub>
 800951e:	4b51      	ldr	r3, [pc, #324]	; (8009664 <atan+0x324>)
 8009520:	4606      	mov	r6, r0
 8009522:	460f      	mov	r7, r1
 8009524:	2200      	movs	r2, #0
 8009526:	4620      	mov	r0, r4
 8009528:	4629      	mov	r1, r5
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4630      	mov	r0, r6
 8009534:	4639      	mov	r1, r7
 8009536:	f7f7 f989 	bl	800084c <__aeabi_ddiv>
 800953a:	f04f 0a01 	mov.w	sl, #1
 800953e:	4604      	mov	r4, r0
 8009540:	460d      	mov	r5, r1
 8009542:	e764      	b.n	800940e <atan+0xce>
 8009544:	4b49      	ldr	r3, [pc, #292]	; (800966c <atan+0x32c>)
 8009546:	429e      	cmp	r6, r3
 8009548:	da1d      	bge.n	8009586 <atan+0x246>
 800954a:	ee10 0a10 	vmov	r0, s0
 800954e:	4b48      	ldr	r3, [pc, #288]	; (8009670 <atan+0x330>)
 8009550:	2200      	movs	r2, #0
 8009552:	4629      	mov	r1, r5
 8009554:	f7f6 fe98 	bl	8000288 <__aeabi_dsub>
 8009558:	4b45      	ldr	r3, [pc, #276]	; (8009670 <atan+0x330>)
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	2200      	movs	r2, #0
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4b3e      	ldr	r3, [pc, #248]	; (8009664 <atan+0x324>)
 800956a:	2200      	movs	r2, #0
 800956c:	f7f6 fe8e 	bl	800028c <__adddf3>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4630      	mov	r0, r6
 8009576:	4639      	mov	r1, r7
 8009578:	f7f7 f968 	bl	800084c <__aeabi_ddiv>
 800957c:	f04f 0a02 	mov.w	sl, #2
 8009580:	4604      	mov	r4, r0
 8009582:	460d      	mov	r5, r1
 8009584:	e743      	b.n	800940e <atan+0xce>
 8009586:	462b      	mov	r3, r5
 8009588:	ee10 2a10 	vmov	r2, s0
 800958c:	4939      	ldr	r1, [pc, #228]	; (8009674 <atan+0x334>)
 800958e:	2000      	movs	r0, #0
 8009590:	f7f7 f95c 	bl	800084c <__aeabi_ddiv>
 8009594:	f04f 0a03 	mov.w	sl, #3
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	e737      	b.n	800940e <atan+0xce>
 800959e:	4b36      	ldr	r3, [pc, #216]	; (8009678 <atan+0x338>)
 80095a0:	4e36      	ldr	r6, [pc, #216]	; (800967c <atan+0x33c>)
 80095a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80095a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80095aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80095ae:	f7f6 fe6b 	bl	8000288 <__aeabi_dsub>
 80095b2:	4622      	mov	r2, r4
 80095b4:	462b      	mov	r3, r5
 80095b6:	f7f6 fe67 	bl	8000288 <__aeabi_dsub>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80095c2:	f7f6 fe61 	bl	8000288 <__aeabi_dsub>
 80095c6:	f1bb 0f00 	cmp.w	fp, #0
 80095ca:	4604      	mov	r4, r0
 80095cc:	460d      	mov	r5, r1
 80095ce:	f6bf aed6 	bge.w	800937e <atan+0x3e>
 80095d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095d6:	461d      	mov	r5, r3
 80095d8:	e6d1      	b.n	800937e <atan+0x3e>
 80095da:	a51d      	add	r5, pc, #116	; (adr r5, 8009650 <atan+0x310>)
 80095dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095e0:	e6cd      	b.n	800937e <atan+0x3e>
 80095e2:	bf00      	nop
 80095e4:	f3af 8000 	nop.w
 80095e8:	54442d18 	.word	0x54442d18
 80095ec:	bff921fb 	.word	0xbff921fb
 80095f0:	8800759c 	.word	0x8800759c
 80095f4:	7e37e43c 	.word	0x7e37e43c
 80095f8:	e322da11 	.word	0xe322da11
 80095fc:	3f90ad3a 	.word	0x3f90ad3a
 8009600:	24760deb 	.word	0x24760deb
 8009604:	3fa97b4b 	.word	0x3fa97b4b
 8009608:	a0d03d51 	.word	0xa0d03d51
 800960c:	3fb10d66 	.word	0x3fb10d66
 8009610:	c54c206e 	.word	0xc54c206e
 8009614:	3fb745cd 	.word	0x3fb745cd
 8009618:	920083ff 	.word	0x920083ff
 800961c:	3fc24924 	.word	0x3fc24924
 8009620:	5555550d 	.word	0x5555550d
 8009624:	3fd55555 	.word	0x3fd55555
 8009628:	2c6a6c2f 	.word	0x2c6a6c2f
 800962c:	bfa2b444 	.word	0xbfa2b444
 8009630:	52defd9a 	.word	0x52defd9a
 8009634:	3fadde2d 	.word	0x3fadde2d
 8009638:	af749a6d 	.word	0xaf749a6d
 800963c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009640:	fe231671 	.word	0xfe231671
 8009644:	3fbc71c6 	.word	0x3fbc71c6
 8009648:	9998ebc4 	.word	0x9998ebc4
 800964c:	3fc99999 	.word	0x3fc99999
 8009650:	54442d18 	.word	0x54442d18
 8009654:	3ff921fb 	.word	0x3ff921fb
 8009658:	440fffff 	.word	0x440fffff
 800965c:	7ff00000 	.word	0x7ff00000
 8009660:	3fdbffff 	.word	0x3fdbffff
 8009664:	3ff00000 	.word	0x3ff00000
 8009668:	3ff2ffff 	.word	0x3ff2ffff
 800966c:	40038000 	.word	0x40038000
 8009670:	3ff80000 	.word	0x3ff80000
 8009674:	bff00000 	.word	0xbff00000
 8009678:	08009b38 	.word	0x08009b38
 800967c:	08009b18 	.word	0x08009b18

08009680 <fabs>:
 8009680:	ec51 0b10 	vmov	r0, r1, d0
 8009684:	ee10 2a10 	vmov	r2, s0
 8009688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800968c:	ec43 2b10 	vmov	d0, r2, r3
 8009690:	4770      	bx	lr
	...

08009694 <_init>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr

080096a0 <_fini>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	bf00      	nop
 80096a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a6:	bc08      	pop	{r3}
 80096a8:	469e      	mov	lr, r3
 80096aa:	4770      	bx	lr
